
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00003326  000033ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800118  00800118  00003472  2**0
                  ALLOC
  3 .stab         0000345c  00000000  00000000  00003474  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000115e  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009927  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a812  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b9ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c17b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 33       	cpi	r26, 0x31	; 49
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bc 09 	call	0x1378	; 0x1378 <main>
      8a:	0c 94 91 19 	jmp	0x3322	; 0x3322 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e0       	ldi	r26, 0x06	; 6
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e0       	ldi	r24, 0x06	; 6
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <enter_PW_With_confirmation>:
static uint8 g_PW[5];
static uint8 g_currentMessage[16];
uint8 g_check = (uint8)0;
/*Description:Fucntion to deal with enter password and confirm it*/
void enter_PW_With_confirmation(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ad 97       	sbiw	r28, 0x2d	; 45
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0;
     b5a:	1d a6       	std	Y+45, r1	; 0x2d
	uint8 key;
	bool check = FALSE;
     b5c:	1b a6       	std	Y+43, r1	; 0x2b
	/*move cursor to line 2 and column 5*/
	LCD_goToRowColumn(1,4);
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	64 e0       	ldi	r22, 0x04	; 4
     b62:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
     b66:	8a c0       	rjmp	.+276    	; 0xc7c <enter_PW_With_confirmation+0x136>
	/*looping for 5 times to get password from user*/
	for(;counter<5;counter++)
	{
		do{
			/*get digits of password */
			key = KeyPad_getPressedKey();
     b68:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <KeyPad_getPressedKey>
     b6c:	8c a7       	std	Y+44, r24	; 0x2c

		}while(!(key>0 && key<=9));/*to ensure that the key inserted is digit not symbol or alphabet */
     b6e:	8c a5       	ldd	r24, Y+44	; 0x2c
     b70:	88 23       	and	r24, r24
     b72:	d1 f3       	breq	.-12     	; 0xb68 <enter_PW_With_confirmation+0x22>
     b74:	8c a5       	ldd	r24, Y+44	; 0x2c
     b76:	8a 30       	cpi	r24, 0x0A	; 10
     b78:	b8 f7       	brcc	.-18     	; 0xb68 <enter_PW_With_confirmation+0x22>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	aa ef       	ldi	r26, 0xFA	; 250
     b80:	b3 e4       	ldi	r27, 0x43	; 67
     b82:	8f a3       	std	Y+39, r24	; 0x27
     b84:	98 a7       	std	Y+40, r25	; 0x28
     b86:	a9 a7       	std	Y+41, r26	; 0x29
     b88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8a:	6f a1       	ldd	r22, Y+39	; 0x27
     b8c:	78 a5       	ldd	r23, Y+40	; 0x28
     b8e:	89 a5       	ldd	r24, Y+41	; 0x29
     b90:	9a a5       	ldd	r25, Y+42	; 0x2a
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	4a e7       	ldi	r20, 0x7A	; 122
     b98:	53 e4       	ldi	r21, 0x43	; 67
     b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	8b a3       	std	Y+35, r24	; 0x23
     ba4:	9c a3       	std	Y+36, r25	; 0x24
     ba6:	ad a3       	std	Y+37, r26	; 0x25
     ba8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     baa:	6b a1       	ldd	r22, Y+35	; 0x23
     bac:	7c a1       	ldd	r23, Y+36	; 0x24
     bae:	8d a1       	ldd	r24, Y+37	; 0x25
     bb0:	9e a1       	ldd	r25, Y+38	; 0x26
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e8       	ldi	r20, 0x80	; 128
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbe:	88 23       	and	r24, r24
     bc0:	2c f4       	brge	.+10     	; 0xbcc <enter_PW_With_confirmation+0x86>
		__ticks = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	9a a3       	std	Y+34, r25	; 0x22
     bc8:	89 a3       	std	Y+33, r24	; 0x21
     bca:	3f c0       	rjmp	.+126    	; 0xc4a <enter_PW_With_confirmation+0x104>
	else if (__tmp > 65535)
     bcc:	6b a1       	ldd	r22, Y+35	; 0x23
     bce:	7c a1       	ldd	r23, Y+36	; 0x24
     bd0:	8d a1       	ldd	r24, Y+37	; 0x25
     bd2:	9e a1       	ldd	r25, Y+38	; 0x26
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f e7       	ldi	r20, 0x7F	; 127
     bda:	57 e4       	ldi	r21, 0x47	; 71
     bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be0:	18 16       	cp	r1, r24
     be2:	4c f5       	brge	.+82     	; 0xc36 <enter_PW_With_confirmation+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be4:	6f a1       	ldd	r22, Y+39	; 0x27
     be6:	78 a5       	ldd	r23, Y+40	; 0x28
     be8:	89 a5       	ldd	r24, Y+41	; 0x29
     bea:	9a a5       	ldd	r25, Y+42	; 0x2a
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e2       	ldi	r20, 0x20	; 32
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9a a3       	std	Y+34, r25	; 0x22
     c0a:	89 a3       	std	Y+33, r24	; 0x21
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <enter_PW_With_confirmation+0xe6>
     c0e:	89 e1       	ldi	r24, 0x19	; 25
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	98 a3       	std	Y+32, r25	; 0x20
     c14:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c16:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c18:	98 a1       	ldd	r25, Y+32	; 0x20
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <enter_PW_With_confirmation+0xd4>
     c1e:	98 a3       	std	Y+32, r25	; 0x20
     c20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c22:	89 a1       	ldd	r24, Y+33	; 0x21
     c24:	9a a1       	ldd	r25, Y+34	; 0x22
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	9a a3       	std	Y+34, r25	; 0x22
     c2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2c:	89 a1       	ldd	r24, Y+33	; 0x21
     c2e:	9a a1       	ldd	r25, Y+34	; 0x22
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	69 f7       	brne	.-38     	; 0xc0e <enter_PW_With_confirmation+0xc8>
     c34:	14 c0       	rjmp	.+40     	; 0xc5e <enter_PW_With_confirmation+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c36:	6b a1       	ldd	r22, Y+35	; 0x23
     c38:	7c a1       	ldd	r23, Y+36	; 0x24
     c3a:	8d a1       	ldd	r24, Y+37	; 0x25
     c3c:	9e a1       	ldd	r25, Y+38	; 0x26
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9a a3       	std	Y+34, r25	; 0x22
     c48:	89 a3       	std	Y+33, r24	; 0x21
     c4a:	89 a1       	ldd	r24, Y+33	; 0x21
     c4c:	9a a1       	ldd	r25, Y+34	; 0x22
     c4e:	9e 8f       	std	Y+30, r25	; 0x1e
     c50:	8d 8f       	std	Y+29, r24	; 0x1d
     c52:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c54:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <enter_PW_With_confirmation+0x110>
     c5a:	9e 8f       	std	Y+30, r25	; 0x1e
     c5c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		/*store password in array to check for it in confirmation step*/
		g_PW[counter] = key+48;
     c5e:	8d a5       	ldd	r24, Y+45	; 0x2d
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	8c a5       	ldd	r24, Y+44	; 0x2c
     c66:	80 5d       	subi	r24, 0xD0	; 208
     c68:	f9 01       	movw	r30, r18
     c6a:	e6 5e       	subi	r30, 0xE6	; 230
     c6c:	fe 4f       	sbci	r31, 0xFE	; 254
     c6e:	80 83       	st	Z, r24

		/*print key on LCD Hashed*/
		LCD_displayCharacter('*');
     c70:	8a e2       	ldi	r24, 0x2A	; 42
     c72:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_displayCharacter>
	uint8 key;
	bool check = FALSE;
	/*move cursor to line 2 and column 5*/
	LCD_goToRowColumn(1,4);
	/*looping for 5 times to get password from user*/
	for(;counter<5;counter++)
     c76:	8d a5       	ldd	r24, Y+45	; 0x2d
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	8d a7       	std	Y+45, r24	; 0x2d
     c7c:	8d a5       	ldd	r24, Y+45	; 0x2d
     c7e:	85 30       	cpi	r24, 0x05	; 5
     c80:	08 f4       	brcc	.+2      	; 0xc84 <enter_PW_With_confirmation+0x13e>
     c82:	72 cf       	rjmp	.-284    	; 0xb68 <enter_PW_With_confirmation+0x22>
		LCD_displayCharacter('*');
	}
	/*confirmation step*/
	/**********************************************************************/
	/*clear screen from previous step data*/
	LCD_clearScreen();
     c84:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
	/*move cursor to line 1 and column 4*/
	LCD_goToRowColumn(0,3);
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	63 e0       	ldi	r22, 0x03	; 3
     c8c:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
     c90:	20 c1       	rjmp	.+576    	; 0xed2 <enter_PW_With_confirmation+0x38c>
	/*loop until user enter same password again correctly*/
	while(!check)
	{

		/*reset counter to start check password again*/
		counter = 0;
     c92:	1d a6       	std	Y+45, r1	; 0x2d
		check = TRUE;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	8b a7       	std	Y+43, r24	; 0x2b
		/*clear screen Before each iteration*/
		LCD_clearScreen();
     c98:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
		/*print message on screen to enter the same password again*/
		LCD_displayString("Confirm Password:");
     c9c:	80 e6       	ldi	r24, 0x60	; 96
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
		/*move cursor to line 2 and column 5*/
		LCD_goToRowColumn(1,4);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	64 e0       	ldi	r22, 0x04	; 4
     ca8:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
     cac:	92 c0       	rjmp	.+292    	; 0xdd2 <enter_PW_With_confirmation+0x28c>

		for(;counter<5;counter++)
		{
			do{
				/*get digits of password */
				key = KeyPad_getPressedKey();
     cae:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <KeyPad_getPressedKey>
     cb2:	8c a7       	std	Y+44, r24	; 0x2c
			}while(!(key>0 && key<=9));/*to ensure that the key inserted is digit not symbol or alphabet */
     cb4:	8c a5       	ldd	r24, Y+44	; 0x2c
     cb6:	88 23       	and	r24, r24
     cb8:	d1 f3       	breq	.-12     	; 0xcae <enter_PW_With_confirmation+0x168>
     cba:	8c a5       	ldd	r24, Y+44	; 0x2c
     cbc:	8a 30       	cpi	r24, 0x0A	; 10
     cbe:	b8 f7       	brcc	.-18     	; 0xcae <enter_PW_With_confirmation+0x168>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	aa ef       	ldi	r26, 0xFA	; 250
     cc6:	b3 e4       	ldi	r27, 0x43	; 67
     cc8:	89 8f       	std	Y+25, r24	; 0x19
     cca:	9a 8f       	std	Y+26, r25	; 0x1a
     ccc:	ab 8f       	std	Y+27, r26	; 0x1b
     cce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd0:	69 8d       	ldd	r22, Y+25	; 0x19
     cd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	4a e7       	ldi	r20, 0x7A	; 122
     cde:	53 e4       	ldi	r21, 0x43	; 67
     ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	8d 8b       	std	Y+21, r24	; 0x15
     cea:	9e 8b       	std	Y+22, r25	; 0x16
     cec:	af 8b       	std	Y+23, r26	; 0x17
     cee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cf0:	6d 89       	ldd	r22, Y+21	; 0x15
     cf2:	7e 89       	ldd	r23, Y+22	; 0x16
     cf4:	8f 89       	ldd	r24, Y+23	; 0x17
     cf6:	98 8d       	ldd	r25, Y+24	; 0x18
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e8       	ldi	r20, 0x80	; 128
     cfe:	5f e3       	ldi	r21, 0x3F	; 63
     d00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d04:	88 23       	and	r24, r24
     d06:	2c f4       	brge	.+10     	; 0xd12 <enter_PW_With_confirmation+0x1cc>
		__ticks = 1;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9c 8b       	std	Y+20, r25	; 0x14
     d0e:	8b 8b       	std	Y+19, r24	; 0x13
     d10:	3f c0       	rjmp	.+126    	; 0xd90 <enter_PW_With_confirmation+0x24a>
	else if (__tmp > 65535)
     d12:	6d 89       	ldd	r22, Y+21	; 0x15
     d14:	7e 89       	ldd	r23, Y+22	; 0x16
     d16:	8f 89       	ldd	r24, Y+23	; 0x17
     d18:	98 8d       	ldd	r25, Y+24	; 0x18
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	3f ef       	ldi	r19, 0xFF	; 255
     d1e:	4f e7       	ldi	r20, 0x7F	; 127
     d20:	57 e4       	ldi	r21, 0x47	; 71
     d22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d26:	18 16       	cp	r1, r24
     d28:	4c f5       	brge	.+82     	; 0xd7c <enter_PW_With_confirmation+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2a:	69 8d       	ldd	r22, Y+25	; 0x19
     d2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d30:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e2       	ldi	r20, 0x20	; 32
     d38:	51 e4       	ldi	r21, 0x41	; 65
     d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	bc 01       	movw	r22, r24
     d44:	cd 01       	movw	r24, r26
     d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	9c 8b       	std	Y+20, r25	; 0x14
     d50:	8b 8b       	std	Y+19, r24	; 0x13
     d52:	0f c0       	rjmp	.+30     	; 0xd72 <enter_PW_With_confirmation+0x22c>
     d54:	89 e1       	ldi	r24, 0x19	; 25
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9a 8b       	std	Y+18, r25	; 0x12
     d5a:	89 8b       	std	Y+17, r24	; 0x11
     d5c:	89 89       	ldd	r24, Y+17	; 0x11
     d5e:	9a 89       	ldd	r25, Y+18	; 0x12
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <enter_PW_With_confirmation+0x21a>
     d64:	9a 8b       	std	Y+18, r25	; 0x12
     d66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d68:	8b 89       	ldd	r24, Y+19	; 0x13
     d6a:	9c 89       	ldd	r25, Y+20	; 0x14
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	9c 8b       	std	Y+20, r25	; 0x14
     d70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d72:	8b 89       	ldd	r24, Y+19	; 0x13
     d74:	9c 89       	ldd	r25, Y+20	; 0x14
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	69 f7       	brne	.-38     	; 0xd54 <enter_PW_With_confirmation+0x20e>
     d7a:	14 c0       	rjmp	.+40     	; 0xda4 <enter_PW_With_confirmation+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7c:	6d 89       	ldd	r22, Y+21	; 0x15
     d7e:	7e 89       	ldd	r23, Y+22	; 0x16
     d80:	8f 89       	ldd	r24, Y+23	; 0x17
     d82:	98 8d       	ldd	r25, Y+24	; 0x18
     d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	9c 8b       	std	Y+20, r25	; 0x14
     d8e:	8b 8b       	std	Y+19, r24	; 0x13
     d90:	8b 89       	ldd	r24, Y+19	; 0x13
     d92:	9c 89       	ldd	r25, Y+20	; 0x14
     d94:	98 8b       	std	Y+16, r25	; 0x10
     d96:	8f 87       	std	Y+15, r24	; 0x0f
     d98:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9a:	98 89       	ldd	r25, Y+16	; 0x10
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <enter_PW_With_confirmation+0x256>
     da0:	98 8b       	std	Y+16, r25	; 0x10
     da2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			/*check if key match the digit corresponding to in password array*/
			if(g_PW[counter] != (key+48))
     da4:	8d a5       	ldd	r24, Y+45	; 0x2d
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	fc 01       	movw	r30, r24
     dac:	e6 5e       	subi	r30, 0xE6	; 230
     dae:	fe 4f       	sbci	r31, 0xFE	; 254
     db0:	80 81       	ld	r24, Z
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	8c a5       	ldd	r24, Y+44	; 0x2c
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	c0 96       	adiw	r24, 0x30	; 48
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <enter_PW_With_confirmation+0x280>
			{
				check = FALSE;
     dc4:	1b a6       	std	Y+43, r1	; 0x2b
			}
			/*print key on LCD Hashed*/
			LCD_displayCharacter('*');
     dc6:	8a e2       	ldi	r24, 0x2A	; 42
     dc8:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_displayCharacter>
		/*print message on screen to enter the same password again*/
		LCD_displayString("Confirm Password:");
		/*move cursor to line 2 and column 5*/
		LCD_goToRowColumn(1,4);

		for(;counter<5;counter++)
     dcc:	8d a5       	ldd	r24, Y+45	; 0x2d
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	8d a7       	std	Y+45, r24	; 0x2d
     dd2:	8d a5       	ldd	r24, Y+45	; 0x2d
     dd4:	85 30       	cpi	r24, 0x05	; 5
     dd6:	08 f4       	brcc	.+2      	; 0xdda <enter_PW_With_confirmation+0x294>
     dd8:	6a cf       	rjmp	.-300    	; 0xcae <enter_PW_With_confirmation+0x168>
			/*print key on LCD Hashed*/
			LCD_displayCharacter('*');

		}
		/*displaying error msg if entered wrong password*/
		if(check == FALSE)
     dda:	8b a5       	ldd	r24, Y+43	; 0x2b
     ddc:	88 23       	and	r24, r24
     dde:	09 f0       	breq	.+2      	; 0xde2 <enter_PW_With_confirmation+0x29c>
     de0:	78 c0       	rjmp	.+240    	; 0xed2 <enter_PW_With_confirmation+0x38c>
		{
			LCD_clearScreen();
     de2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
     de6:	82 e7       	ldi	r24, 0x72	; 114
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	aa e7       	ldi	r26, 0x7A	; 122
     df4:	b4 e4       	ldi	r27, 0x44	; 68
     df6:	8b 87       	std	Y+11, r24	; 0x0b
     df8:	9c 87       	std	Y+12, r25	; 0x0c
     dfa:	ad 87       	std	Y+13, r26	; 0x0d
     dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
     e00:	7c 85       	ldd	r23, Y+12	; 0x0c
     e02:	8d 85       	ldd	r24, Y+13	; 0x0d
     e04:	9e 85       	ldd	r25, Y+14	; 0x0e
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	4a e7       	ldi	r20, 0x7A	; 122
     e0c:	53 e4       	ldi	r21, 0x43	; 67
     e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	8f 83       	std	Y+7, r24	; 0x07
     e18:	98 87       	std	Y+8, r25	; 0x08
     e1a:	a9 87       	std	Y+9, r26	; 0x09
     e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1e:	6f 81       	ldd	r22, Y+7	; 0x07
     e20:	78 85       	ldd	r23, Y+8	; 0x08
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	9a 85       	ldd	r25, Y+10	; 0x0a
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e8       	ldi	r20, 0x80	; 128
     e2c:	5f e3       	ldi	r21, 0x3F	; 63
     e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e32:	88 23       	and	r24, r24
     e34:	2c f4       	brge	.+10     	; 0xe40 <enter_PW_With_confirmation+0x2fa>
		__ticks = 1;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9e 83       	std	Y+6, r25	; 0x06
     e3c:	8d 83       	std	Y+5, r24	; 0x05
     e3e:	3f c0       	rjmp	.+126    	; 0xebe <enter_PW_With_confirmation+0x378>
	else if (__tmp > 65535)
     e40:	6f 81       	ldd	r22, Y+7	; 0x07
     e42:	78 85       	ldd	r23, Y+8	; 0x08
     e44:	89 85       	ldd	r24, Y+9	; 0x09
     e46:	9a 85       	ldd	r25, Y+10	; 0x0a
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	3f ef       	ldi	r19, 0xFF	; 255
     e4c:	4f e7       	ldi	r20, 0x7F	; 127
     e4e:	57 e4       	ldi	r21, 0x47	; 71
     e50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e54:	18 16       	cp	r1, r24
     e56:	4c f5       	brge	.+82     	; 0xeaa <enter_PW_With_confirmation+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e58:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e2       	ldi	r20, 0x20	; 32
     e66:	51 e4       	ldi	r21, 0x41	; 65
     e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	9e 83       	std	Y+6, r25	; 0x06
     e7e:	8d 83       	std	Y+5, r24	; 0x05
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <enter_PW_With_confirmation+0x35a>
     e82:	89 e1       	ldi	r24, 0x19	; 25
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	9c 83       	std	Y+4, r25	; 0x04
     e88:	8b 83       	std	Y+3, r24	; 0x03
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <enter_PW_With_confirmation+0x348>
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	9e 83       	std	Y+6, r25	; 0x06
     e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	9e 81       	ldd	r25, Y+6	; 0x06
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	69 f7       	brne	.-38     	; 0xe82 <enter_PW_With_confirmation+0x33c>
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <enter_PW_With_confirmation+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eaa:	6f 81       	ldd	r22, Y+7	; 0x07
     eac:	78 85       	ldd	r23, Y+8	; 0x08
     eae:	89 85       	ldd	r24, Y+9	; 0x09
     eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <enter_PW_With_confirmation+0x384>
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
	/*clear screen from previous step data*/
	LCD_clearScreen();
	/*move cursor to line 1 and column 4*/
	LCD_goToRowColumn(0,3);
	/*loop until user enter same password again correctly*/
	while(!check)
     ed2:	8b a5       	ldd	r24, Y+43	; 0x2b
     ed4:	88 23       	and	r24, r24
     ed6:	09 f4       	brne	.+2      	; 0xeda <enter_PW_With_confirmation+0x394>
     ed8:	dc ce       	rjmp	.-584    	; 0xc92 <enter_PW_With_confirmation+0x14c>
			LCD_displayString("Wrong Password");
			_delay_ms(1000);
		}
	}

}
     eda:	ad 96       	adiw	r28, 0x2d	; 45
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <display_Main_Screen>:

/*Description: Function to display main screen of APP:
 * 1. * change password
 * 2. # open door */
void display_Main_Screen(void)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	2e 97       	sbiw	r28, 0x0e	; 14
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
	LCD_goToRowColumn(0,0);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
	LCD_displayString("*:Change PW");
     f08:	81 e8       	ldi	r24, 0x81	; 129
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
	LCD_goToRowColumn(1,0);
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
	LCD_displayString("#:Open Door");
     f18:	8d e8       	ldi	r24, 0x8D	; 141
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	aa e7       	ldi	r26, 0x7A	; 122
     f26:	b4 e4       	ldi	r27, 0x44	; 68
     f28:	8b 87       	std	Y+11, r24	; 0x0b
     f2a:	9c 87       	std	Y+12, r25	; 0x0c
     f2c:	ad 87       	std	Y+13, r26	; 0x0d
     f2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f30:	6b 85       	ldd	r22, Y+11	; 0x0b
     f32:	7c 85       	ldd	r23, Y+12	; 0x0c
     f34:	8d 85       	ldd	r24, Y+13	; 0x0d
     f36:	9e 85       	ldd	r25, Y+14	; 0x0e
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a e7       	ldi	r20, 0x7A	; 122
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	8f 83       	std	Y+7, r24	; 0x07
     f4a:	98 87       	std	Y+8, r25	; 0x08
     f4c:	a9 87       	std	Y+9, r26	; 0x09
     f4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f50:	6f 81       	ldd	r22, Y+7	; 0x07
     f52:	78 85       	ldd	r23, Y+8	; 0x08
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	9a 85       	ldd	r25, Y+10	; 0x0a
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e8       	ldi	r20, 0x80	; 128
     f5e:	5f e3       	ldi	r21, 0x3F	; 63
     f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f64:	88 23       	and	r24, r24
     f66:	2c f4       	brge	.+10     	; 0xf72 <display_Main_Screen+0x86>
		__ticks = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9e 83       	std	Y+6, r25	; 0x06
     f6e:	8d 83       	std	Y+5, r24	; 0x05
     f70:	3f c0       	rjmp	.+126    	; 0xff0 <display_Main_Screen+0x104>
	else if (__tmp > 65535)
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	3f ef       	ldi	r19, 0xFF	; 255
     f7e:	4f e7       	ldi	r20, 0x7F	; 127
     f80:	57 e4       	ldi	r21, 0x47	; 71
     f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f86:	18 16       	cp	r1, r24
     f88:	4c f5       	brge	.+82     	; 0xfdc <display_Main_Screen+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <display_Main_Screen+0xe6>
     fb4:	89 e1       	ldi	r24, 0x19	; 25
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 83       	std	Y+4, r25	; 0x04
     fba:	8b 83       	std	Y+3, r24	; 0x03
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <display_Main_Screen+0xd4>
     fc4:	9c 83       	std	Y+4, r25	; 0x04
     fc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	9e 83       	std	Y+6, r25	; 0x06
     fd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	69 f7       	brne	.-38     	; 0xfb4 <display_Main_Screen+0xc8>
     fda:	14 c0       	rjmp	.+40     	; 0x1004 <display_Main_Screen+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fdc:	6f 81       	ldd	r22, Y+7	; 0x07
     fde:	78 85       	ldd	r23, Y+8	; 0x08
     fe0:	89 85       	ldd	r24, Y+9	; 0x09
     fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	9e 83       	std	Y+6, r25	; 0x06
     fee:	8d 83       	std	Y+5, r24	; 0x05
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <display_Main_Screen+0x110>
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    1004:	2e 96       	adiw	r28, 0x0e	; 14
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <get_And_Check_Old_PW>:
 * 1. get password from user and send each digit to M2 to check
 * 2. check on returned value from M2 for each digit if any of them is wrong or not
 * 3. iterate this process for 2 more times if the first iterate was wrong
 * 4. if all 3 chances are wrong .then return False */
bool get_And_Check_Old_PW(void)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	62 97       	sbiw	r28, 0x12	; 18
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
	/*get old password from user using keypad and send to check*/
	uint8 counter = 0 ;
    102a:	19 8a       	std	Y+17, r1	; 0x11
	uint8 key;
	uint8 status;
	/*send Check Command to M2 to check for old password*/
	APP_UART_SendKeyToDicisionECU('C');
    102c:	83 e4       	ldi	r24, 0x43	; 67
    102e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <APP_UART_SendKeyToDicisionECU>
	LCD_goToRowColumn(1,0);
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
    103a:	85 c0       	rjmp	.+266    	; 0x1146 <get_And_Check_Old_PW+0x130>
	/*loop to get password digits from user*/
	for(;counter<5;counter++)
	{
		do{
			/*get digits of password */
			key = KeyPad_getPressedKey();
    103c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <KeyPad_getPressedKey>
    1040:	88 8b       	std	Y+16, r24	; 0x10
		}while(!(key>0 && key<=9));/*to ensure that the key inserted is digit not symbol or alphabet */
    1042:	88 89       	ldd	r24, Y+16	; 0x10
    1044:	88 23       	and	r24, r24
    1046:	d1 f3       	breq	.-12     	; 0x103c <get_And_Check_Old_PW+0x26>
    1048:	88 89       	ldd	r24, Y+16	; 0x10
    104a:	8a 30       	cpi	r24, 0x0A	; 10
    104c:	b8 f7       	brcc	.-18     	; 0x103c <get_And_Check_Old_PW+0x26>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	aa ef       	ldi	r26, 0xFA	; 250
    1054:	b3 e4       	ldi	r27, 0x43	; 67
    1056:	8b 87       	std	Y+11, r24	; 0x0b
    1058:	9c 87       	std	Y+12, r25	; 0x0c
    105a:	ad 87       	std	Y+13, r26	; 0x0d
    105c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1060:	7c 85       	ldd	r23, Y+12	; 0x0c
    1062:	8d 85       	ldd	r24, Y+13	; 0x0d
    1064:	9e 85       	ldd	r25, Y+14	; 0x0e
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	4a e7       	ldi	r20, 0x7A	; 122
    106c:	53 e4       	ldi	r21, 0x43	; 67
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8f 83       	std	Y+7, r24	; 0x07
    1078:	98 87       	std	Y+8, r25	; 0x08
    107a:	a9 87       	std	Y+9, r26	; 0x09
    107c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    107e:	6f 81       	ldd	r22, Y+7	; 0x07
    1080:	78 85       	ldd	r23, Y+8	; 0x08
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	9a 85       	ldd	r25, Y+10	; 0x0a
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	2c f4       	brge	.+10     	; 0x10a0 <get_And_Check_Old_PW+0x8a>
		__ticks = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9e 83       	std	Y+6, r25	; 0x06
    109c:	8d 83       	std	Y+5, r24	; 0x05
    109e:	3f c0       	rjmp	.+126    	; 0x111e <get_And_Check_Old_PW+0x108>
	else if (__tmp > 65535)
    10a0:	6f 81       	ldd	r22, Y+7	; 0x07
    10a2:	78 85       	ldd	r23, Y+8	; 0x08
    10a4:	89 85       	ldd	r24, Y+9	; 0x09
    10a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	3f ef       	ldi	r19, 0xFF	; 255
    10ac:	4f e7       	ldi	r20, 0x7F	; 127
    10ae:	57 e4       	ldi	r21, 0x47	; 71
    10b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	4c f5       	brge	.+82     	; 0x110a <get_And_Check_Old_PW+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    10bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10be:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	51 e4       	ldi	r21, 0x41	; 65
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <get_And_Check_Old_PW+0xea>
    10e2:	89 e1       	ldi	r24, 0x19	; 25
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	8b 83       	std	Y+3, r24	; 0x03
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <get_And_Check_Old_PW+0xd8>
    10f2:	9c 83       	std	Y+4, r25	; 0x04
    10f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	9e 83       	std	Y+6, r25	; 0x06
    10fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	69 f7       	brne	.-38     	; 0x10e2 <get_And_Check_Old_PW+0xcc>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <get_And_Check_Old_PW+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110a:	6f 81       	ldd	r22, Y+7	; 0x07
    110c:	78 85       	ldd	r23, Y+8	; 0x08
    110e:	89 85       	ldd	r24, Y+9	; 0x09
    1110:	9a 85       	ldd	r25, Y+10	; 0x0a
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9e 83       	std	Y+6, r25	; 0x06
    111c:	8d 83       	std	Y+5, r24	; 0x05
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	9e 81       	ldd	r25, Y+6	; 0x06
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <get_And_Check_Old_PW+0x114>
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_displayCharacter('*');
    1132:	8a e2       	ldi	r24, 0x2A	; 42
    1134:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_displayCharacter>
		/*send digit to M2 and receive ack*/
		APP_UART_SendKeyToDicisionECU(key+48);
    1138:	88 89       	ldd	r24, Y+16	; 0x10
    113a:	80 5d       	subi	r24, 0xD0	; 208
    113c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <APP_UART_SendKeyToDicisionECU>
	uint8 status;
	/*send Check Command to M2 to check for old password*/
	APP_UART_SendKeyToDicisionECU('C');
	LCD_goToRowColumn(1,0);
	/*loop to get password digits from user*/
	for(;counter<5;counter++)
    1140:	89 89       	ldd	r24, Y+17	; 0x11
    1142:	8f 5f       	subi	r24, 0xFF	; 255
    1144:	89 8b       	std	Y+17, r24	; 0x11
    1146:	89 89       	ldd	r24, Y+17	; 0x11
    1148:	85 30       	cpi	r24, 0x05	; 5
    114a:	08 f4       	brcc	.+2      	; 0x114e <get_And_Check_Old_PW+0x138>
    114c:	77 cf       	rjmp	.-274    	; 0x103c <get_And_Check_Old_PW+0x26>
		_delay_ms(500);
		LCD_displayCharacter('*');
		/*send digit to M2 and receive ack*/
		APP_UART_SendKeyToDicisionECU(key+48);
	}
	status = APP_UART_GetKeyFromDicisionECU();
    114e:	0e 94 bf 0a 	call	0x157e	; 0x157e <APP_UART_GetKeyFromDicisionECU>
    1152:	8f 87       	std	Y+15, r24	; 0x0f
	/*password matching*/
	if(status == 'M')
    1154:	8f 85       	ldd	r24, Y+15	; 0x0f
    1156:	8d 34       	cpi	r24, 0x4D	; 77
    1158:	19 f4       	brne	.+6      	; 0x1160 <get_And_Check_Old_PW+0x14a>
	{
		return TRUE;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	8a 8b       	std	Y+18, r24	; 0x12
    115e:	06 c0       	rjmp	.+12     	; 0x116c <get_And_Check_Old_PW+0x156>
	}
	else if(status == 'E')
    1160:	8f 85       	ldd	r24, Y+15	; 0x0f
    1162:	85 34       	cpi	r24, 0x45	; 69
    1164:	11 f4       	brne	.+4      	; 0x116a <get_And_Check_Old_PW+0x154>
	{
		return FALSE;
    1166:	1a 8a       	std	Y+18, r1	; 0x12
    1168:	01 c0       	rjmp	.+2      	; 0x116c <get_And_Check_Old_PW+0x156>
	}
	else
	{
		return FALSE;
    116a:	1a 8a       	std	Y+18, r1	; 0x12
    116c:	8a 89       	ldd	r24, Y+18	; 0x12
	}
}
    116e:	62 96       	adiw	r28, 0x12	; 18
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <check_password>:
/*function to check get password from user and check with the current stored password with three chances*/
bool check_password(uint8 key)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	62 97       	sbiw	r28, 0x12	; 18
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	89 8b       	std	Y+17, r24	; 0x11
	bool status;
	uint8 chances_Counter = 0;/*counter for chances of open door or wrong password*/
    1196:	1f 86       	std	Y+15, r1	; 0x0f
    1198:	c2 c0       	rjmp	.+388    	; 0x131e <check_password+0x19e>

	/*display message to enter old password*/
	for(;chances_Counter<3;chances_Counter++)
	{
		LCD_clearScreen();
    119a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
		LCD_goToRowColumn(0,0);
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
		LCD_displayString(g_currentMessage);
    11a6:	8f e1       	ldi	r24, 0x1F	; 31
    11a8:	91 e0       	ldi	r25, 0x01	; 1
    11aa:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
		/*call function to get old password from user and check if it match stored password or not*/
		status = get_And_Check_Old_PW();
    11ae:	0e 94 0b 08 	call	0x1016	; 0x1016 <get_And_Check_Old_PW>
    11b2:	88 8b       	std	Y+16, r24	; 0x10
		if(status == TRUE)/*matching*/
    11b4:	88 89       	ldd	r24, Y+16	; 0x10
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	11 f5       	brne	.+68     	; 0x11fe <check_password+0x7e>
		{
			if(key == '*')
    11ba:	89 89       	ldd	r24, Y+17	; 0x11
    11bc:	8a 32       	cpi	r24, 0x2A	; 42
    11be:	31 f4       	brne	.+12     	; 0x11cc <check_password+0x4c>
			{
				g_check = 'N';/*to enter in new password mode*/
    11c0:	8e e4       	ldi	r24, 0x4E	; 78
    11c2:	80 93 18 01 	sts	0x0118, r24
				return status;
    11c6:	88 89       	ldd	r24, Y+16	; 0x10
    11c8:	8a 8b       	std	Y+18, r24	; 0x12
    11ca:	af c0       	rjmp	.+350    	; 0x132a <check_password+0x1aa>
			}
			else if(key == '#')
    11cc:	89 89       	ldd	r24, Y+17	; 0x11
    11ce:	83 32       	cpi	r24, 0x23	; 35
    11d0:	b1 f4       	brne	.+44     	; 0x11fe <check_password+0x7e>
			{
				APP_UART_SendKeyToDicisionECU('O');//OPEN DOOR
    11d2:	8f e4       	ldi	r24, 0x4F	; 79
    11d4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <APP_UART_SendKeyToDicisionECU>
				strcpy(g_currentMessage,"DOOR OPENED");
    11d8:	8f e1       	ldi	r24, 0x1F	; 31
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	29 e9       	ldi	r18, 0x99	; 153
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	b9 01       	movw	r22, r18
    11e2:	4c e0       	ldi	r20, 0x0C	; 12
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	0e 94 43 19 	call	0x3286	; 0x3286 <memcpy>
				LCD_Timer_init(15,g_currentMessage);
    11ea:	2f e1       	ldi	r18, 0x1F	; 31
    11ec:	31 e0       	ldi	r19, 0x01	; 1
    11ee:	8f e0       	ldi	r24, 0x0F	; 15
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	b9 01       	movw	r22, r18
    11f4:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_Timer_init>
				return status;
    11f8:	88 89       	ldd	r24, Y+16	; 0x10
    11fa:	8a 8b       	std	Y+18, r24	; 0x12
    11fc:	96 c0       	rjmp	.+300    	; 0x132a <check_password+0x1aa>
			}

		}
		/*else display wrong msg and go to next chance*/
		LCD_clearScreen();
    11fe:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
		LCD_goToRowColumn(0,0);
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
		LCD_displayString("ERROR:Wrong PW");
    120a:	85 ea       	ldi	r24, 0xA5	; 165
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
		LCD_intgerToString(2-chances_Counter);
    121a:	8f 85       	ldd	r24, Y+15	; 0x0f
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	82 1b       	sub	r24, r18
    1226:	93 0b       	sbc	r25, r19
    1228:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_intgerToString>
		LCD_displayString(" times remain");
    122c:	84 eb       	ldi	r24, 0xB4	; 180
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	aa e7       	ldi	r26, 0x7A	; 122
    123a:	b4 e4       	ldi	r27, 0x44	; 68
    123c:	8b 87       	std	Y+11, r24	; 0x0b
    123e:	9c 87       	std	Y+12, r25	; 0x0c
    1240:	ad 87       	std	Y+13, r26	; 0x0d
    1242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1244:	6b 85       	ldd	r22, Y+11	; 0x0b
    1246:	7c 85       	ldd	r23, Y+12	; 0x0c
    1248:	8d 85       	ldd	r24, Y+13	; 0x0d
    124a:	9e 85       	ldd	r25, Y+14	; 0x0e
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	4a e7       	ldi	r20, 0x7A	; 122
    1252:	53 e4       	ldi	r21, 0x43	; 67
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	8f 83       	std	Y+7, r24	; 0x07
    125e:	98 87       	std	Y+8, r25	; 0x08
    1260:	a9 87       	std	Y+9, r26	; 0x09
    1262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1264:	6f 81       	ldd	r22, Y+7	; 0x07
    1266:	78 85       	ldd	r23, Y+8	; 0x08
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1278:	88 23       	and	r24, r24
    127a:	2c f4       	brge	.+10     	; 0x1286 <check_password+0x106>
		__ticks = 1;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	9e 83       	std	Y+6, r25	; 0x06
    1282:	8d 83       	std	Y+5, r24	; 0x05
    1284:	3f c0       	rjmp	.+126    	; 0x1304 <check_password+0x184>
	else if (__tmp > 65535)
    1286:	6f 81       	ldd	r22, Y+7	; 0x07
    1288:	78 85       	ldd	r23, Y+8	; 0x08
    128a:	89 85       	ldd	r24, Y+9	; 0x09
    128c:	9a 85       	ldd	r25, Y+10	; 0x0a
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	3f ef       	ldi	r19, 0xFF	; 255
    1292:	4f e7       	ldi	r20, 0x7F	; 127
    1294:	57 e4       	ldi	r21, 0x47	; 71
    1296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    129a:	18 16       	cp	r1, r24
    129c:	4c f5       	brge	.+82     	; 0x12f0 <check_password+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129e:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	8d 83       	std	Y+5, r24	; 0x05
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <check_password+0x166>
    12c8:	89 e1       	ldi	r24, 0x19	; 25
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <check_password+0x154>
    12d8:	9c 83       	std	Y+4, r25	; 0x04
    12da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <check_password+0x148>
    12ee:	14 c0       	rjmp	.+40     	; 0x1318 <check_password+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	9e 83       	std	Y+6, r25	; 0x06
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	9a 83       	std	Y+2, r25	; 0x02
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <check_password+0x190>
    1314:	9a 83       	std	Y+2, r25	; 0x02
    1316:	89 83       	std	Y+1, r24	; 0x01
{
	bool status;
	uint8 chances_Counter = 0;/*counter for chances of open door or wrong password*/

	/*display message to enter old password*/
	for(;chances_Counter<3;chances_Counter++)
    1318:	8f 85       	ldd	r24, Y+15	; 0x0f
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	8f 87       	std	Y+15, r24	; 0x0f
    131e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	08 f4       	brcc	.+2      	; 0x1326 <check_password+0x1a6>
    1324:	3a cf       	rjmp	.-396    	; 0x119a <check_password+0x1a>
		LCD_goToRowColumn(1,0);
		LCD_intgerToString(2-chances_Counter);
		LCD_displayString(" times remain");
		_delay_ms(1000);
	}
	return status;
    1326:	88 89       	ldd	r24, Y+16	; 0x10
    1328:	8a 8b       	std	Y+18, r24	; 0x12
    132a:	8a 89       	ldd	r24, Y+18	; 0x12
}
    132c:	62 96       	adiw	r28, 0x12	; 18
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <Start_AlertLogic>:

void Start_AlertLogic(void)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	APP_UART_SendKeyToDicisionECU('L');
    1346:	8c e4       	ldi	r24, 0x4C	; 76
    1348:	0e 94 4b 0b 	call	0x1696	; 0x1696 <APP_UART_SendKeyToDicisionECU>
	strcpy(g_currentMessage,"Alert");
    134c:	8f e1       	ldi	r24, 0x1F	; 31
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	22 ec       	ldi	r18, 0xC2	; 194
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	b9 01       	movw	r22, r18
    1356:	46 e0       	ldi	r20, 0x06	; 6
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	0e 94 43 19 	call	0x3286	; 0x3286 <memcpy>
	LCD_Timer_init(60,g_currentMessage);
    135e:	2f e1       	ldi	r18, 0x1F	; 31
    1360:	31 e0       	ldi	r19, 0x01	; 1
    1362:	8c e3       	ldi	r24, 0x3C	; 60
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	b9 01       	movw	r22, r18
    1368:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_Timer_init>
	g_check = 'E';
    136c:	85 e4       	ldi	r24, 0x45	; 69
    136e:	80 93 18 01 	sts	0x0118, r24
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <main>:
int main(void)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	61 97       	sbiw	r28, 0x11	; 17
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
	bool CheckFirstIteration = FALSE;
    138c:	19 8a       	std	Y+17, r1	; 0x11
	g_check = 'N';
    138e:	8e e4       	ldi	r24, 0x4E	; 78
    1390:	80 93 18 01 	sts	0x0118, r24
	uint8 key;
	uint8 status;/*matching or not matching or door opened or door locked*/
	LCD_init();
    1394:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_init>
	/*check whether its first time to open APP or not
	 * by using indicating flag in EEPROM . if check = 1 then there is password */
	KEYPAD_UART_init();
    1398:	0e 94 65 0c 	call	0x18ca	; 0x18ca <KEYPAD_UART_init>
	while(1)
	{

		if((g_check == 'S' || g_check == 'N') && !CheckFirstIteration)
    139c:	80 91 18 01 	lds	r24, 0x0118
    13a0:	83 35       	cpi	r24, 0x53	; 83
    13a2:	21 f0       	breq	.+8      	; 0x13ac <main+0x34>
    13a4:	80 91 18 01 	lds	r24, 0x0118
    13a8:	8e 34       	cpi	r24, 0x4E	; 78
    13aa:	49 f4       	brne	.+18     	; 0x13be <main+0x46>
    13ac:	89 89       	ldd	r24, Y+17	; 0x11
    13ae:	88 23       	and	r24, r24
    13b0:	31 f4       	brne	.+12     	; 0x13be <main+0x46>
		{
			/*
			g_check = UART_recieveByte();
			UART_sendByte('A');
			_delay_ms(100);*/
			g_check =APP_UART_GetKeyFromDicisionECU();
    13b2:	0e 94 bf 0a 	call	0x157e	; 0x157e <APP_UART_GetKeyFromDicisionECU>
    13b6:	80 93 18 01 	sts	0x0118, r24
			CheckFirstIteration = TRUE;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	89 8b       	std	Y+17, r24	; 0x11
		}

		/*there is password S(Saved) ..then open main screen*/
		if(g_check =='S' )
    13be:	80 91 18 01 	lds	r24, 0x0118
    13c2:	83 35       	cpi	r24, 0x53	; 83
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <main+0x50>
    13c6:	a1 c0       	rjmp	.+322    	; 0x150a <main+0x192>
		{
			LCD_clearScreen();
    13c8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
			display_Main_Screen();
    13cc:	0e 94 76 07 	call	0xeec	; 0xeec <display_Main_Screen>
			do{
				key = KeyPad_getPressedKey();
    13d0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <KeyPad_getPressedKey>
    13d4:	88 8b       	std	Y+16, r24	; 0x10
			}while((key>=0 && key<=9));
    13d6:	88 89       	ldd	r24, Y+16	; 0x10
    13d8:	8a 30       	cpi	r24, 0x0A	; 10
    13da:	d0 f3       	brcs	.-12     	; 0x13d0 <main+0x58>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	aa ef       	ldi	r26, 0xFA	; 250
    13e2:	b3 e4       	ldi	r27, 0x43	; 67
    13e4:	8b 87       	std	Y+11, r24	; 0x0b
    13e6:	9c 87       	std	Y+12, r25	; 0x0c
    13e8:	ad 87       	std	Y+13, r26	; 0x0d
    13ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	4a e7       	ldi	r20, 0x7A	; 122
    13fa:	53 e4       	ldi	r21, 0x43	; 67
    13fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	8f 83       	std	Y+7, r24	; 0x07
    1406:	98 87       	std	Y+8, r25	; 0x08
    1408:	a9 87       	std	Y+9, r26	; 0x09
    140a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    140c:	6f 81       	ldd	r22, Y+7	; 0x07
    140e:	78 85       	ldd	r23, Y+8	; 0x08
    1410:	89 85       	ldd	r24, Y+9	; 0x09
    1412:	9a 85       	ldd	r25, Y+10	; 0x0a
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e8       	ldi	r20, 0x80	; 128
    141a:	5f e3       	ldi	r21, 0x3F	; 63
    141c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1420:	88 23       	and	r24, r24
    1422:	2c f4       	brge	.+10     	; 0x142e <main+0xb6>
		__ticks = 1;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	3f c0       	rjmp	.+126    	; 0x14ac <main+0x134>
	else if (__tmp > 65535)
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	3f ef       	ldi	r19, 0xFF	; 255
    143a:	4f e7       	ldi	r20, 0x7F	; 127
    143c:	57 e4       	ldi	r21, 0x47	; 71
    143e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1442:	18 16       	cp	r1, r24
    1444:	4c f5       	brge	.+82     	; 0x1498 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1446:	6b 85       	ldd	r22, Y+11	; 0x0b
    1448:	7c 85       	ldd	r23, Y+12	; 0x0c
    144a:	8d 85       	ldd	r24, Y+13	; 0x0d
    144c:	9e 85       	ldd	r25, Y+14	; 0x0e
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e2       	ldi	r20, 0x20	; 32
    1454:	51 e4       	ldi	r21, 0x41	; 65
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	0f c0       	rjmp	.+30     	; 0x148e <main+0x116>
    1470:	89 e1       	ldi	r24, 0x19	; 25
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <main+0x104>
    1480:	9c 83       	std	Y+4, r25	; 0x04
    1482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	69 f7       	brne	.-38     	; 0x1470 <main+0xf8>
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1498:	6f 81       	ldd	r22, Y+7	; 0x07
    149a:	78 85       	ldd	r23, Y+8	; 0x08
    149c:	89 85       	ldd	r24, Y+9	; 0x09
    149e:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <main+0x140>
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			if(key == '*')
    14c0:	88 89       	ldd	r24, Y+16	; 0x10
    14c2:	8a 32       	cpi	r24, 0x2A	; 42
    14c4:	51 f4       	brne	.+20     	; 0x14da <main+0x162>
			{
				strcpy(g_currentMessage,"enter old PW");
    14c6:	8f e1       	ldi	r24, 0x1F	; 31
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	28 ec       	ldi	r18, 0xC8	; 200
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	b9 01       	movw	r22, r18
    14d0:	4d e0       	ldi	r20, 0x0D	; 13
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	0e 94 43 19 	call	0x3286	; 0x3286 <memcpy>
    14d8:	0c c0       	rjmp	.+24     	; 0x14f2 <main+0x17a>
			}
			else if(key == '#')
    14da:	88 89       	ldd	r24, Y+16	; 0x10
    14dc:	83 32       	cpi	r24, 0x23	; 35
    14de:	49 f4       	brne	.+18     	; 0x14f2 <main+0x17a>
			{
				strcpy(g_currentMessage,"enter PW");
    14e0:	8f e1       	ldi	r24, 0x1F	; 31
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	25 ed       	ldi	r18, 0xD5	; 213
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	b9 01       	movw	r22, r18
    14ea:	49 e0       	ldi	r20, 0x09	; 9
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	0e 94 43 19 	call	0x3286	; 0x3286 <memcpy>
			}
			status = check_password(key);
    14f2:	88 89       	ldd	r24, Y+16	; 0x10
    14f4:	0e 94 c0 08 	call	0x1180	; 0x1180 <check_password>
    14f8:	8f 87       	std	Y+15, r24	; 0x0f
			if(status == FALSE)/*not matching in all chances*/
    14fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fc:	88 23       	and	r24, r24
    14fe:	11 f4       	brne	.+4      	; 0x1504 <main+0x18c>
			{
				/*call function responsible for alerting logic*/
				Start_AlertLogic();
    1500:	0e 94 9f 09 	call	0x133e	; 0x133e <Start_AlertLogic>
			}

			CheckFirstIteration = TRUE;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	89 8b       	std	Y+17, r24	; 0x11
    1508:	49 cf       	rjmp	.-366    	; 0x139c <main+0x24>
		}
		else if(g_check == 'N')/*new password is required N(Not Saved)*/
    150a:	80 91 18 01 	lds	r24, 0x0118
    150e:	8e 34       	cpi	r24, 0x4E	; 78
    1510:	09 f0       	breq	.+2      	; 0x1514 <main+0x19c>
    1512:	44 cf       	rjmp	.-376    	; 0x139c <main+0x24>
		{
			LCD_clearScreen();
    1514:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
			LCD_goToRowColumn(0,3);
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	63 e0       	ldi	r22, 0x03	; 3
    151c:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
			LCD_displayString("enter new PW");
    1520:	8e ed       	ldi	r24, 0xDE	; 222
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
			/*call this function to enter password and check confirmation*/
			enter_PW_With_confirmation();
    1528:	0e 94 a3 05 	call	0xb46	; 0xb46 <enter_PW_With_confirmation>
			SET_BIT(PORTD,7);
    152c:	a2 e3       	ldi	r26, 0x32	; 50
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e2 e3       	ldi	r30, 0x32	; 50
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	80 68       	ori	r24, 0x80	; 128
    1538:	8c 93       	st	X, r24
			/*then after confirm password correctly start save it in EEPROM
			 *send digits to M2 to store it in EEPROM without checking
			 */
			KEYPAD_UART_Send_PW(g_PW);
    153a:	8a e1       	ldi	r24, 0x1A	; 26
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <KEYPAD_UART_Send_PW>
			/*display correct password message*/
			LCD_clearScreen();
    1542:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
			LCD_displayString("Password saved");
    1546:	8b ee       	ldi	r24, 0xEB	; 235
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
			g_check = 'S';
    154e:	83 e5       	ldi	r24, 0x53	; 83
    1550:	80 93 18 01 	sts	0x0118, r24
			CheckFirstIteration = TRUE;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	89 8b       	std	Y+17, r24	; 0x11
    1558:	21 cf       	rjmp	.-446    	; 0x139c <main+0x24>

0000155a <APP_UART_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void APP_UART_init(void)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
	UART_init_With_Interrupt();
    1562:	0e 94 4e 18 	call	0x309c	; 0x309c <UART_init_With_Interrupt>
}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <App_UART_Deinit>:
 void App_UART_Deinit(void)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
	UART_Deinit();
    1574:	0e 94 68 18 	call	0x30d0	; 0x30d0 <UART_Deinit>
}
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <APP_UART_GetKeyFromDicisionECU>:
 uint8 APP_UART_GetKeyFromDicisionECU(void)
 {
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	2f 97       	sbiw	r28, 0x0f	; 15
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
	 uint8 key;
	 key = UART_recieveByte();
    1592:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_recieveByte>
    1596:	8f 87       	std	Y+15, r24	; 0x0f
	 UART_sendByte('A');
    1598:	81 e4       	ldi	r24, 0x41	; 65
    159a:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <UART_sendByte>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a8 ec       	ldi	r26, 0xC8	; 200
    15a4:	b2 e4       	ldi	r27, 0x42	; 66
    15a6:	8b 87       	std	Y+11, r24	; 0x0b
    15a8:	9c 87       	std	Y+12, r25	; 0x0c
    15aa:	ad 87       	std	Y+13, r26	; 0x0d
    15ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	4a e7       	ldi	r20, 0x7A	; 122
    15bc:	53 e4       	ldi	r21, 0x43	; 67
    15be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	8f 83       	std	Y+7, r24	; 0x07
    15c8:	98 87       	std	Y+8, r25	; 0x08
    15ca:	a9 87       	std	Y+9, r26	; 0x09
    15cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ce:	6f 81       	ldd	r22, Y+7	; 0x07
    15d0:	78 85       	ldd	r23, Y+8	; 0x08
    15d2:	89 85       	ldd	r24, Y+9	; 0x09
    15d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e8       	ldi	r20, 0x80	; 128
    15dc:	5f e3       	ldi	r21, 0x3F	; 63
    15de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e2:	88 23       	and	r24, r24
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <APP_UART_GetKeyFromDicisionECU+0x72>
		__ticks = 1;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	3f c0       	rjmp	.+126    	; 0x166e <APP_UART_GetKeyFromDicisionECU+0xf0>
	else if (__tmp > 65535)
    15f0:	6f 81       	ldd	r22, Y+7	; 0x07
    15f2:	78 85       	ldd	r23, Y+8	; 0x08
    15f4:	89 85       	ldd	r24, Y+9	; 0x09
    15f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	3f ef       	ldi	r19, 0xFF	; 255
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	57 e4       	ldi	r21, 0x47	; 71
    1600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1604:	18 16       	cp	r1, r24
    1606:	4c f5       	brge	.+82     	; 0x165a <APP_UART_GetKeyFromDicisionECU+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1608:	6b 85       	ldd	r22, Y+11	; 0x0b
    160a:	7c 85       	ldd	r23, Y+12	; 0x0c
    160c:	8d 85       	ldd	r24, Y+13	; 0x0d
    160e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e2       	ldi	r20, 0x20	; 32
    1616:	51 e4       	ldi	r21, 0x41	; 65
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	0f c0       	rjmp	.+30     	; 0x1650 <APP_UART_GetKeyFromDicisionECU+0xd2>
    1632:	89 e1       	ldi	r24, 0x19	; 25
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9c 83       	std	Y+4, r25	; 0x04
    1638:	8b 83       	std	Y+3, r24	; 0x03
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <APP_UART_GetKeyFromDicisionECU+0xc0>
    1642:	9c 83       	std	Y+4, r25	; 0x04
    1644:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	69 f7       	brne	.-38     	; 0x1632 <APP_UART_GetKeyFromDicisionECU+0xb4>
    1658:	14 c0       	rjmp	.+40     	; 0x1682 <APP_UART_GetKeyFromDicisionECU+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165a:	6f 81       	ldd	r22, Y+7	; 0x07
    165c:	78 85       	ldd	r23, Y+8	; 0x08
    165e:	89 85       	ldd	r24, Y+9	; 0x09
    1660:	9a 85       	ldd	r25, Y+10	; 0x0a
    1662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <APP_UART_GetKeyFromDicisionECU+0xfc>
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(100);
	 return key;
    1682:	8f 85       	ldd	r24, Y+15	; 0x0f
 }
    1684:	2f 96       	adiw	r28, 0x0f	; 15
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <APP_UART_SendKeyToDicisionECU>:
 void APP_UART_SendKeyToDicisionECU(const uint8 key)
 {
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	2f 97       	sbiw	r28, 0x0f	; 15
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	8f 87       	std	Y+15, r24	; 0x0f
	 do
	 {
		 UART_sendByte(key);
    16ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ae:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <UART_sendByte>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a8 ec       	ldi	r26, 0xC8	; 200
    16b8:	b2 e4       	ldi	r27, 0x42	; 66
    16ba:	8b 87       	std	Y+11, r24	; 0x0b
    16bc:	9c 87       	std	Y+12, r25	; 0x0c
    16be:	ad 87       	std	Y+13, r26	; 0x0d
    16c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4a e7       	ldi	r20, 0x7A	; 122
    16d0:	53 e4       	ldi	r21, 0x43	; 67
    16d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	8f 83       	std	Y+7, r24	; 0x07
    16dc:	98 87       	std	Y+8, r25	; 0x08
    16de:	a9 87       	std	Y+9, r26	; 0x09
    16e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16e2:	6f 81       	ldd	r22, Y+7	; 0x07
    16e4:	78 85       	ldd	r23, Y+8	; 0x08
    16e6:	89 85       	ldd	r24, Y+9	; 0x09
    16e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e8       	ldi	r20, 0x80	; 128
    16f0:	5f e3       	ldi	r21, 0x3F	; 63
    16f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	2c f4       	brge	.+10     	; 0x1704 <APP_UART_SendKeyToDicisionECU+0x6e>
		__ticks = 1;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9e 83       	std	Y+6, r25	; 0x06
    1700:	8d 83       	std	Y+5, r24	; 0x05
    1702:	3f c0       	rjmp	.+126    	; 0x1782 <APP_UART_SendKeyToDicisionECU+0xec>
	else if (__tmp > 65535)
    1704:	6f 81       	ldd	r22, Y+7	; 0x07
    1706:	78 85       	ldd	r23, Y+8	; 0x08
    1708:	89 85       	ldd	r24, Y+9	; 0x09
    170a:	9a 85       	ldd	r25, Y+10	; 0x0a
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	3f ef       	ldi	r19, 0xFF	; 255
    1710:	4f e7       	ldi	r20, 0x7F	; 127
    1712:	57 e4       	ldi	r21, 0x47	; 71
    1714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1718:	18 16       	cp	r1, r24
    171a:	4c f5       	brge	.+82     	; 0x176e <APP_UART_SendKeyToDicisionECU+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	6b 85       	ldd	r22, Y+11	; 0x0b
    171e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1720:	8d 85       	ldd	r24, Y+13	; 0x0d
    1722:	9e 85       	ldd	r25, Y+14	; 0x0e
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e2       	ldi	r20, 0x20	; 32
    172a:	51 e4       	ldi	r21, 0x41	; 65
    172c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <APP_UART_SendKeyToDicisionECU+0xce>
    1746:	89 e1       	ldi	r24, 0x19	; 25
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9c 83       	std	Y+4, r25	; 0x04
    174c:	8b 83       	std	Y+3, r24	; 0x03
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <APP_UART_SendKeyToDicisionECU+0xbc>
    1756:	9c 83       	std	Y+4, r25	; 0x04
    1758:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	69 f7       	brne	.-38     	; 0x1746 <APP_UART_SendKeyToDicisionECU+0xb0>
    176c:	14 c0       	rjmp	.+40     	; 0x1796 <APP_UART_SendKeyToDicisionECU+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176e:	6f 81       	ldd	r22, Y+7	; 0x07
    1770:	78 85       	ldd	r23, Y+8	; 0x08
    1772:	89 85       	ldd	r24, Y+9	; 0x09
    1774:	9a 85       	ldd	r25, Y+10	; 0x0a
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	9a 83       	std	Y+2, r25	; 0x02
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	9a 81       	ldd	r25, Y+2	; 0x02
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <APP_UART_SendKeyToDicisionECU+0xf8>
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(100);
	 }while(UART_recieveByte()!='A');
    1796:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_recieveByte>
    179a:	81 34       	cpi	r24, 0x41	; 65
    179c:	09 f0       	breq	.+2      	; 0x17a0 <APP_UART_SendKeyToDicisionECU+0x10a>
    179e:	86 cf       	rjmp	.-244    	; 0x16ac <APP_UART_SendKeyToDicisionECU+0x16>
 }
    17a0:	2f 96       	adiw	r28, 0x0f	; 15
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <KeyPad_getPressedKey+0x6>
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    17bc:	1a 82       	std	Y+2, r1	; 0x02
    17be:	4d c0       	rjmp	.+154    	; 0x185a <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    17c0:	ea e3       	ldi	r30, 0x3A	; 58
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	80 e1       	ldi	r24, 0x10	; 16
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <KeyPad_getPressedKey+0x22>
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	2a 95       	dec	r18
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <KeyPad_getPressedKey+0x1e>
    17d8:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    17da:	eb e3       	ldi	r30, 0x3B	; 59
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	80 e1       	ldi	r24, 0x10	; 16
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <KeyPad_getPressedKey+0x3e>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <KeyPad_getPressedKey+0x3a>
    17f4:	80 95       	com	r24
    17f6:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    17f8:	19 82       	std	Y+1, r1	; 0x01
    17fa:	29 c0       	rjmp	.+82     	; 0x184e <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    17fc:	e9 e3       	ldi	r30, 0x39	; 57
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	88 2f       	mov	r24, r24
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a9 01       	movw	r20, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <KeyPad_getPressedKey+0x62>
    1810:	55 95       	asr	r21
    1812:	47 95       	ror	r20
    1814:	8a 95       	dec	r24
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <KeyPad_getPressedKey+0x5e>
    1818:	ca 01       	movw	r24, r20
    181a:	81 70       	andi	r24, 0x01	; 1
    181c:	90 70       	andi	r25, 0x00	; 0
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	99 f4       	brne	.+38     	; 0x1848 <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	c9 01       	movw	r24, r18
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	82 0f       	add	r24, r18
    1830:	93 1f       	adc	r25, r19
    1832:	98 2f       	mov	r25, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	89 0f       	add	r24, r25
    1838:	8f 5f       	subi	r24, 0xFF	; 255
    183a:	0e 94 32 0c 	call	0x1864	; 0x1864 <KeyPad_4x3_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	84 30       	cpi	r24, 0x04	; 4
    1852:	a0 f2       	brcs	.-88     	; 0x17fc <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	8a 83       	std	Y+2, r24	; 0x02
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	08 f4       	brcc	.+2      	; 0x1862 <KeyPad_getPressedKey+0xb0>
    1860:	af cf       	rjmp	.-162    	; 0x17c0 <KeyPad_getPressedKey+0xe>
    1862:	ac cf       	rjmp	.-168    	; 0x17bc <KeyPad_getPressedKey+0xa>

00001864 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	00 d0       	rcall	.+0      	; 0x186a <KeyPad_4x3_adjustKeyNumber+0x6>
    186a:	00 d0       	rcall	.+0      	; 0x186c <KeyPad_4x3_adjustKeyNumber+0x8>
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	3c 83       	std	Y+4, r19	; 0x04
    187a:	2b 83       	std	Y+3, r18	; 0x03
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	8a 30       	cpi	r24, 0x0A	; 10
    1882:	91 05       	cpc	r25, r1
    1884:	81 f0       	breq	.+32     	; 0x18a6 <KeyPad_4x3_adjustKeyNumber+0x42>
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	2a 30       	cpi	r18, 0x0A	; 10
    188c:	31 05       	cpc	r19, r1
    188e:	9c f0       	brlt	.+38     	; 0x18b6 <KeyPad_4x3_adjustKeyNumber+0x52>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	8b 30       	cpi	r24, 0x0B	; 11
    1896:	91 05       	cpc	r25, r1
    1898:	49 f0       	breq	.+18     	; 0x18ac <KeyPad_4x3_adjustKeyNumber+0x48>
    189a:	2b 81       	ldd	r18, Y+3	; 0x03
    189c:	3c 81       	ldd	r19, Y+4	; 0x04
    189e:	2c 30       	cpi	r18, 0x0C	; 12
    18a0:	31 05       	cpc	r19, r1
    18a2:	31 f0       	breq	.+12     	; 0x18b0 <KeyPad_4x3_adjustKeyNumber+0x4c>
    18a4:	08 c0       	rjmp	.+16     	; 0x18b6 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of =
    18a6:	3a e2       	ldi	r19, 0x2A	; 42
    18a8:	3a 83       	std	Y+2, r19	; 0x02
    18aa:	07 c0       	rjmp	.+14     	; 0x18ba <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
    18ac:	1a 82       	std	Y+2, r1	; 0x02
    18ae:	05 c0       	rjmp	.+10     	; 0x18ba <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;		
		case 12: return '#'; // ASCII Code of +
    18b0:	83 e2       	ldi	r24, 0x23	; 35
    18b2:	8a 83       	std	Y+2, r24	; 0x02
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;								 						
    18b6:	99 81       	ldd	r25, Y+1	; 0x01
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <KEYPAD_UART_init>:
 *                      Functions Definitions                                   *
 *******************************************************************************/
/* Description: Function to initialize Keypad and UART
 */
void KEYPAD_UART_init(void)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	/*initialize UART module*/
	UART_init();
    18d2:	0e 94 34 18 	call	0x3068	; 0x3068 <UART_init>
}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <KEYPAD_UART_Send_PW>:
/*Description :function to send password to M2 at first time in creating new password
 * 1. send PW to M2 */
void KEYPAD_UART_Send_PW(const uint8* a_PW)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	6f 97       	sbiw	r28, 0x1f	; 31
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	9f 8f       	std	Y+31, r25	; 0x1f
    18f2:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 counter = 0;
    18f4:	1d 8e       	std	Y+29, r1	; 0x1d
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a8 ec       	ldi	r26, 0xC8	; 200
    18fc:	b2 e4       	ldi	r27, 0x42	; 66
    18fe:	89 8f       	std	Y+25, r24	; 0x19
    1900:	9a 8f       	std	Y+26, r25	; 0x1a
    1902:	ab 8f       	std	Y+27, r26	; 0x1b
    1904:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	69 8d       	ldd	r22, Y+25	; 0x19
    1908:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4a e7       	ldi	r20, 0x7A	; 122
    1914:	53 e4       	ldi	r21, 0x43	; 67
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8d 8b       	std	Y+21, r24	; 0x15
    1920:	9e 8b       	std	Y+22, r25	; 0x16
    1922:	af 8b       	std	Y+23, r26	; 0x17
    1924:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1926:	6d 89       	ldd	r22, Y+21	; 0x15
    1928:	7e 89       	ldd	r23, Y+22	; 0x16
    192a:	8f 89       	ldd	r24, Y+23	; 0x17
    192c:	98 8d       	ldd	r25, Y+24	; 0x18
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	2c f4       	brge	.+10     	; 0x1948 <KEYPAD_UART_Send_PW+0x6c>
		__ticks = 1;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9c 8b       	std	Y+20, r25	; 0x14
    1944:	8b 8b       	std	Y+19, r24	; 0x13
    1946:	3f c0       	rjmp	.+126    	; 0x19c6 <KEYPAD_UART_Send_PW+0xea>
	else if (__tmp > 65535)
    1948:	6d 89       	ldd	r22, Y+21	; 0x15
    194a:	7e 89       	ldd	r23, Y+22	; 0x16
    194c:	8f 89       	ldd	r24, Y+23	; 0x17
    194e:	98 8d       	ldd	r25, Y+24	; 0x18
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	57 e4       	ldi	r21, 0x47	; 71
    1958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195c:	18 16       	cp	r1, r24
    195e:	4c f5       	brge	.+82     	; 0x19b2 <KEYPAD_UART_Send_PW+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	69 8d       	ldd	r22, Y+25	; 0x19
    1962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e2       	ldi	r20, 0x20	; 32
    196e:	51 e4       	ldi	r21, 0x41	; 65
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9c 8b       	std	Y+20, r25	; 0x14
    1986:	8b 8b       	std	Y+19, r24	; 0x13
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <KEYPAD_UART_Send_PW+0xcc>
    198a:	89 e1       	ldi	r24, 0x19	; 25
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9a 8b       	std	Y+18, r25	; 0x12
    1990:	89 8b       	std	Y+17, r24	; 0x11
    1992:	89 89       	ldd	r24, Y+17	; 0x11
    1994:	9a 89       	ldd	r25, Y+18	; 0x12
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <KEYPAD_UART_Send_PW+0xba>
    199a:	9a 8b       	std	Y+18, r25	; 0x12
    199c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	8b 89       	ldd	r24, Y+19	; 0x13
    19a0:	9c 89       	ldd	r25, Y+20	; 0x14
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	9c 8b       	std	Y+20, r25	; 0x14
    19a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	8b 89       	ldd	r24, Y+19	; 0x13
    19aa:	9c 89       	ldd	r25, Y+20	; 0x14
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f7       	brne	.-38     	; 0x198a <KEYPAD_UART_Send_PW+0xae>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <KEYPAD_UART_Send_PW+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	6d 89       	ldd	r22, Y+21	; 0x15
    19b4:	7e 89       	ldd	r23, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9c 8b       	std	Y+20, r25	; 0x14
    19c4:	8b 8b       	std	Y+19, r24	; 0x13
    19c6:	8b 89       	ldd	r24, Y+19	; 0x13
    19c8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ca:	98 8b       	std	Y+16, r25	; 0x10
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
    19ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d0:	98 89       	ldd	r25, Y+16	; 0x10
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <KEYPAD_UART_Send_PW+0xf6>
    19d6:	98 8b       	std	Y+16, r25	; 0x10
    19d8:	8f 87       	std	Y+15, r24	; 0x0f
	/* send status to save in EEPROM that password is determined*/
	do{
		_delay_ms(100);
		UART_sendByte('S');
    19da:	83 e5       	ldi	r24, 0x53	; 83
    19dc:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <UART_sendByte>
	}while(UART_recieveByte() != 'A');
    19e0:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_recieveByte>
    19e4:	81 34       	cpi	r24, 0x41	; 65
    19e6:	09 f0       	breq	.+2      	; 0x19ea <KEYPAD_UART_Send_PW+0x10e>
    19e8:	86 cf       	rjmp	.-244    	; 0x18f6 <KEYPAD_UART_Send_PW+0x1a>
    19ea:	85 c0       	rjmp	.+266    	; 0x1af6 <KEYPAD_UART_Send_PW+0x21a>

	for(;counter<5;counter++)
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a8 ec       	ldi	r26, 0xC8	; 200
    19f2:	b2 e4       	ldi	r27, 0x42	; 66
    19f4:	8b 87       	std	Y+11, r24	; 0x0b
    19f6:	9c 87       	std	Y+12, r25	; 0x0c
    19f8:	ad 87       	std	Y+13, r26	; 0x0d
    19fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a e7       	ldi	r20, 0x7A	; 122
    1a0a:	53 e4       	ldi	r21, 0x43	; 67
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8f 83       	std	Y+7, r24	; 0x07
    1a16:	98 87       	std	Y+8, r25	; 0x08
    1a18:	a9 87       	std	Y+9, r26	; 0x09
    1a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1e:	78 85       	ldd	r23, Y+8	; 0x08
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <KEYPAD_UART_Send_PW+0x162>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <KEYPAD_UART_Send_PW+0x1e0>
	else if (__tmp > 65535)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <KEYPAD_UART_Send_PW+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <KEYPAD_UART_Send_PW+0x1c2>
    1a80:	89 e1       	ldi	r24, 0x19	; 25
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	8b 83       	std	Y+3, r24	; 0x03
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <KEYPAD_UART_Send_PW+0x1b0>
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <KEYPAD_UART_Send_PW+0x1a4>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <KEYPAD_UART_Send_PW+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <KEYPAD_UART_Send_PW+0x1ec>
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
	{
		/*send PW to M2*/
		do{
			_delay_ms(100);
			UART_sendByte(a_PW[counter]);
    1ad0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ad8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ada:	fc 01       	movw	r30, r24
    1adc:	e2 0f       	add	r30, r18
    1ade:	f3 1f       	adc	r31, r19
    1ae0:	80 81       	ld	r24, Z
    1ae2:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <UART_sendByte>
		}while(UART_recieveByte() != 'A');
    1ae6:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_recieveByte>
    1aea:	81 34       	cpi	r24, 0x41	; 65
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <KEYPAD_UART_Send_PW+0x214>
    1aee:	7e cf       	rjmp	.-260    	; 0x19ec <KEYPAD_UART_Send_PW+0x110>
	do{
		_delay_ms(100);
		UART_sendByte('S');
	}while(UART_recieveByte() != 'A');

	for(;counter<5;counter++)
    1af0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	8d 8f       	std	Y+29, r24	; 0x1d
    1af6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af8:	85 30       	cpi	r24, 0x05	; 5
    1afa:	08 f4       	brcc	.+2      	; 0x1afe <KEYPAD_UART_Send_PW+0x222>
    1afc:	77 cf       	rjmp	.-274    	; 0x19ec <KEYPAD_UART_Send_PW+0x110>
		do{
			_delay_ms(100);
			UART_sendByte(a_PW[counter]);
		}while(UART_recieveByte() != 'A');
	}
}
    1afe:	6f 96       	adiw	r28, 0x1f	; 31
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <KEYPAD_UART_Send_PW_And_Check>:

/*Description :function to send  password to M2 and check if it is match or not
 * 1. send Password to M2
 * 2. check if the password  is matched with password in EEPROM */
bool KEYPAD_UART_Send_PW_And_Check(const uint8* a_PW)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	a1 97       	sbiw	r28, 0x21	; 33
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	98 a3       	std	Y+32, r25	; 0x20
    1b26:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 counter = 0;
    1b28:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 key;
	/* send status to check old password with password stored in EEPROM*/
	do{
		UART_sendByte('C');
    1b2a:	83 e4       	ldi	r24, 0x43	; 67
    1b2c:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <UART_sendByte>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a8 ec       	ldi	r26, 0xC8	; 200
    1b36:	b2 e4       	ldi	r27, 0x42	; 66
    1b38:	89 8f       	std	Y+25, r24	; 0x19
    1b3a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b3c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b40:	69 8d       	ldd	r22, Y+25	; 0x19
    1b42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	4a e7       	ldi	r20, 0x7A	; 122
    1b4e:	53 e4       	ldi	r21, 0x43	; 67
    1b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	8d 8b       	std	Y+21, r24	; 0x15
    1b5a:	9e 8b       	std	Y+22, r25	; 0x16
    1b5c:	af 8b       	std	Y+23, r26	; 0x17
    1b5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b60:	6d 89       	ldd	r22, Y+21	; 0x15
    1b62:	7e 89       	ldd	r23, Y+22	; 0x16
    1b64:	8f 89       	ldd	r24, Y+23	; 0x17
    1b66:	98 8d       	ldd	r25, Y+24	; 0x18
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <KEYPAD_UART_Send_PW_And_Check+0x72>
		__ticks = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9c 8b       	std	Y+20, r25	; 0x14
    1b7e:	8b 8b       	std	Y+19, r24	; 0x13
    1b80:	3f c0       	rjmp	.+126    	; 0x1c00 <KEYPAD_UART_Send_PW_And_Check+0xf0>
	else if (__tmp > 65535)
    1b82:	6d 89       	ldd	r22, Y+21	; 0x15
    1b84:	7e 89       	ldd	r23, Y+22	; 0x16
    1b86:	8f 89       	ldd	r24, Y+23	; 0x17
    1b88:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	4c f5       	brge	.+82     	; 0x1bec <KEYPAD_UART_Send_PW_And_Check+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9c 8b       	std	Y+20, r25	; 0x14
    1bc0:	8b 8b       	std	Y+19, r24	; 0x13
    1bc2:	0f c0       	rjmp	.+30     	; 0x1be2 <KEYPAD_UART_Send_PW_And_Check+0xd2>
    1bc4:	89 e1       	ldi	r24, 0x19	; 25
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9a 8b       	std	Y+18, r25	; 0x12
    1bca:	89 8b       	std	Y+17, r24	; 0x11
    1bcc:	89 89       	ldd	r24, Y+17	; 0x11
    1bce:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <KEYPAD_UART_Send_PW_And_Check+0xc0>
    1bd4:	9a 8b       	std	Y+18, r25	; 0x12
    1bd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bda:	9c 89       	ldd	r25, Y+20	; 0x14
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	9c 8b       	std	Y+20, r25	; 0x14
    1be0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be2:	8b 89       	ldd	r24, Y+19	; 0x13
    1be4:	9c 89       	ldd	r25, Y+20	; 0x14
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	69 f7       	brne	.-38     	; 0x1bc4 <KEYPAD_UART_Send_PW_And_Check+0xb4>
    1bea:	14 c0       	rjmp	.+40     	; 0x1c14 <KEYPAD_UART_Send_PW_And_Check+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bec:	6d 89       	ldd	r22, Y+21	; 0x15
    1bee:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9c 8b       	std	Y+20, r25	; 0x14
    1bfe:	8b 8b       	std	Y+19, r24	; 0x13
    1c00:	8b 89       	ldd	r24, Y+19	; 0x13
    1c02:	9c 89       	ldd	r25, Y+20	; 0x14
    1c04:	98 8b       	std	Y+16, r25	; 0x10
    1c06:	8f 87       	std	Y+15, r24	; 0x0f
    1c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0a:	98 89       	ldd	r25, Y+16	; 0x10
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <KEYPAD_UART_Send_PW_And_Check+0xfc>
    1c10:	98 8b       	std	Y+16, r25	; 0x10
    1c12:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
	}while(UART_recieveByte() != 'A');
    1c14:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_recieveByte>
    1c18:	81 34       	cpi	r24, 0x41	; 65
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <KEYPAD_UART_Send_PW_And_Check+0x10e>
    1c1c:	86 cf       	rjmp	.-244    	; 0x1b2a <KEYPAD_UART_Send_PW_And_Check+0x1a>
    1c1e:	8f c0       	rjmp	.+286    	; 0x1d3e <KEYPAD_UART_Send_PW_And_Check+0x22e>
	/*send key to check with digit in EEPROM*/
	for(;counter<5;counter++)
	{
		/*send PW to M2*/
		do{
			UART_sendByte(a_PW[counter]);
    1c20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c28:	98 a1       	ldd	r25, Y+32	; 0x20
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	e2 0f       	add	r30, r18
    1c2e:	f3 1f       	adc	r31, r19
    1c30:	80 81       	ld	r24, Z
    1c32:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <UART_sendByte>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a8 ec       	ldi	r26, 0xC8	; 200
    1c3c:	b2 e4       	ldi	r27, 0x42	; 66
    1c3e:	8b 87       	std	Y+11, r24	; 0x0b
    1c40:	9c 87       	std	Y+12, r25	; 0x0c
    1c42:	ad 87       	std	Y+13, r26	; 0x0d
    1c44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4a e7       	ldi	r20, 0x7A	; 122
    1c54:	53 e4       	ldi	r21, 0x43	; 67
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	8f 83       	std	Y+7, r24	; 0x07
    1c60:	98 87       	std	Y+8, r25	; 0x08
    1c62:	a9 87       	std	Y+9, r26	; 0x09
    1c64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7a:	88 23       	and	r24, r24
    1c7c:	2c f4       	brge	.+10     	; 0x1c88 <KEYPAD_UART_Send_PW_And_Check+0x178>
		__ticks = 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	3f c0       	rjmp	.+126    	; 0x1d06 <KEYPAD_UART_Send_PW_And_Check+0x1f6>
	else if (__tmp > 65535)
    1c88:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8a:	78 85       	ldd	r23, Y+8	; 0x08
    1c8c:	89 85       	ldd	r24, Y+9	; 0x09
    1c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	3f ef       	ldi	r19, 0xFF	; 255
    1c94:	4f e7       	ldi	r20, 0x7F	; 127
    1c96:	57 e4       	ldi	r21, 0x47	; 71
    1c98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9c:	18 16       	cp	r1, r24
    1c9e:	4c f5       	brge	.+82     	; 0x1cf2 <KEYPAD_UART_Send_PW_And_Check+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e2       	ldi	r20, 0x20	; 32
    1cae:	51 e4       	ldi	r21, 0x41	; 65
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	bc 01       	movw	r22, r24
    1cba:	cd 01       	movw	r24, r26
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	0f c0       	rjmp	.+30     	; 0x1ce8 <KEYPAD_UART_Send_PW_And_Check+0x1d8>
    1cca:	89 e1       	ldi	r24, 0x19	; 25
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9c 83       	std	Y+4, r25	; 0x04
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <KEYPAD_UART_Send_PW_And_Check+0x1c6>
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	69 f7       	brne	.-38     	; 0x1cca <KEYPAD_UART_Send_PW_And_Check+0x1ba>
    1cf0:	14 c0       	rjmp	.+40     	; 0x1d1a <KEYPAD_UART_Send_PW_And_Check+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <KEYPAD_UART_Send_PW_And_Check+0x202>
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			key =UART_recieveByte();
    1d1a:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_recieveByte>
    1d1e:	8d 8f       	std	Y+29, r24	; 0x1d
		}while( key != 'M' && key !='E');
    1d20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d22:	8d 34       	cpi	r24, 0x4D	; 77
    1d24:	21 f0       	breq	.+8      	; 0x1d2e <KEYPAD_UART_Send_PW_And_Check+0x21e>
    1d26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d28:	85 34       	cpi	r24, 0x45	; 69
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <KEYPAD_UART_Send_PW_And_Check+0x21e>
    1d2c:	79 cf       	rjmp	.-270    	; 0x1c20 <KEYPAD_UART_Send_PW_And_Check+0x110>
		if(key == 'E')
    1d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d30:	85 34       	cpi	r24, 0x45	; 69
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <KEYPAD_UART_Send_PW_And_Check+0x228>
		{
			return FALSE;
    1d34:	19 a2       	std	Y+33, r1	; 0x21
    1d36:	09 c0       	rjmp	.+18     	; 0x1d4a <KEYPAD_UART_Send_PW_And_Check+0x23a>
		UART_sendByte('C');
		_delay_ms(100);
	}while(UART_recieveByte() != 'A');

	/*send key to check with digit in EEPROM*/
	for(;counter<5;counter++)
    1d38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d40:	85 30       	cpi	r24, 0x05	; 5
    1d42:	08 f4       	brcc	.+2      	; 0x1d46 <KEYPAD_UART_Send_PW_And_Check+0x236>
    1d44:	6d cf       	rjmp	.-294    	; 0x1c20 <KEYPAD_UART_Send_PW_And_Check+0x110>
		if(key == 'E')
		{
			return FALSE;
		}
	}
	return TRUE;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	89 a3       	std	Y+33, r24	; 0x21
    1d4a:	89 a1       	ldd	r24, Y+33	; 0x21
}
    1d4c:	a1 96       	adiw	r28, 0x21	; 33
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1d66:	e4 e3       	ldi	r30, 0x34	; 52
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	8f ef       	ldi	r24, 0xFF	; 255
    1d6c:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1d6e:	a1 e3       	ldi	r26, 0x31	; 49
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e1 e3       	ldi	r30, 0x31	; 49
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 67       	ori	r24, 0x70	; 112
    1d7a:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1d7c:	88 e3       	ldi	r24, 0x38	; 56
    1d7e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1d82:	8c e0       	ldi	r24, 0x0C	; 12
    1d84:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LCD_sendCommand>
}
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	e9 97       	sbiw	r28, 0x39	; 57
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1daa:	a2 e3       	ldi	r26, 0x32	; 50
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e2 e3       	ldi	r30, 0x32	; 50
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8f 7e       	andi	r24, 0xEF	; 239
    1db6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1db8:	a2 e3       	ldi	r26, 0x32	; 50
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 e3       	ldi	r30, 0x32	; 50
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 7d       	andi	r24, 0xDF	; 223
    1dc4:	8c 93       	st	X, r24
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 e8       	ldi	r26, 0x80	; 128
    1dcc:	bf e3       	ldi	r27, 0x3F	; 63
    1dce:	8d ab       	std	Y+53, r24	; 0x35
    1dd0:	9e ab       	std	Y+54, r25	; 0x36
    1dd2:	af ab       	std	Y+55, r26	; 0x37
    1dd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dda:	8f a9       	ldd	r24, Y+55	; 0x37
    1ddc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a e7       	ldi	r20, 0x7A	; 122
    1de4:	53 e4       	ldi	r21, 0x43	; 67
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	89 ab       	std	Y+49, r24	; 0x31
    1df0:	9a ab       	std	Y+50, r25	; 0x32
    1df2:	ab ab       	std	Y+51, r26	; 0x33
    1df4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1df6:	69 a9       	ldd	r22, Y+49	; 0x31
    1df8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <LCD_sendCommand+0x84>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	98 ab       	std	Y+48, r25	; 0x30
    1e14:	8f a7       	std	Y+47, r24	; 0x2f
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1e18:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	6d a9       	ldd	r22, Y+53	; 0x35
    1e32:	7e a9       	ldd	r23, Y+54	; 0x36
    1e34:	8f a9       	ldd	r24, Y+55	; 0x37
    1e36:	98 ad       	ldd	r25, Y+56	; 0x38
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	98 ab       	std	Y+48, r25	; 0x30
    1e56:	8f a7       	std	Y+47, r24	; 0x2f
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <LCD_sendCommand+0xe4>
    1e5a:	89 e1       	ldi	r24, 0x19	; 25
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	9e a7       	std	Y+46, r25	; 0x2e
    1e60:	8d a7       	std	Y+45, r24	; 0x2d
    1e62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_sendCommand+0xd2>
    1e6a:	9e a7       	std	Y+46, r25	; 0x2e
    1e6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e70:	98 a9       	ldd	r25, Y+48	; 0x30
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	98 ab       	std	Y+48, r25	; 0x30
    1e76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <LCD_sendCommand+0xc6>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	69 a9       	ldd	r22, Y+49	; 0x31
    1e84:	7a a9       	ldd	r23, Y+50	; 0x32
    1e86:	8b a9       	ldd	r24, Y+51	; 0x33
    1e88:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	98 ab       	std	Y+48, r25	; 0x30
    1e94:	8f a7       	std	Y+47, r24	; 0x2f
    1e96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e98:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9a:	9c a7       	std	Y+44, r25	; 0x2c
    1e9c:	8b a7       	std	Y+43, r24	; 0x2b
    1e9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_sendCommand+0x10e>
    1ea6:	9c a7       	std	Y+44, r25	; 0x2c
    1ea8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1eaa:	a2 e3       	ldi	r26, 0x32	; 50
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e2 e3       	ldi	r30, 0x32	; 50
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 64       	ori	r24, 0x40	; 64
    1eb6:	8c 93       	st	X, r24
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e8       	ldi	r26, 0x80	; 128
    1ebe:	bf e3       	ldi	r27, 0x3F	; 63
    1ec0:	8f a3       	std	Y+39, r24	; 0x27
    1ec2:	98 a7       	std	Y+40, r25	; 0x28
    1ec4:	a9 a7       	std	Y+41, r26	; 0x29
    1ec6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eca:	78 a5       	ldd	r23, Y+40	; 0x28
    1ecc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ece:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a e7       	ldi	r20, 0x7A	; 122
    1ed6:	53 e4       	ldi	r21, 0x43	; 67
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8b a3       	std	Y+35, r24	; 0x23
    1ee2:	9c a3       	std	Y+36, r25	; 0x24
    1ee4:	ad a3       	std	Y+37, r26	; 0x25
    1ee6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ee8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eea:	7c a1       	ldd	r23, Y+36	; 0x24
    1eec:	8d a1       	ldd	r24, Y+37	; 0x25
    1eee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <LCD_sendCommand+0x176>
		__ticks = 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9a a3       	std	Y+34, r25	; 0x22
    1f06:	89 a3       	std	Y+33, r24	; 0x21
    1f08:	3f c0       	rjmp	.+126    	; 0x1f88 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f10:	9e a1       	ldd	r25, Y+38	; 0x26
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	4c f5       	brge	.+82     	; 0x1f74 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f22:	6f a1       	ldd	r22, Y+39	; 0x27
    1f24:	78 a5       	ldd	r23, Y+40	; 0x28
    1f26:	89 a5       	ldd	r24, Y+41	; 0x29
    1f28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e2       	ldi	r20, 0x20	; 32
    1f30:	51 e4       	ldi	r21, 0x41	; 65
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9a a3       	std	Y+34, r25	; 0x22
    1f48:	89 a3       	std	Y+33, r24	; 0x21
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <LCD_sendCommand+0x1d6>
    1f4c:	89 e1       	ldi	r24, 0x19	; 25
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	98 a3       	std	Y+32, r25	; 0x20
    1f52:	8f 8f       	std	Y+31, r24	; 0x1f
    1f54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f56:	98 a1       	ldd	r25, Y+32	; 0x20
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_sendCommand+0x1c4>
    1f5c:	98 a3       	std	Y+32, r25	; 0x20
    1f5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f60:	89 a1       	ldd	r24, Y+33	; 0x21
    1f62:	9a a1       	ldd	r25, Y+34	; 0x22
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	69 f7       	brne	.-38     	; 0x1f4c <LCD_sendCommand+0x1b8>
    1f72:	14 c0       	rjmp	.+40     	; 0x1f9c <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	6b a1       	ldd	r22, Y+35	; 0x23
    1f76:	7c a1       	ldd	r23, Y+36	; 0x24
    1f78:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9a a3       	std	Y+34, r25	; 0x22
    1f86:	89 a3       	std	Y+33, r24	; 0x21
    1f88:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_sendCommand+0x200>
    1f98:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1f9c:	e5 e3       	ldi	r30, 0x35	; 53
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa2:	80 83       	st	Z, r24
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e8       	ldi	r26, 0x80	; 128
    1faa:	bf e3       	ldi	r27, 0x3F	; 63
    1fac:	89 8f       	std	Y+25, r24	; 0x19
    1fae:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a e7       	ldi	r20, 0x7A	; 122
    1fc2:	53 e4       	ldi	r21, 0x43	; 67
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8d 8b       	std	Y+21, r24	; 0x15
    1fce:	9e 8b       	std	Y+22, r25	; 0x16
    1fd0:	af 8b       	std	Y+23, r26	; 0x17
    1fd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fda:	98 8d       	ldd	r25, Y+24	; 0x18
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <LCD_sendCommand+0x262>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9c 8b       	std	Y+20, r25	; 0x14
    1ff2:	8b 8b       	std	Y+19, r24	; 0x13
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	69 8d       	ldd	r22, Y+25	; 0x19
    2010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9c 8b       	std	Y+20, r25	; 0x14
    2034:	8b 8b       	std	Y+19, r24	; 0x13
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <LCD_sendCommand+0x2c2>
    2038:	89 e1       	ldi	r24, 0x19	; 25
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9a 8b       	std	Y+18, r25	; 0x12
    203e:	89 8b       	std	Y+17, r24	; 0x11
    2040:	89 89       	ldd	r24, Y+17	; 0x11
    2042:	9a 89       	ldd	r25, Y+18	; 0x12
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_sendCommand+0x2b0>
    2048:	9a 8b       	std	Y+18, r25	; 0x12
    204a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <LCD_sendCommand+0x2a4>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	6d 89       	ldd	r22, Y+21	; 0x15
    2062:	7e 89       	ldd	r23, Y+22	; 0x16
    2064:	8f 89       	ldd	r24, Y+23	; 0x17
    2066:	98 8d       	ldd	r25, Y+24	; 0x18
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	98 8b       	std	Y+16, r25	; 0x10
    207a:	8f 87       	std	Y+15, r24	; 0x0f
    207c:	8f 85       	ldd	r24, Y+15	; 0x0f
    207e:	98 89       	ldd	r25, Y+16	; 0x10
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_sendCommand+0x2ec>
    2084:	98 8b       	std	Y+16, r25	; 0x10
    2086:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2088:	a2 e3       	ldi	r26, 0x32	; 50
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e2 e3       	ldi	r30, 0x32	; 50
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	8f 7b       	andi	r24, 0xBF	; 191
    2094:	8c 93       	st	X, r24
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a0 e8       	ldi	r26, 0x80	; 128
    209c:	bf e3       	ldi	r27, 0x3F	; 63
    209e:	8b 87       	std	Y+11, r24	; 0x0b
    20a0:	9c 87       	std	Y+12, r25	; 0x0c
    20a2:	ad 87       	std	Y+13, r26	; 0x0d
    20a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a e7       	ldi	r20, 0x7A	; 122
    20b4:	53 e4       	ldi	r21, 0x43	; 67
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	8f 83       	std	Y+7, r24	; 0x07
    20c0:	98 87       	std	Y+8, r25	; 0x08
    20c2:	a9 87       	std	Y+9, r26	; 0x09
    20c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	78 85       	ldd	r23, Y+8	; 0x08
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	5f e3       	ldi	r21, 0x3F	; 63
    20d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20da:	88 23       	and	r24, r24
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <LCD_sendCommand+0x354>
		__ticks = 1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
    20e6:	3f c0       	rjmp	.+126    	; 0x2166 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	3f ef       	ldi	r19, 0xFF	; 255
    20f4:	4f e7       	ldi	r20, 0x7F	; 127
    20f6:	57 e4       	ldi	r21, 0x47	; 71
    20f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fc:	18 16       	cp	r1, r24
    20fe:	4c f5       	brge	.+82     	; 0x2152 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2100:	6b 85       	ldd	r22, Y+11	; 0x0b
    2102:	7c 85       	ldd	r23, Y+12	; 0x0c
    2104:	8d 85       	ldd	r24, Y+13	; 0x0d
    2106:	9e 85       	ldd	r25, Y+14	; 0x0e
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e2       	ldi	r20, 0x20	; 32
    210e:	51 e4       	ldi	r21, 0x41	; 65
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <LCD_sendCommand+0x3b4>
    212a:	89 e1       	ldi	r24, 0x19	; 25
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9c 83       	std	Y+4, r25	; 0x04
    2130:	8b 83       	std	Y+3, r24	; 0x03
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <LCD_sendCommand+0x3a2>
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	69 f7       	brne	.-38     	; 0x212a <LCD_sendCommand+0x396>
    2150:	14 c0       	rjmp	.+40     	; 0x217a <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2152:	6f 81       	ldd	r22, Y+7	; 0x07
    2154:	78 85       	ldd	r23, Y+8	; 0x08
    2156:	89 85       	ldd	r24, Y+9	; 0x09
    2158:	9a 85       	ldd	r25, Y+10	; 0x0a
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <LCD_sendCommand+0x3de>
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    217a:	e9 96       	adiw	r28, 0x39	; 57
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	e9 97       	sbiw	r28, 0x39	; 57
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    21a2:	a2 e3       	ldi	r26, 0x32	; 50
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e2 e3       	ldi	r30, 0x32	; 50
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	80 61       	ori	r24, 0x10	; 16
    21ae:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    21b0:	a2 e3       	ldi	r26, 0x32	; 50
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e2 e3       	ldi	r30, 0x32	; 50
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	8f 7d       	andi	r24, 0xDF	; 223
    21bc:	8c 93       	st	X, r24
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	a0 e8       	ldi	r26, 0x80	; 128
    21c4:	bf e3       	ldi	r27, 0x3F	; 63
    21c6:	8d ab       	std	Y+53, r24	; 0x35
    21c8:	9e ab       	std	Y+54, r25	; 0x36
    21ca:	af ab       	std	Y+55, r26	; 0x37
    21cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ce:	6d a9       	ldd	r22, Y+53	; 0x35
    21d0:	7e a9       	ldd	r23, Y+54	; 0x36
    21d2:	8f a9       	ldd	r24, Y+55	; 0x37
    21d4:	98 ad       	ldd	r25, Y+56	; 0x38
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a e7       	ldi	r20, 0x7A	; 122
    21dc:	53 e4       	ldi	r21, 0x43	; 67
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	89 ab       	std	Y+49, r24	; 0x31
    21e8:	9a ab       	std	Y+50, r25	; 0x32
    21ea:	ab ab       	std	Y+51, r26	; 0x33
    21ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21ee:	69 a9       	ldd	r22, Y+49	; 0x31
    21f0:	7a a9       	ldd	r23, Y+50	; 0x32
    21f2:	8b a9       	ldd	r24, Y+51	; 0x33
    21f4:	9c a9       	ldd	r25, Y+52	; 0x34
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	2c f4       	brge	.+10     	; 0x2210 <LCD_displayCharacter+0x84>
		__ticks = 1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	98 ab       	std	Y+48, r25	; 0x30
    220c:	8f a7       	std	Y+47, r24	; 0x2f
    220e:	3f c0       	rjmp	.+126    	; 0x228e <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2210:	69 a9       	ldd	r22, Y+49	; 0x31
    2212:	7a a9       	ldd	r23, Y+50	; 0x32
    2214:	8b a9       	ldd	r24, Y+51	; 0x33
    2216:	9c a9       	ldd	r25, Y+52	; 0x34
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	3f ef       	ldi	r19, 0xFF	; 255
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	57 e4       	ldi	r21, 0x47	; 71
    2220:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2224:	18 16       	cp	r1, r24
    2226:	4c f5       	brge	.+82     	; 0x227a <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	6d a9       	ldd	r22, Y+53	; 0x35
    222a:	7e a9       	ldd	r23, Y+54	; 0x36
    222c:	8f a9       	ldd	r24, Y+55	; 0x37
    222e:	98 ad       	ldd	r25, Y+56	; 0x38
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	98 ab       	std	Y+48, r25	; 0x30
    224e:	8f a7       	std	Y+47, r24	; 0x2f
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <LCD_displayCharacter+0xe4>
    2252:	89 e1       	ldi	r24, 0x19	; 25
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9e a7       	std	Y+46, r25	; 0x2e
    2258:	8d a7       	std	Y+45, r24	; 0x2d
    225a:	8d a5       	ldd	r24, Y+45	; 0x2d
    225c:	9e a5       	ldd	r25, Y+46	; 0x2e
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_displayCharacter+0xd2>
    2262:	9e a7       	std	Y+46, r25	; 0x2e
    2264:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2266:	8f a5       	ldd	r24, Y+47	; 0x2f
    2268:	98 a9       	ldd	r25, Y+48	; 0x30
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	98 ab       	std	Y+48, r25	; 0x30
    226e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2270:	8f a5       	ldd	r24, Y+47	; 0x2f
    2272:	98 a9       	ldd	r25, Y+48	; 0x30
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	69 f7       	brne	.-38     	; 0x2252 <LCD_displayCharacter+0xc6>
    2278:	14 c0       	rjmp	.+40     	; 0x22a2 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227a:	69 a9       	ldd	r22, Y+49	; 0x31
    227c:	7a a9       	ldd	r23, Y+50	; 0x32
    227e:	8b a9       	ldd	r24, Y+51	; 0x33
    2280:	9c a9       	ldd	r25, Y+52	; 0x34
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	98 ab       	std	Y+48, r25	; 0x30
    228c:	8f a7       	std	Y+47, r24	; 0x2f
    228e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2290:	98 a9       	ldd	r25, Y+48	; 0x30
    2292:	9c a7       	std	Y+44, r25	; 0x2c
    2294:	8b a7       	std	Y+43, r24	; 0x2b
    2296:	8b a5       	ldd	r24, Y+43	; 0x2b
    2298:	9c a5       	ldd	r25, Y+44	; 0x2c
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <LCD_displayCharacter+0x10e>
    229e:	9c a7       	std	Y+44, r25	; 0x2c
    22a0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    22a2:	a2 e3       	ldi	r26, 0x32	; 50
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e2 e3       	ldi	r30, 0x32	; 50
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	80 64       	ori	r24, 0x40	; 64
    22ae:	8c 93       	st	X, r24
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e8       	ldi	r26, 0x80	; 128
    22b6:	bf e3       	ldi	r27, 0x3F	; 63
    22b8:	8f a3       	std	Y+39, r24	; 0x27
    22ba:	98 a7       	std	Y+40, r25	; 0x28
    22bc:	a9 a7       	std	Y+41, r26	; 0x29
    22be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	6f a1       	ldd	r22, Y+39	; 0x27
    22c2:	78 a5       	ldd	r23, Y+40	; 0x28
    22c4:	89 a5       	ldd	r24, Y+41	; 0x29
    22c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a e7       	ldi	r20, 0x7A	; 122
    22ce:	53 e4       	ldi	r21, 0x43	; 67
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	8b a3       	std	Y+35, r24	; 0x23
    22da:	9c a3       	std	Y+36, r25	; 0x24
    22dc:	ad a3       	std	Y+37, r26	; 0x25
    22de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22e0:	6b a1       	ldd	r22, Y+35	; 0x23
    22e2:	7c a1       	ldd	r23, Y+36	; 0x24
    22e4:	8d a1       	ldd	r24, Y+37	; 0x25
    22e6:	9e a1       	ldd	r25, Y+38	; 0x26
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <LCD_displayCharacter+0x176>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9a a3       	std	Y+34, r25	; 0x22
    22fe:	89 a3       	std	Y+33, r24	; 0x21
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2302:	6b a1       	ldd	r22, Y+35	; 0x23
    2304:	7c a1       	ldd	r23, Y+36	; 0x24
    2306:	8d a1       	ldd	r24, Y+37	; 0x25
    2308:	9e a1       	ldd	r25, Y+38	; 0x26
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	6f a1       	ldd	r22, Y+39	; 0x27
    231c:	78 a5       	ldd	r23, Y+40	; 0x28
    231e:	89 a5       	ldd	r24, Y+41	; 0x29
    2320:	9a a5       	ldd	r25, Y+42	; 0x2a
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9a a3       	std	Y+34, r25	; 0x22
    2340:	89 a3       	std	Y+33, r24	; 0x21
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <LCD_displayCharacter+0x1d6>
    2344:	89 e1       	ldi	r24, 0x19	; 25
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	98 a3       	std	Y+32, r25	; 0x20
    234a:	8f 8f       	std	Y+31, r24	; 0x1f
    234c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    234e:	98 a1       	ldd	r25, Y+32	; 0x20
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_displayCharacter+0x1c4>
    2354:	98 a3       	std	Y+32, r25	; 0x20
    2356:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	89 a1       	ldd	r24, Y+33	; 0x21
    235a:	9a a1       	ldd	r25, Y+34	; 0x22
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9a a3       	std	Y+34, r25	; 0x22
    2360:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	89 a1       	ldd	r24, Y+33	; 0x21
    2364:	9a a1       	ldd	r25, Y+34	; 0x22
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <LCD_displayCharacter+0x1b8>
    236a:	14 c0       	rjmp	.+40     	; 0x2394 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	6b a1       	ldd	r22, Y+35	; 0x23
    236e:	7c a1       	ldd	r23, Y+36	; 0x24
    2370:	8d a1       	ldd	r24, Y+37	; 0x25
    2372:	9e a1       	ldd	r25, Y+38	; 0x26
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9a a3       	std	Y+34, r25	; 0x22
    237e:	89 a3       	std	Y+33, r24	; 0x21
    2380:	89 a1       	ldd	r24, Y+33	; 0x21
    2382:	9a a1       	ldd	r25, Y+34	; 0x22
    2384:	9e 8f       	std	Y+30, r25	; 0x1e
    2386:	8d 8f       	std	Y+29, r24	; 0x1d
    2388:	8d 8d       	ldd	r24, Y+29	; 0x1d
    238a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_displayCharacter+0x200>
    2390:	9e 8f       	std	Y+30, r25	; 0x1e
    2392:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    2394:	e5 e3       	ldi	r30, 0x35	; 53
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	89 ad       	ldd	r24, Y+57	; 0x39
    239a:	80 83       	st	Z, r24
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	a0 e8       	ldi	r26, 0x80	; 128
    23a2:	bf e3       	ldi	r27, 0x3F	; 63
    23a4:	89 8f       	std	Y+25, r24	; 0x19
    23a6:	9a 8f       	std	Y+26, r25	; 0x1a
    23a8:	ab 8f       	std	Y+27, r26	; 0x1b
    23aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ac:	69 8d       	ldd	r22, Y+25	; 0x19
    23ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a e7       	ldi	r20, 0x7A	; 122
    23ba:	53 e4       	ldi	r21, 0x43	; 67
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8d 8b       	std	Y+21, r24	; 0x15
    23c6:	9e 8b       	std	Y+22, r25	; 0x16
    23c8:	af 8b       	std	Y+23, r26	; 0x17
    23ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23cc:	6d 89       	ldd	r22, Y+21	; 0x15
    23ce:	7e 89       	ldd	r23, Y+22	; 0x16
    23d0:	8f 89       	ldd	r24, Y+23	; 0x17
    23d2:	98 8d       	ldd	r25, Y+24	; 0x18
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <LCD_displayCharacter+0x262>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9c 8b       	std	Y+20, r25	; 0x14
    23ea:	8b 8b       	std	Y+19, r24	; 0x13
    23ec:	3f c0       	rjmp	.+126    	; 0x246c <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    23ee:	6d 89       	ldd	r22, Y+21	; 0x15
    23f0:	7e 89       	ldd	r23, Y+22	; 0x16
    23f2:	8f 89       	ldd	r24, Y+23	; 0x17
    23f4:	98 8d       	ldd	r25, Y+24	; 0x18
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	3f ef       	ldi	r19, 0xFF	; 255
    23fa:	4f e7       	ldi	r20, 0x7F	; 127
    23fc:	57 e4       	ldi	r21, 0x47	; 71
    23fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2402:	18 16       	cp	r1, r24
    2404:	4c f5       	brge	.+82     	; 0x2458 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2406:	69 8d       	ldd	r22, Y+25	; 0x19
    2408:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	51 e4       	ldi	r21, 0x41	; 65
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9c 8b       	std	Y+20, r25	; 0x14
    242c:	8b 8b       	std	Y+19, r24	; 0x13
    242e:	0f c0       	rjmp	.+30     	; 0x244e <LCD_displayCharacter+0x2c2>
    2430:	89 e1       	ldi	r24, 0x19	; 25
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9a 8b       	std	Y+18, r25	; 0x12
    2436:	89 8b       	std	Y+17, r24	; 0x11
    2438:	89 89       	ldd	r24, Y+17	; 0x11
    243a:	9a 89       	ldd	r25, Y+18	; 0x12
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <LCD_displayCharacter+0x2b0>
    2440:	9a 8b       	std	Y+18, r25	; 0x12
    2442:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2444:	8b 89       	ldd	r24, Y+19	; 0x13
    2446:	9c 89       	ldd	r25, Y+20	; 0x14
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	9c 8b       	std	Y+20, r25	; 0x14
    244c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244e:	8b 89       	ldd	r24, Y+19	; 0x13
    2450:	9c 89       	ldd	r25, Y+20	; 0x14
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	69 f7       	brne	.-38     	; 0x2430 <LCD_displayCharacter+0x2a4>
    2456:	14 c0       	rjmp	.+40     	; 0x2480 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2458:	6d 89       	ldd	r22, Y+21	; 0x15
    245a:	7e 89       	ldd	r23, Y+22	; 0x16
    245c:	8f 89       	ldd	r24, Y+23	; 0x17
    245e:	98 8d       	ldd	r25, Y+24	; 0x18
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9c 8b       	std	Y+20, r25	; 0x14
    246a:	8b 8b       	std	Y+19, r24	; 0x13
    246c:	8b 89       	ldd	r24, Y+19	; 0x13
    246e:	9c 89       	ldd	r25, Y+20	; 0x14
    2470:	98 8b       	std	Y+16, r25	; 0x10
    2472:	8f 87       	std	Y+15, r24	; 0x0f
    2474:	8f 85       	ldd	r24, Y+15	; 0x0f
    2476:	98 89       	ldd	r25, Y+16	; 0x10
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <LCD_displayCharacter+0x2ec>
    247c:	98 8b       	std	Y+16, r25	; 0x10
    247e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2480:	a2 e3       	ldi	r26, 0x32	; 50
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e2 e3       	ldi	r30, 0x32	; 50
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	8f 7b       	andi	r24, 0xBF	; 191
    248c:	8c 93       	st	X, r24
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e8       	ldi	r26, 0x80	; 128
    2494:	bf e3       	ldi	r27, 0x3F	; 63
    2496:	8b 87       	std	Y+11, r24	; 0x0b
    2498:	9c 87       	std	Y+12, r25	; 0x0c
    249a:	ad 87       	std	Y+13, r26	; 0x0d
    249c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a e7       	ldi	r20, 0x7A	; 122
    24ac:	53 e4       	ldi	r21, 0x43	; 67
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	8f 83       	std	Y+7, r24	; 0x07
    24b8:	98 87       	std	Y+8, r25	; 0x08
    24ba:	a9 87       	std	Y+9, r26	; 0x09
    24bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24be:	6f 81       	ldd	r22, Y+7	; 0x07
    24c0:	78 85       	ldd	r23, Y+8	; 0x08
    24c2:	89 85       	ldd	r24, Y+9	; 0x09
    24c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <LCD_displayCharacter+0x354>
		__ticks = 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
    24de:	3f c0       	rjmp	.+126    	; 0x255e <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	57 e4       	ldi	r21, 0x47	; 71
    24f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	4c f5       	brge	.+82     	; 0x254a <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e2       	ldi	r20, 0x20	; 32
    2506:	51 e4       	ldi	r21, 0x41	; 65
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
    2520:	0f c0       	rjmp	.+30     	; 0x2540 <LCD_displayCharacter+0x3b4>
    2522:	89 e1       	ldi	r24, 0x19	; 25
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9c 83       	std	Y+4, r25	; 0x04
    2528:	8b 83       	std	Y+3, r24	; 0x03
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_displayCharacter+0x3a2>
    2532:	9c 83       	std	Y+4, r25	; 0x04
    2534:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2536:	8d 81       	ldd	r24, Y+5	; 0x05
    2538:	9e 81       	ldd	r25, Y+6	; 0x06
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	9e 81       	ldd	r25, Y+6	; 0x06
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	69 f7       	brne	.-38     	; 0x2522 <LCD_displayCharacter+0x396>
    2548:	14 c0       	rjmp	.+40     	; 0x2572 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	6f 81       	ldd	r22, Y+7	; 0x07
    254c:	78 85       	ldd	r23, Y+8	; 0x08
    254e:	89 85       	ldd	r24, Y+9	; 0x09
    2550:	9a 85       	ldd	r25, Y+10	; 0x0a
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_displayCharacter+0x3de>
    256e:	9a 83       	std	Y+2, r25	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    2572:	e9 96       	adiw	r28, 0x39	; 57
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	00 d0       	rcall	.+0      	; 0x258a <LCD_displayString+0x6>
    258a:	0f 92       	push	r0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	9b 83       	std	Y+3, r25	; 0x03
    2592:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2594:	19 82       	std	Y+1, r1	; 0x01
    2596:	0e c0       	rjmp	.+28     	; 0x25b4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	9b 81       	ldd	r25, Y+3	; 0x03
    25a2:	fc 01       	movw	r30, r24
    25a4:	e2 0f       	add	r30, r18
    25a6:	f3 1f       	adc	r31, r19
    25a8:	80 81       	ld	r24, Z
    25aa:	0e 94 c6 10 	call	0x218c	; 0x218c <LCD_displayCharacter>
		i++;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	9b 81       	ldd	r25, Y+3	; 0x03
    25be:	fc 01       	movw	r30, r24
    25c0:	e2 0f       	add	r30, r18
    25c2:	f3 1f       	adc	r31, r19
    25c4:	80 81       	ld	r24, Z
    25c6:	88 23       	and	r24, r24
    25c8:	39 f7       	brne	.-50     	; 0x2598 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	00 d0       	rcall	.+0      	; 0x25dc <LCD_goToRowColumn+0x6>
    25dc:	00 d0       	rcall	.+0      	; 0x25de <LCD_goToRowColumn+0x8>
    25de:	0f 92       	push	r0
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	8a 83       	std	Y+2, r24	; 0x02
    25e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	3d 83       	std	Y+5, r19	; 0x05
    25f0:	2c 83       	std	Y+4, r18	; 0x04
    25f2:	8c 81       	ldd	r24, Y+4	; 0x04
    25f4:	9d 81       	ldd	r25, Y+5	; 0x05
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	91 05       	cpc	r25, r1
    25fa:	c1 f0       	breq	.+48     	; 0x262c <LCD_goToRowColumn+0x56>
    25fc:	2c 81       	ldd	r18, Y+4	; 0x04
    25fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2600:	22 30       	cpi	r18, 0x02	; 2
    2602:	31 05       	cpc	r19, r1
    2604:	2c f4       	brge	.+10     	; 0x2610 <LCD_goToRowColumn+0x3a>
    2606:	8c 81       	ldd	r24, Y+4	; 0x04
    2608:	9d 81       	ldd	r25, Y+5	; 0x05
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	61 f0       	breq	.+24     	; 0x2626 <LCD_goToRowColumn+0x50>
    260e:	19 c0       	rjmp	.+50     	; 0x2642 <LCD_goToRowColumn+0x6c>
    2610:	2c 81       	ldd	r18, Y+4	; 0x04
    2612:	3d 81       	ldd	r19, Y+5	; 0x05
    2614:	22 30       	cpi	r18, 0x02	; 2
    2616:	31 05       	cpc	r19, r1
    2618:	69 f0       	breq	.+26     	; 0x2634 <LCD_goToRowColumn+0x5e>
    261a:	8c 81       	ldd	r24, Y+4	; 0x04
    261c:	9d 81       	ldd	r25, Y+5	; 0x05
    261e:	83 30       	cpi	r24, 0x03	; 3
    2620:	91 05       	cpc	r25, r1
    2622:	61 f0       	breq	.+24     	; 0x263c <LCD_goToRowColumn+0x66>
    2624:	0e c0       	rjmp	.+28     	; 0x2642 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	0b c0       	rjmp	.+22     	; 0x2642 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	80 5c       	subi	r24, 0xC0	; 192
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	07 c0       	rjmp	.+14     	; 0x2642 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	80 5f       	subi	r24, 0xF0	; 240
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	03 c0       	rjmp	.+6      	; 0x2642 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	80 5b       	subi	r24, 0xB0	; 176
    2640:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	80 68       	ori	r24, 0x80	; 128
    2646:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LCD_sendCommand>
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	00 d0       	rcall	.+0      	; 0x2660 <LCD_displayStringRowColumn+0x6>
    2660:	00 d0       	rcall	.+0      	; 0x2662 <LCD_displayStringRowColumn+0x8>
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	6a 83       	std	Y+2, r22	; 0x02
    266a:	5c 83       	std	Y+4, r21	; 0x04
    266c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	6a 81       	ldd	r22, Y+2	; 0x02
    2672:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	9c 81       	ldd	r25, Y+4	; 0x04
    267a:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
}
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	62 97       	sbiw	r28, 0x12	; 18
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	9a 8b       	std	Y+18, r25	; 0x12
    26a2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    26a4:	89 89       	ldd	r24, Y+17	; 0x11
    26a6:	9a 89       	ldd	r25, Y+18	; 0x12
    26a8:	9e 01       	movw	r18, r28
    26aa:	2f 5f       	subi	r18, 0xFF	; 255
    26ac:	3f 4f       	sbci	r19, 0xFF	; 255
    26ae:	b9 01       	movw	r22, r18
    26b0:	4a e0       	ldi	r20, 0x0A	; 10
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	0e 94 4c 19 	call	0x3298	; 0x3298 <itoa>
   LCD_displayString(buff);
    26b8:	ce 01       	movw	r24, r28
    26ba:	01 96       	adiw	r24, 0x01	; 1
    26bc:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
}
    26c0:	62 96       	adiw	r28, 0x12	; 18
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LCD_sendCommand>
}
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <__vector_6>:
extern uint8 g_check;
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    26e6:	1f 92       	push	r1
    26e8:	0f 92       	push	r0
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	0f 92       	push	r0
    26ee:	11 24       	eor	r1, r1
    26f0:	2f 93       	push	r18
    26f2:	3f 93       	push	r19
    26f4:	4f 93       	push	r20
    26f6:	5f 93       	push	r21
    26f8:	6f 93       	push	r22
    26fa:	7f 93       	push	r23
    26fc:	8f 93       	push	r24
    26fe:	9f 93       	push	r25
    2700:	af 93       	push	r26
    2702:	bf 93       	push	r27
    2704:	ef 93       	push	r30
    2706:	ff 93       	push	r31
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	count++;/*increment number of seconds*/
    2710:	80 91 2f 01 	lds	r24, 0x012F
    2714:	8f 5f       	subi	r24, 0xFF	; 255
    2716:	80 93 2f 01 	sts	0x012F, r24
	if(count == 15 && g_numberOfSeconds == 15)
    271a:	80 91 2f 01 	lds	r24, 0x012F
    271e:	8f 30       	cpi	r24, 0x0F	; 15
    2720:	89 f4       	brne	.+34     	; 0x2744 <__vector_6+0x5e>
    2722:	80 91 30 01 	lds	r24, 0x0130
    2726:	8f 30       	cpi	r24, 0x0F	; 15
    2728:	69 f4       	brne	.+26     	; 0x2744 <__vector_6+0x5e>
	{
		LCD_clearScreen();
    272a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
		/*De_initialize LCD Timer to stop clock of timer*/
		LCD_Timer_Dinit(15);
    272e:	8f e0       	ldi	r24, 0x0F	; 15
    2730:	0e 94 27 14 	call	0x284e	; 0x284e <LCD_Timer_Dinit>
		/*initialize timer to display message for 15 seconds*/
		LCD_Timer_init(15,"DOOR LOCKED");
    2734:	2a ef       	ldi	r18, 0xFA	; 250
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	8f e0       	ldi	r24, 0x0F	; 15
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	b9 01       	movw	r22, r18
    273e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_Timer_init>
    2742:	25 c0       	rjmp	.+74     	; 0x278e <__vector_6+0xa8>
	}
	else if(count == 30 && g_numberOfSeconds == 15)
    2744:	80 91 2f 01 	lds	r24, 0x012F
    2748:	8e 31       	cpi	r24, 0x1E	; 30
    274a:	79 f4       	brne	.+30     	; 0x276a <__vector_6+0x84>
    274c:	80 91 30 01 	lds	r24, 0x0130
    2750:	8f 30       	cpi	r24, 0x0F	; 15
    2752:	59 f4       	brne	.+22     	; 0x276a <__vector_6+0x84>
	{
		LCD_clearScreen();
    2754:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
		/*De_initialize LCD Timer to stop clock of timer*/
		LCD_Timer_Dinit(15);
    2758:	8f e0       	ldi	r24, 0x0F	; 15
    275a:	0e 94 27 14 	call	0x284e	; 0x284e <LCD_Timer_Dinit>
		count =0;/*reset seconds counter */
    275e:	10 92 2f 01 	sts	0x012F, r1
		g_check = 'S';/*To return to main screen*/
    2762:	83 e5       	ldi	r24, 0x53	; 83
    2764:	80 93 18 01 	sts	0x0118, r24
    2768:	12 c0       	rjmp	.+36     	; 0x278e <__vector_6+0xa8>
	}
	else if(count == 60 && g_numberOfSeconds == 60)
    276a:	80 91 2f 01 	lds	r24, 0x012F
    276e:	8c 33       	cpi	r24, 0x3C	; 60
    2770:	71 f4       	brne	.+28     	; 0x278e <__vector_6+0xa8>
    2772:	80 91 30 01 	lds	r24, 0x0130
    2776:	8c 33       	cpi	r24, 0x3C	; 60
    2778:	51 f4       	brne	.+20     	; 0x278e <__vector_6+0xa8>
	{
		LCD_clearScreen();
    277a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
		/*De_initialize LCD Timer to stop clock of timer*/
		LCD_Timer_Dinit(60);
    277e:	8c e3       	ldi	r24, 0x3C	; 60
    2780:	0e 94 27 14 	call	0x284e	; 0x284e <LCD_Timer_Dinit>
		g_check = 'S';/*To return to main screen*/
    2784:	83 e5       	ldi	r24, 0x53	; 83
    2786:	80 93 18 01 	sts	0x0118, r24
		count =0;/*reset seconds counter */
    278a:	10 92 2f 01 	sts	0x012F, r1
	}

}
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	ff 91       	pop	r31
    2794:	ef 91       	pop	r30
    2796:	bf 91       	pop	r27
    2798:	af 91       	pop	r26
    279a:	9f 91       	pop	r25
    279c:	8f 91       	pop	r24
    279e:	7f 91       	pop	r23
    27a0:	6f 91       	pop	r22
    27a2:	5f 91       	pop	r21
    27a4:	4f 91       	pop	r20
    27a6:	3f 91       	pop	r19
    27a8:	2f 91       	pop	r18
    27aa:	0f 90       	pop	r0
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	0f 90       	pop	r0
    27b0:	1f 90       	pop	r1
    27b2:	18 95       	reti

000027b4 <LCD_Timer_init>:
 *******************************************************************************/
/*Description:function to initialize timer and LCD
 * 1. init timer with number of seconds
 * 2.display LCD message*/
void LCD_Timer_init(uint16 secs,uint8* Message)
{
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	60 97       	sbiw	r28, 0x10	; 16
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	9e 87       	std	Y+14, r25	; 0x0e
    27ca:	8d 87       	std	Y+13, r24	; 0x0d
    27cc:	78 8b       	std	Y+16, r23	; 0x10
    27ce:	6f 87       	std	Y+15, r22	; 0x0f
	/*Timer initialize*/
	/*assign seconds to determined ISR logic*/
	g_numberOfSeconds = secs;
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	80 93 30 01 	sts	0x0130, r24
	/*set global interrupt enable bit*/
	SET_BIT(SREG,7);
    27d6:	af e5       	ldi	r26, 0x5F	; 95
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	ef e5       	ldi	r30, 0x5F	; 95
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	80 68       	ori	r24, 0x80	; 128
    27e2:	8c 93       	st	X, r24
	/*set compare match interrupt Enable*/
	SET_BIT(TIMSK,OCIE1A);
    27e4:	a9 e5       	ldi	r26, 0x59	; 89
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e9 e5       	ldi	r30, 0x59	; 89
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	80 61       	ori	r24, 0x10	; 16
    27f0:	8c 93       	st	X, r24
	/*OCR value to make timer 1 generate compare interrupt on it*/
	uint16 OCR_Value = 977;
    27f2:	81 ed       	ldi	r24, 0xD1	; 209
    27f4:	93 e0       	ldi	r25, 0x03	; 3
    27f6:	9a 83       	std	Y+2, r25	; 0x02
    27f8:	89 83       	std	Y+1, r24	; 0x01
	 * timer mode CTC : to interrupt on compare match
	 * initial value =0
	 * ICR value =0
	 * OCR value :calculated above.
	 * */
	Timer_ConfigType config={F_CPU_1024,TIMER_1,NONE,CTC,0,0,OCR_Value};
    27fa:	85 e0       	ldi	r24, 0x05	; 5
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	8c 83       	std	Y+4, r24	; 0x04
    2802:	82 e0       	ldi	r24, 0x02	; 2
    2804:	8d 83       	std	Y+5, r24	; 0x05
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	8e 83       	std	Y+6, r24	; 0x06
    280a:	18 86       	std	Y+8, r1	; 0x08
    280c:	1f 82       	std	Y+7, r1	; 0x07
    280e:	1a 86       	std	Y+10, r1	; 0x0a
    2810:	19 86       	std	Y+9, r1	; 0x09
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	9c 87       	std	Y+12, r25	; 0x0c
    2818:	8b 87       	std	Y+11, r24	; 0x0b
	Timer_init(&config);
    281a:	ce 01       	movw	r24, r28
    281c:	03 96       	adiw	r24, 0x03	; 3
    281e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <Timer_init>
	/*LCD display messages*/
	LCD_clearScreen();
    2822:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
	LCD_goToRowColumn(0,2);
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	62 e0       	ldi	r22, 0x02	; 2
    282a:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_goToRowColumn>
	LCD_displayString(Message);
    282e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2830:	98 89       	ldd	r25, Y+16	; 0x10
    2832:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_displayString>
	g_check='E';
    2836:	85 e4       	ldi	r24, 0x45	; 69
    2838:	80 93 18 01 	sts	0x0118, r24
}
    283c:	60 96       	adiw	r28, 0x10	; 16
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <LCD_Timer_Dinit>:
void LCD_Timer_Dinit(uint8 secs)
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	60 97       	sbiw	r28, 0x10	; 16
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	8b 87       	std	Y+11, r24	; 0x0b
	/*Timer initialize*/
	CLEAR_BIT(TIMSK,OCIE1A);//clear compare match interrupt Enable
    2864:	a9 e5       	ldi	r26, 0x59	; 89
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e9 e5       	ldi	r30, 0x59	; 89
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	8f 7e       	andi	r24, 0xEF	; 239
    2870:	8c 93       	st	X, r24
	 * timer mode CTC : to interrupt on compare match
	 * initial value =0
	 * ICR value =0
	 * OCR value :0
	 * */
	Timer_ConfigType config = {NO_CLOCK,TIMER_1,NONE,CTC,0,0,0};
    2872:	ce 01       	movw	r24, r28
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	9d 87       	std	Y+13, r25	; 0x0d
    2878:	8c 87       	std	Y+12, r24	; 0x0c
    287a:	ee e0       	ldi	r30, 0x0E	; 14
    287c:	f1 e0       	ldi	r31, 0x01	; 1
    287e:	ff 87       	std	Y+15, r31	; 0x0f
    2880:	ee 87       	std	Y+14, r30	; 0x0e
    2882:	fa e0       	ldi	r31, 0x0A	; 10
    2884:	f8 8b       	std	Y+16, r31	; 0x10
    2886:	ee 85       	ldd	r30, Y+14	; 0x0e
    2888:	ff 85       	ldd	r31, Y+15	; 0x0f
    288a:	00 80       	ld	r0, Z
    288c:	8e 85       	ldd	r24, Y+14	; 0x0e
    288e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2890:	01 96       	adiw	r24, 0x01	; 1
    2892:	9f 87       	std	Y+15, r25	; 0x0f
    2894:	8e 87       	std	Y+14, r24	; 0x0e
    2896:	ec 85       	ldd	r30, Y+12	; 0x0c
    2898:	fd 85       	ldd	r31, Y+13	; 0x0d
    289a:	00 82       	st	Z, r0
    289c:	8c 85       	ldd	r24, Y+12	; 0x0c
    289e:	9d 85       	ldd	r25, Y+13	; 0x0d
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	9d 87       	std	Y+13, r25	; 0x0d
    28a4:	8c 87       	std	Y+12, r24	; 0x0c
    28a6:	98 89       	ldd	r25, Y+16	; 0x10
    28a8:	91 50       	subi	r25, 0x01	; 1
    28aa:	98 8b       	std	Y+16, r25	; 0x10
    28ac:	e8 89       	ldd	r30, Y+16	; 0x10
    28ae:	ee 23       	and	r30, r30
    28b0:	51 f7       	brne	.-44     	; 0x2886 <LCD_Timer_Dinit+0x38>
	Timer_init(&config);
    28b2:	ce 01       	movw	r24, r28
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <Timer_init>
	/*LCD display messages*/
	LCD_clearScreen();
    28ba:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_clearScreen>
}
    28be:	60 96       	adiw	r28, 0x10	; 16
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	08 95       	ret

000028d0 <Timer_init>:
 * 3. determine Config_Ptr->edge type in counter mode.
 * 4. determine timer mode.
 *
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	60 97       	sbiw	r28, 0x10	; 16
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
	/* switch on timers on AVR*/
	switch(Config_Ptr->timer)
    28e8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ea:	fa 81       	ldd	r31, Y+2	; 0x02
    28ec:	81 81       	ldd	r24, Z+1	; 0x01
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	38 8b       	std	Y+16, r19	; 0x10
    28f4:	2f 87       	std	Y+15, r18	; 0x0f
    28f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f8:	98 89       	ldd	r25, Y+16	; 0x10
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	39 f0       	breq	.+14     	; 0x290c <Timer_init+0x3c>
    28fe:	2f 85       	ldd	r18, Y+15	; 0x0f
    2900:	38 89       	ldd	r19, Y+16	; 0x10
    2902:	21 30       	cpi	r18, 0x01	; 1
    2904:	31 05       	cpc	r19, r1
    2906:	09 f4       	brne	.+2      	; 0x290a <Timer_init+0x3a>
    2908:	a1 c1       	rjmp	.+834    	; 0x2c4c <Timer_init+0x37c>
    290a:	a5 c3       	rjmp	.+1866   	; 0x3056 <Timer_init+0x786>
	{
	case TIMER_0:
		/*switch on clock devision factor of Timer_0 Clock */
		switch(Config_Ptr->prescaler)
    290c:	e9 81       	ldd	r30, Y+1	; 0x01
    290e:	fa 81       	ldd	r31, Y+2	; 0x02
    2910:	80 81       	ld	r24, Z
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	3e 87       	std	Y+14, r19	; 0x0e
    2918:	2d 87       	std	Y+13, r18	; 0x0d
    291a:	8d 85       	ldd	r24, Y+13	; 0x0d
    291c:	9e 85       	ldd	r25, Y+14	; 0x0e
    291e:	82 30       	cpi	r24, 0x02	; 2
    2920:	91 05       	cpc	r25, r1
    2922:	09 f4       	brne	.+2      	; 0x2926 <Timer_init+0x56>
    2924:	63 c0       	rjmp	.+198    	; 0x29ec <Timer_init+0x11c>
    2926:	2d 85       	ldd	r18, Y+13	; 0x0d
    2928:	3e 85       	ldd	r19, Y+14	; 0x0e
    292a:	23 30       	cpi	r18, 0x03	; 3
    292c:	31 05       	cpc	r19, r1
    292e:	64 f4       	brge	.+24     	; 0x2948 <Timer_init+0x78>
    2930:	8d 85       	ldd	r24, Y+13	; 0x0d
    2932:	9e 85       	ldd	r25, Y+14	; 0x0e
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	09 f4       	brne	.+2      	; 0x293a <Timer_init+0x6a>
    2938:	85 c0       	rjmp	.+266    	; 0x2a44 <Timer_init+0x174>
    293a:	2d 85       	ldd	r18, Y+13	; 0x0d
    293c:	3e 85       	ldd	r19, Y+14	; 0x0e
    293e:	21 30       	cpi	r18, 0x01	; 1
    2940:	31 05       	cpc	r19, r1
    2942:	09 f4       	brne	.+2      	; 0x2946 <Timer_init+0x76>
    2944:	69 c0       	rjmp	.+210    	; 0x2a18 <Timer_init+0x148>
    2946:	93 c0       	rjmp	.+294    	; 0x2a6e <Timer_init+0x19e>
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	84 30       	cpi	r24, 0x04	; 4
    294e:	91 05       	cpc	r25, r1
    2950:	59 f0       	breq	.+22     	; 0x2968 <Timer_init+0x98>
    2952:	2d 85       	ldd	r18, Y+13	; 0x0d
    2954:	3e 85       	ldd	r19, Y+14	; 0x0e
    2956:	24 30       	cpi	r18, 0x04	; 4
    2958:	31 05       	cpc	r19, r1
    295a:	94 f1       	brlt	.+100    	; 0x29c0 <Timer_init+0xf0>
    295c:	8d 85       	ldd	r24, Y+13	; 0x0d
    295e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2960:	85 30       	cpi	r24, 0x05	; 5
    2962:	91 05       	cpc	r25, r1
    2964:	b9 f0       	breq	.+46     	; 0x2994 <Timer_init+0xc4>
    2966:	83 c0       	rjmp	.+262    	; 0x2a6e <Timer_init+0x19e>
		{
		case F_CPU_256:
			CLEAR_BIT(TCCR0 , CS00);
    2968:	a3 e5       	ldi	r26, 0x53	; 83
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e3 e5       	ldi	r30, 0x53	; 83
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	8e 7f       	andi	r24, 0xFE	; 254
    2974:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS01);
    2976:	a3 e5       	ldi	r26, 0x53	; 83
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e3 e5       	ldi	r30, 0x53	; 83
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	8d 7f       	andi	r24, 0xFD	; 253
    2982:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , CS02);
    2984:	a3 e5       	ldi	r26, 0x53	; 83
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e3 e5       	ldi	r30, 0x53	; 83
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	84 60       	ori	r24, 0x04	; 4
    2990:	8c 93       	st	X, r24
    2992:	6d c0       	rjmp	.+218    	; 0x2a6e <Timer_init+0x19e>
			break;
		case F_CPU_1024:
			SET_BIT(TCCR0 , CS00);
    2994:	a3 e5       	ldi	r26, 0x53	; 83
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e3 e5       	ldi	r30, 0x53	; 83
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	81 60       	ori	r24, 0x01	; 1
    29a0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS01);
    29a2:	a3 e5       	ldi	r26, 0x53	; 83
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e3 e5       	ldi	r30, 0x53	; 83
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	8d 7f       	andi	r24, 0xFD	; 253
    29ae:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , CS02);
    29b0:	a3 e5       	ldi	r26, 0x53	; 83
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e3 e5       	ldi	r30, 0x53	; 83
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	84 60       	ori	r24, 0x04	; 4
    29bc:	8c 93       	st	X, r24
    29be:	57 c0       	rjmp	.+174    	; 0x2a6e <Timer_init+0x19e>
			break;

		case F_CPU_64:
			SET_BIT(TCCR0 , CS00);
    29c0:	a3 e5       	ldi	r26, 0x53	; 83
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e3 e5       	ldi	r30, 0x53	; 83
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	81 60       	ori	r24, 0x01	; 1
    29cc:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , CS01);
    29ce:	a3 e5       	ldi	r26, 0x53	; 83
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e3 e5       	ldi	r30, 0x53	; 83
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	82 60       	ori	r24, 0x02	; 2
    29da:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 ,CS02);
    29dc:	a3 e5       	ldi	r26, 0x53	; 83
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e3 e5       	ldi	r30, 0x53	; 83
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	8b 7f       	andi	r24, 0xFB	; 251
    29e8:	8c 93       	st	X, r24
    29ea:	41 c0       	rjmp	.+130    	; 0x2a6e <Timer_init+0x19e>
			break;

		case F_CPU_8:
			CLEAR_BIT(TCCR0 , CS00);
    29ec:	a3 e5       	ldi	r26, 0x53	; 83
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e3 e5       	ldi	r30, 0x53	; 83
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	8e 7f       	andi	r24, 0xFE	; 254
    29f8:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , CS01);
    29fa:	a3 e5       	ldi	r26, 0x53	; 83
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e3 e5       	ldi	r30, 0x53	; 83
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	82 60       	ori	r24, 0x02	; 2
    2a06:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS02);
    2a08:	a3 e5       	ldi	r26, 0x53	; 83
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e3 e5       	ldi	r30, 0x53	; 83
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	8b 7f       	andi	r24, 0xFB	; 251
    2a14:	8c 93       	st	X, r24
    2a16:	2b c0       	rjmp	.+86     	; 0x2a6e <Timer_init+0x19e>
			break;

		case F_CPU_1:
			SET_BIT(TCCR0 , CS00);
    2a18:	a3 e5       	ldi	r26, 0x53	; 83
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e3 e5       	ldi	r30, 0x53	; 83
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	81 60       	ori	r24, 0x01	; 1
    2a24:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS01);
    2a26:	a3 e5       	ldi	r26, 0x53	; 83
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e3 e5       	ldi	r30, 0x53	; 83
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	8d 7f       	andi	r24, 0xFD	; 253
    2a32:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS02);
    2a34:	a3 e5       	ldi	r26, 0x53	; 83
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e3 e5       	ldi	r30, 0x53	; 83
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	8b 7f       	andi	r24, 0xFB	; 251
    2a40:	8c 93       	st	X, r24
    2a42:	15 c0       	rjmp	.+42     	; 0x2a6e <Timer_init+0x19e>
			break;
		case NO_CLOCK:
			CLEAR_BIT(TCCR0 , CS00);
    2a44:	a3 e5       	ldi	r26, 0x53	; 83
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e3 e5       	ldi	r30, 0x53	; 83
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8e 7f       	andi	r24, 0xFE	; 254
    2a50:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS01);
    2a52:	a3 e5       	ldi	r26, 0x53	; 83
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e3 e5       	ldi	r30, 0x53	; 83
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	8d 7f       	andi	r24, 0xFD	; 253
    2a5e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS02);
    2a60:	a3 e5       	ldi	r26, 0x53	; 83
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e3 e5       	ldi	r30, 0x53	; 83
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	8b 7f       	andi	r24, 0xFB	; 251
    2a6c:	8c 93       	st	X, r24
			break;
		}
		/*switch on modes of timer*/
		switch(Config_Ptr->mode)
    2a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a70:	fa 81       	ldd	r31, Y+2	; 0x02
    2a72:	83 81       	ldd	r24, Z+3	; 0x03
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	3c 87       	std	Y+12, r19	; 0x0c
    2a7a:	2b 87       	std	Y+11, r18	; 0x0b
    2a7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	91 05       	cpc	r25, r1
    2a84:	a1 f1       	breq	.+104    	; 0x2aee <Timer_init+0x21e>
    2a86:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a88:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a8a:	22 30       	cpi	r18, 0x02	; 2
    2a8c:	31 05       	cpc	r19, r1
    2a8e:	2c f4       	brge	.+10     	; 0x2a9a <Timer_init+0x1ca>
    2a90:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a92:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	71 f0       	breq	.+28     	; 0x2ab4 <Timer_init+0x1e4>
    2a98:	de c2       	rjmp	.+1468   	; 0x3056 <Timer_init+0x786>
    2a9a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a9e:	22 30       	cpi	r18, 0x02	; 2
    2aa0:	31 05       	cpc	r19, r1
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <Timer_init+0x1d6>
    2aa4:	48 c0       	rjmp	.+144    	; 0x2b36 <Timer_init+0x266>
    2aa6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aa8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aaa:	83 30       	cpi	r24, 0x03	; 3
    2aac:	91 05       	cpc	r25, r1
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <Timer_init+0x1e2>
    2ab0:	6d c0       	rjmp	.+218    	; 0x2b8c <Timer_init+0x2bc>
    2ab2:	d1 c2       	rjmp	.+1442   	; 0x3056 <Timer_init+0x786>
		{
		case Normal:
			SET_BIT(TCCR0,FOC0);
    2ab4:	a3 e5       	ldi	r26, 0x53	; 83
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e3 e5       	ldi	r30, 0x53	; 83
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	80 68       	ori	r24, 0x80	; 128
    2ac0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 ,WGM00);
    2ac2:	a3 e5       	ldi	r26, 0x53	; 83
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e3 e5       	ldi	r30, 0x53	; 83
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	8f 7b       	andi	r24, 0xBF	; 191
    2ace:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 ,WGM01);
    2ad0:	a3 e5       	ldi	r26, 0x53	; 83
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e3 e5       	ldi	r30, 0x53	; 83
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	87 7f       	andi	r24, 0xF7	; 247
    2adc:	8c 93       	st	X, r24
			/*set the initial value of counter*/
			TCNT0 = Config_Ptr->preload;
    2ade:	a2 e5       	ldi	r26, 0x52	; 82
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae6:	84 81       	ldd	r24, Z+4	; 0x04
    2ae8:	95 81       	ldd	r25, Z+5	; 0x05
    2aea:	8c 93       	st	X, r24
    2aec:	b4 c2       	rjmp	.+1384   	; 0x3056 <Timer_init+0x786>
			//PORTB = TIMSK;
			break;


		case CTC:
			SET_BIT(TCCR0,FOC0);
    2aee:	a3 e5       	ldi	r26, 0x53	; 83
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e3 e5       	ldi	r30, 0x53	; 83
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	80 68       	ori	r24, 0x80	; 128
    2afa:	8c 93       	st	X, r24
			SET_BIT(TCCR0 ,WGM01);
    2afc:	a3 e5       	ldi	r26, 0x53	; 83
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e3 e5       	ldi	r30, 0x53	; 83
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	88 60       	ori	r24, 0x08	; 8
    2b08:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 ,WGM00);
    2b0a:	a3 e5       	ldi	r26, 0x53	; 83
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e3 e5       	ldi	r30, 0x53	; 83
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	8f 7b       	andi	r24, 0xBF	; 191
    2b16:	8c 93       	st	X, r24
			/*set the initial value of counter*/
			TCNT0 = Config_Ptr->preload;
    2b18:	a2 e5       	ldi	r26, 0x52	; 82
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b20:	84 81       	ldd	r24, Z+4	; 0x04
    2b22:	95 81       	ldd	r25, Z+5	; 0x05
    2b24:	8c 93       	st	X, r24
			/*set the value to generate interrupt signal on it*/
			OCR0 = Config_Ptr->OCR;
    2b26:	ac e5       	ldi	r26, 0x5C	; 92
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2e:	80 85       	ldd	r24, Z+8	; 0x08
    2b30:	91 85       	ldd	r25, Z+9	; 0x09
    2b32:	8c 93       	st	X, r24
    2b34:	90 c2       	rjmp	.+1312   	; 0x3056 <Timer_init+0x786>
			break;


			/*mode to generate PWM signal*/
		case FastPWM:/*non inverted mode*/
			SET_BIT(TCCR0 ,WGM01);
    2b36:	a3 e5       	ldi	r26, 0x53	; 83
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e3 e5       	ldi	r30, 0x53	; 83
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	88 60       	ori	r24, 0x08	; 8
    2b42:	8c 93       	st	X, r24
			SET_BIT(TCCR0 ,WGM00);
    2b44:	a3 e5       	ldi	r26, 0x53	; 83
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e3 e5       	ldi	r30, 0x53	; 83
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	80 64       	ori	r24, 0x40	; 64
    2b50:	8c 93       	st	X, r24
			/*set the initial value of counter*/
			TCNT0 = Config_Ptr->preload;
    2b52:	a2 e5       	ldi	r26, 0x52	; 82
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	e9 81       	ldd	r30, Y+1	; 0x01
    2b58:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5a:	84 81       	ldd	r24, Z+4	; 0x04
    2b5c:	95 81       	ldd	r25, Z+5	; 0x05
    2b5e:	8c 93       	st	X, r24
			/*set the value to generate interrupt signal on it*/
			OCR0 = Config_Ptr->OCR;
    2b60:	ac e5       	ldi	r26, 0x5C	; 92
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	e9 81       	ldd	r30, Y+1	; 0x01
    2b66:	fa 81       	ldd	r31, Y+2	; 0x02
    2b68:	80 85       	ldd	r24, Z+8	; 0x08
    2b6a:	91 85       	ldd	r25, Z+9	; 0x09
    2b6c:	8c 93       	st	X, r24
			//non inverted mode.
			SET_BIT(TCCR0,COM01);
    2b6e:	a3 e5       	ldi	r26, 0x53	; 83
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e3 e5       	ldi	r30, 0x53	; 83
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	80 62       	ori	r24, 0x20	; 32
    2b7a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM00);
    2b7c:	a3 e5       	ldi	r26, 0x53	; 83
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e3 e5       	ldi	r30, 0x53	; 83
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8f 7e       	andi	r24, 0xEF	; 239
    2b88:	8c 93       	st	X, r24
    2b8a:	65 c2       	rjmp	.+1226   	; 0x3056 <Timer_init+0x786>
			break;


			/*counter mode which count specific event that happen*/
		case counter:
			SET_BIT(TCCR0,FOC0);
    2b8c:	a3 e5       	ldi	r26, 0x53	; 83
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e3 e5       	ldi	r30, 0x53	; 83
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	80 68       	ori	r24, 0x80	; 128
    2b98:	8c 93       	st	X, r24
			SET_BIT(TCCR0 ,WGM01);
    2b9a:	a3 e5       	ldi	r26, 0x53	; 83
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e3 e5       	ldi	r30, 0x53	; 83
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	88 60       	ori	r24, 0x08	; 8
    2ba6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 ,WGM00);
    2ba8:	a3 e5       	ldi	r26, 0x53	; 83
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e3 e5       	ldi	r30, 0x53	; 83
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	8f 7b       	andi	r24, 0xBF	; 191
    2bb4:	8c 93       	st	X, r24
			/*set the initial value of counter*/
			TCNT0 = Config_Ptr->preload;
    2bb6:	a2 e5       	ldi	r26, 0x52	; 82
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bbe:	84 81       	ldd	r24, Z+4	; 0x04
    2bc0:	95 81       	ldd	r25, Z+5	; 0x05
    2bc2:	8c 93       	st	X, r24
			/*set the value to generate interrupt signal on it*/
			OCR0 = Config_Ptr->OCR;
    2bc4:	ac e5       	ldi	r26, 0x5C	; 92
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bca:	fa 81       	ldd	r31, Y+2	; 0x02
    2bcc:	80 85       	ldd	r24, Z+8	; 0x08
    2bce:	91 85       	ldd	r25, Z+9	; 0x09
    2bd0:	8c 93       	st	X, r24
			/*switch on which edge to increment counter on it*/
			switch(Config_Ptr->edge)
    2bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	28 2f       	mov	r18, r24
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	3a 87       	std	Y+10, r19	; 0x0a
    2bde:	29 87       	std	Y+9, r18	; 0x09
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	31 f0       	breq	.+12     	; 0x2bf4 <Timer_init+0x324>
    2be8:	29 85       	ldd	r18, Y+9	; 0x09
    2bea:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bec:	21 30       	cpi	r18, 0x01	; 1
    2bee:	31 05       	cpc	r19, r1
    2bf0:	b9 f0       	breq	.+46     	; 0x2c20 <Timer_init+0x350>
    2bf2:	31 c2       	rjmp	.+1122   	; 0x3056 <Timer_init+0x786>
			{
			case FALLING:
				CLEAR_BIT(TCCR0 , CS00);
    2bf4:	a3 e5       	ldi	r26, 0x53	; 83
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e3 e5       	ldi	r30, 0x53	; 83
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	8e 7f       	andi	r24, 0xFE	; 254
    2c00:	8c 93       	st	X, r24
				SET_BIT(TCCR0 , CS01);
    2c02:	a3 e5       	ldi	r26, 0x53	; 83
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e3 e5       	ldi	r30, 0x53	; 83
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	82 60       	ori	r24, 0x02	; 2
    2c0e:	8c 93       	st	X, r24
				SET_BIT(TCCR0 , CS02);
    2c10:	a3 e5       	ldi	r26, 0x53	; 83
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	e3 e5       	ldi	r30, 0x53	; 83
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	84 60       	ori	r24, 0x04	; 4
    2c1c:	8c 93       	st	X, r24
    2c1e:	1b c2       	rjmp	.+1078   	; 0x3056 <Timer_init+0x786>
				break;
			case RISING:
				SET_BIT(TCCR0 , CS00);
    2c20:	a3 e5       	ldi	r26, 0x53	; 83
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e3 e5       	ldi	r30, 0x53	; 83
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	81 60       	ori	r24, 0x01	; 1
    2c2c:	8c 93       	st	X, r24
				SET_BIT(TCCR0 , CS01);
    2c2e:	a3 e5       	ldi	r26, 0x53	; 83
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e3 e5       	ldi	r30, 0x53	; 83
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	82 60       	ori	r24, 0x02	; 2
    2c3a:	8c 93       	st	X, r24
				SET_BIT(TCCR0 , CS02);
    2c3c:	a3 e5       	ldi	r26, 0x53	; 83
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e3 e5       	ldi	r30, 0x53	; 83
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	84 60       	ori	r24, 0x04	; 4
    2c48:	8c 93       	st	X, r24
    2c4a:	05 c2       	rjmp	.+1034   	; 0x3056 <Timer_init+0x786>

		/********************************************************************/
		/*Timer 1*/
		/********************************************************************/
		case TIMER_1:
			SET_BIT(PORTB,0);
    2c4c:	a8 e3       	ldi	r26, 0x38	; 56
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e8 e3       	ldi	r30, 0x38	; 56
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	81 60       	ori	r24, 0x01	; 1
    2c58:	8c 93       	st	X, r24
			/*switch on clock devision factor of Timer_1 Clock */
			switch(Config_Ptr->prescaler)
    2c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5e:	80 81       	ld	r24, Z
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	38 87       	std	Y+8, r19	; 0x08
    2c66:	2f 83       	std	Y+7, r18	; 0x07
    2c68:	8f 81       	ldd	r24, Y+7	; 0x07
    2c6a:	98 85       	ldd	r25, Y+8	; 0x08
    2c6c:	82 30       	cpi	r24, 0x02	; 2
    2c6e:	91 05       	cpc	r25, r1
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <Timer_init+0x3a4>
    2c72:	6a c0       	rjmp	.+212    	; 0x2d48 <Timer_init+0x478>
    2c74:	2f 81       	ldd	r18, Y+7	; 0x07
    2c76:	38 85       	ldd	r19, Y+8	; 0x08
    2c78:	23 30       	cpi	r18, 0x03	; 3
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	64 f4       	brge	.+24     	; 0x2c96 <Timer_init+0x3c6>
    2c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2c80:	98 85       	ldd	r25, Y+8	; 0x08
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <Timer_init+0x3b8>
    2c86:	8c c0       	rjmp	.+280    	; 0x2da0 <Timer_init+0x4d0>
    2c88:	2f 81       	ldd	r18, Y+7	; 0x07
    2c8a:	38 85       	ldd	r19, Y+8	; 0x08
    2c8c:	21 30       	cpi	r18, 0x01	; 1
    2c8e:	31 05       	cpc	r19, r1
    2c90:	09 f4       	brne	.+2      	; 0x2c94 <Timer_init+0x3c4>
    2c92:	70 c0       	rjmp	.+224    	; 0x2d74 <Timer_init+0x4a4>
    2c94:	9a c0       	rjmp	.+308    	; 0x2dca <Timer_init+0x4fa>
    2c96:	8f 81       	ldd	r24, Y+7	; 0x07
    2c98:	98 85       	ldd	r25, Y+8	; 0x08
    2c9a:	84 30       	cpi	r24, 0x04	; 4
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	59 f0       	breq	.+22     	; 0x2cb6 <Timer_init+0x3e6>
    2ca0:	2f 81       	ldd	r18, Y+7	; 0x07
    2ca2:	38 85       	ldd	r19, Y+8	; 0x08
    2ca4:	24 30       	cpi	r18, 0x04	; 4
    2ca6:	31 05       	cpc	r19, r1
    2ca8:	cc f1       	brlt	.+114    	; 0x2d1c <Timer_init+0x44c>
    2caa:	8f 81       	ldd	r24, Y+7	; 0x07
    2cac:	98 85       	ldd	r25, Y+8	; 0x08
    2cae:	85 30       	cpi	r24, 0x05	; 5
    2cb0:	91 05       	cpc	r25, r1
    2cb2:	b9 f0       	breq	.+46     	; 0x2ce2 <Timer_init+0x412>
    2cb4:	8a c0       	rjmp	.+276    	; 0x2dca <Timer_init+0x4fa>
			{
			case F_CPU_256:
				CLEAR_BIT(TCCR1B , CS10);
    2cb6:	ae e4       	ldi	r26, 0x4E	; 78
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	ee e4       	ldi	r30, 0x4E	; 78
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	8e 7f       	andi	r24, 0xFE	; 254
    2cc2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS11);
    2cc4:	ae e4       	ldi	r26, 0x4E	; 78
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	ee e4       	ldi	r30, 0x4E	; 78
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	8d 7f       	andi	r24, 0xFD	; 253
    2cd0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B , CS12);
    2cd2:	ae e4       	ldi	r26, 0x4E	; 78
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	ee e4       	ldi	r30, 0x4E	; 78
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	84 60       	ori	r24, 0x04	; 4
    2cde:	8c 93       	st	X, r24
    2ce0:	74 c0       	rjmp	.+232    	; 0x2dca <Timer_init+0x4fa>
				break;
			case F_CPU_1024:
				SET_BIT(PORTB,1);
    2ce2:	a8 e3       	ldi	r26, 0x38	; 56
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	e8 e3       	ldi	r30, 0x38	; 56
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	82 60       	ori	r24, 0x02	; 2
    2cee:	8c 93       	st	X, r24
				SET_BIT(TCCR1B , CS10);
    2cf0:	ae e4       	ldi	r26, 0x4E	; 78
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	ee e4       	ldi	r30, 0x4E	; 78
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	81 60       	ori	r24, 0x01	; 1
    2cfc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS11);
    2cfe:	ae e4       	ldi	r26, 0x4E	; 78
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	ee e4       	ldi	r30, 0x4E	; 78
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	8d 7f       	andi	r24, 0xFD	; 253
    2d0a:	8c 93       	st	X, r24
				SET_BIT(TCCR1B , CS12);
    2d0c:	ae e4       	ldi	r26, 0x4E	; 78
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	ee e4       	ldi	r30, 0x4E	; 78
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	84 60       	ori	r24, 0x04	; 4
    2d18:	8c 93       	st	X, r24
    2d1a:	57 c0       	rjmp	.+174    	; 0x2dca <Timer_init+0x4fa>
				break;

			case F_CPU_64:
				SET_BIT(TCCR1B , CS10);
    2d1c:	ae e4       	ldi	r26, 0x4E	; 78
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	ee e4       	ldi	r30, 0x4E	; 78
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	81 60       	ori	r24, 0x01	; 1
    2d28:	8c 93       	st	X, r24
				SET_BIT(TCCR1B , CS11);
    2d2a:	ae e4       	ldi	r26, 0x4E	; 78
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	ee e4       	ldi	r30, 0x4E	; 78
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	82 60       	ori	r24, 0x02	; 2
    2d36:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS12);
    2d38:	ae e4       	ldi	r26, 0x4E	; 78
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	ee e4       	ldi	r30, 0x4E	; 78
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	8b 7f       	andi	r24, 0xFB	; 251
    2d44:	8c 93       	st	X, r24
    2d46:	41 c0       	rjmp	.+130    	; 0x2dca <Timer_init+0x4fa>
				break;

			case F_CPU_8:
				CLEAR_BIT(TCCR1B , CS10);
    2d48:	ae e4       	ldi	r26, 0x4E	; 78
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	ee e4       	ldi	r30, 0x4E	; 78
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	8e 7f       	andi	r24, 0xFE	; 254
    2d54:	8c 93       	st	X, r24
				SET_BIT(TCCR1B , CS11);
    2d56:	ae e4       	ldi	r26, 0x4E	; 78
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	ee e4       	ldi	r30, 0x4E	; 78
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	82 60       	ori	r24, 0x02	; 2
    2d62:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS12);
    2d64:	ae e4       	ldi	r26, 0x4E	; 78
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	ee e4       	ldi	r30, 0x4E	; 78
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	8b 7f       	andi	r24, 0xFB	; 251
    2d70:	8c 93       	st	X, r24
    2d72:	2b c0       	rjmp	.+86     	; 0x2dca <Timer_init+0x4fa>
				break;

			case F_CPU_1:
				SET_BIT(TCCR1B , CS10);
    2d74:	ae e4       	ldi	r26, 0x4E	; 78
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	ee e4       	ldi	r30, 0x4E	; 78
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	81 60       	ori	r24, 0x01	; 1
    2d80:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS11);
    2d82:	ae e4       	ldi	r26, 0x4E	; 78
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	ee e4       	ldi	r30, 0x4E	; 78
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	8d 7f       	andi	r24, 0xFD	; 253
    2d8e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS12);
    2d90:	ae e4       	ldi	r26, 0x4E	; 78
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	ee e4       	ldi	r30, 0x4E	; 78
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	8b 7f       	andi	r24, 0xFB	; 251
    2d9c:	8c 93       	st	X, r24
    2d9e:	15 c0       	rjmp	.+42     	; 0x2dca <Timer_init+0x4fa>
				break;
			case NO_CLOCK:
				CLEAR_BIT(TCCR1B , CS10);
    2da0:	ae e4       	ldi	r26, 0x4E	; 78
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	ee e4       	ldi	r30, 0x4E	; 78
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	8e 7f       	andi	r24, 0xFE	; 254
    2dac:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS11);
    2dae:	ae e4       	ldi	r26, 0x4E	; 78
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	ee e4       	ldi	r30, 0x4E	; 78
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	8d 7f       	andi	r24, 0xFD	; 253
    2dba:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS12);
    2dbc:	ae e4       	ldi	r26, 0x4E	; 78
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	ee e4       	ldi	r30, 0x4E	; 78
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	8b 7f       	andi	r24, 0xFB	; 251
    2dc8:	8c 93       	st	X, r24
				break;
			}
			switch(Config_Ptr->mode)
    2dca:	e9 81       	ldd	r30, Y+1	; 0x01
    2dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dce:	83 81       	ldd	r24, Z+3	; 0x03
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	3e 83       	std	Y+6, r19	; 0x06
    2dd6:	2d 83       	std	Y+5, r18	; 0x05
    2dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dda:	9e 81       	ldd	r25, Y+6	; 0x06
    2ddc:	81 30       	cpi	r24, 0x01	; 1
    2dde:	91 05       	cpc	r25, r1
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <Timer_init+0x514>
    2de2:	52 c0       	rjmp	.+164    	; 0x2e88 <Timer_init+0x5b8>
    2de4:	2d 81       	ldd	r18, Y+5	; 0x05
    2de6:	3e 81       	ldd	r19, Y+6	; 0x06
    2de8:	22 30       	cpi	r18, 0x02	; 2
    2dea:	31 05       	cpc	r19, r1
    2dec:	2c f4       	brge	.+10     	; 0x2df8 <Timer_init+0x528>
    2dee:	8d 81       	ldd	r24, Y+5	; 0x05
    2df0:	9e 81       	ldd	r25, Y+6	; 0x06
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	71 f0       	breq	.+28     	; 0x2e12 <Timer_init+0x542>
    2df6:	2f c1       	rjmp	.+606    	; 0x3056 <Timer_init+0x786>
    2df8:	2d 81       	ldd	r18, Y+5	; 0x05
    2dfa:	3e 81       	ldd	r19, Y+6	; 0x06
    2dfc:	22 30       	cpi	r18, 0x02	; 2
    2dfe:	31 05       	cpc	r19, r1
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <Timer_init+0x534>
    2e02:	71 c0       	rjmp	.+226    	; 0x2ee6 <Timer_init+0x616>
    2e04:	8d 81       	ldd	r24, Y+5	; 0x05
    2e06:	9e 81       	ldd	r25, Y+6	; 0x06
    2e08:	83 30       	cpi	r24, 0x03	; 3
    2e0a:	91 05       	cpc	r25, r1
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <Timer_init+0x540>
    2e0e:	9d c0       	rjmp	.+314    	; 0x2f4a <Timer_init+0x67a>
    2e10:	22 c1       	rjmp	.+580    	; 0x3056 <Timer_init+0x786>
			{
			case Normal:
				SET_BIT(TCCR1A,FOC1A);
    2e12:	af e4       	ldi	r26, 0x4F	; 79
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	ef e4       	ldi	r30, 0x4F	; 79
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	88 60       	ori	r24, 0x08	; 8
    2e1e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,FOC1B);
    2e20:	af e4       	ldi	r26, 0x4F	; 79
    2e22:	b0 e0       	ldi	r27, 0x00	; 0
    2e24:	ef e4       	ldi	r30, 0x4F	; 79
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	84 60       	ori	r24, 0x04	; 4
    2e2c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A ,WGM10);
    2e2e:	af e4       	ldi	r26, 0x4F	; 79
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	ef e4       	ldi	r30, 0x4F	; 79
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	8e 7f       	andi	r24, 0xFE	; 254
    2e3a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A ,WGM11);
    2e3c:	af e4       	ldi	r26, 0x4F	; 79
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	ef e4       	ldi	r30, 0x4F	; 79
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	8d 7f       	andi	r24, 0xFD	; 253
    2e48:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B ,WGM12);
    2e4a:	ae e4       	ldi	r26, 0x4E	; 78
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	ee e4       	ldi	r30, 0x4E	; 78
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	87 7f       	andi	r24, 0xF7	; 247
    2e56:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B ,WGM13);
    2e58:	ae e4       	ldi	r26, 0x4E	; 78
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	ee e4       	ldi	r30, 0x4E	; 78
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	8f 7e       	andi	r24, 0xEF	; 239
    2e64:	8c 93       	st	X, r24
				/*set the initial value of the 16 bits register of counter*/
				TCNT1H = (Config_Ptr->preload>>8);
    2e66:	ad e4       	ldi	r26, 0x4D	; 77
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e6e:	84 81       	ldd	r24, Z+4	; 0x04
    2e70:	95 81       	ldd	r25, Z+5	; 0x05
    2e72:	89 2f       	mov	r24, r25
    2e74:	99 27       	eor	r25, r25
    2e76:	8c 93       	st	X, r24
				TCNT1L = (Config_Ptr->preload);
    2e78:	ac e4       	ldi	r26, 0x4C	; 76
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e80:	84 81       	ldd	r24, Z+4	; 0x04
    2e82:	95 81       	ldd	r25, Z+5	; 0x05
    2e84:	8c 93       	st	X, r24
    2e86:	e7 c0       	rjmp	.+462    	; 0x3056 <Timer_init+0x786>
				break;


			case CTC: //OCR not ICR
				SET_BIT(PORTB,2);
    2e88:	a8 e3       	ldi	r26, 0x38	; 56
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e8 e3       	ldi	r30, 0x38	; 56
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	84 60       	ori	r24, 0x04	; 4
    2e94:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,FOC1A);
    2e96:	af e4       	ldi	r26, 0x4F	; 79
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	ef e4       	ldi	r30, 0x4F	; 79
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	88 60       	ori	r24, 0x08	; 8
    2ea2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,FOC1B);
    2ea4:	af e4       	ldi	r26, 0x4F	; 79
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	ef e4       	ldi	r30, 0x4F	; 79
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	84 60       	ori	r24, 0x04	; 4
    2eb0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B ,WGM12);
    2eb2:	ae e4       	ldi	r26, 0x4E	; 78
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	ee e4       	ldi	r30, 0x4E	; 78
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	80 81       	ld	r24, Z
    2ebc:	88 60       	ori	r24, 0x08	; 8
    2ebe:	8c 93       	st	X, r24
				/*set the initial value of the 16 bits register of counter*/
				TCNT1 = Config_Ptr->preload;
    2ec0:	ac e4       	ldi	r26, 0x4C	; 76
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec8:	84 81       	ldd	r24, Z+4	; 0x04
    2eca:	95 81       	ldd	r25, Z+5	; 0x05
    2ecc:	11 96       	adiw	r26, 0x01	; 1
    2ece:	9c 93       	st	X, r25
    2ed0:	8e 93       	st	-X, r24
				/*set value to be the maximum value which generate interrupt on it*/
				OCR1A=Config_Ptr->OCR;
    2ed2:	aa e4       	ldi	r26, 0x4A	; 74
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eda:	80 85       	ldd	r24, Z+8	; 0x08
    2edc:	91 85       	ldd	r25, Z+9	; 0x09
    2ede:	11 96       	adiw	r26, 0x01	; 1
    2ee0:	9c 93       	st	X, r25
    2ee2:	8e 93       	st	-X, r24
    2ee4:	b8 c0       	rjmp	.+368    	; 0x3056 <Timer_init+0x786>

			case FastPWM://non inverted mode.

				// mode 14 ICR value is the top value.
				//OCR1A
				CLEAR_BIT(TCCR1A ,WGM10);
    2ee6:	af e4       	ldi	r26, 0x4F	; 79
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	ef e4       	ldi	r30, 0x4F	; 79
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	8e 7f       	andi	r24, 0xFE	; 254
    2ef2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A ,WGM11);
    2ef4:	af e4       	ldi	r26, 0x4F	; 79
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	ef e4       	ldi	r30, 0x4F	; 79
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	82 60       	ori	r24, 0x02	; 2
    2f00:	8c 93       	st	X, r24
				SET_BIT(TCCR1B ,WGM12);
    2f02:	ae e4       	ldi	r26, 0x4E	; 78
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	ee e4       	ldi	r30, 0x4E	; 78
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	88 60       	ori	r24, 0x08	; 8
    2f0e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B ,WGM13);
    2f10:	ae e4       	ldi	r26, 0x4E	; 78
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	ee e4       	ldi	r30, 0x4E	; 78
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	80 61       	ori	r24, 0x10	; 16
    2f1c:	8c 93       	st	X, r24
				ICR1L = Config_Ptr->ICR;
    2f1e:	a6 e4       	ldi	r26, 0x46	; 70
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e9 81       	ldd	r30, Y+1	; 0x01
    2f24:	fa 81       	ldd	r31, Y+2	; 0x02
    2f26:	86 81       	ldd	r24, Z+6	; 0x06
    2f28:	97 81       	ldd	r25, Z+7	; 0x07
    2f2a:	8c 93       	st	X, r24
				//non inverted mode.
				SET_BIT(TCCR1A,COM1A1);
    2f2c:	af e4       	ldi	r26, 0x4F	; 79
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	ef e4       	ldi	r30, 0x4F	; 79
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	80 68       	ori	r24, 0x80	; 128
    2f38:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A0);
    2f3a:	af e4       	ldi	r26, 0x4F	; 79
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	ef e4       	ldi	r30, 0x4F	; 79
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	8f 7b       	andi	r24, 0xBF	; 191
    2f46:	8c 93       	st	X, r24
    2f48:	86 c0       	rjmp	.+268    	; 0x3056 <Timer_init+0x786>
				break;

			case counter:
				SET_BIT(TCCR1A,FOC1A);
    2f4a:	af e4       	ldi	r26, 0x4F	; 79
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	ef e4       	ldi	r30, 0x4F	; 79
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	80 81       	ld	r24, Z
    2f54:	88 60       	ori	r24, 0x08	; 8
    2f56:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,FOC1B);
    2f58:	af e4       	ldi	r26, 0x4F	; 79
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	ef e4       	ldi	r30, 0x4F	; 79
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	84 60       	ori	r24, 0x04	; 4
    2f64:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A ,WGM10);
    2f66:	af e4       	ldi	r26, 0x4F	; 79
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	ef e4       	ldi	r30, 0x4F	; 79
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	8e 7f       	andi	r24, 0xFE	; 254
    2f72:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A ,WGM11);
    2f74:	af e4       	ldi	r26, 0x4F	; 79
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	ef e4       	ldi	r30, 0x4F	; 79
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	8d 7f       	andi	r24, 0xFD	; 253
    2f80:	8c 93       	st	X, r24
				SET_BIT(TCCR1B ,WGM12);
    2f82:	ae e4       	ldi	r26, 0x4E	; 78
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	ee e4       	ldi	r30, 0x4E	; 78
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	88 60       	ori	r24, 0x08	; 8
    2f8e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B ,WGM13);
    2f90:	ae e4       	ldi	r26, 0x4E	; 78
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	ee e4       	ldi	r30, 0x4E	; 78
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	8f 7e       	andi	r24, 0xEF	; 239
    2f9c:	8c 93       	st	X, r24
				/*set the initial value of the 16 bits register of counter*/
				TCNT1H = (Config_Ptr->preload>>8);
    2f9e:	ad e4       	ldi	r26, 0x4D	; 77
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa6:	84 81       	ldd	r24, Z+4	; 0x04
    2fa8:	95 81       	ldd	r25, Z+5	; 0x05
    2faa:	89 2f       	mov	r24, r25
    2fac:	99 27       	eor	r25, r25
    2fae:	8c 93       	st	X, r24
				TCNT1L = (Config_Ptr->preload);
    2fb0:	ac e4       	ldi	r26, 0x4C	; 76
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb8:	84 81       	ldd	r24, Z+4	; 0x04
    2fba:	95 81       	ldd	r25, Z+5	; 0x05
    2fbc:	8c 93       	st	X, r24
				/*set value to be the maximum value which generate interrupt on it*/
				OCR1AH = (Config_Ptr->OCR>>8);
    2fbe:	ab e4       	ldi	r26, 0x4B	; 75
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc6:	80 85       	ldd	r24, Z+8	; 0x08
    2fc8:	91 85       	ldd	r25, Z+9	; 0x09
    2fca:	89 2f       	mov	r24, r25
    2fcc:	99 27       	eor	r25, r25
    2fce:	8c 93       	st	X, r24
				OCR1AL = Config_Ptr->OCR; /* OCFA is the interrupt flag*/
    2fd0:	aa e4       	ldi	r26, 0x4A	; 74
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd8:	80 85       	ldd	r24, Z+8	; 0x08
    2fda:	91 85       	ldd	r25, Z+9	; 0x09
    2fdc:	8c 93       	st	X, r24
				switch(Config_Ptr->edge)
    2fde:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	28 2f       	mov	r18, r24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	3c 83       	std	Y+4, r19	; 0x04
    2fea:	2b 83       	std	Y+3, r18	; 0x03
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	31 f0       	breq	.+12     	; 0x3000 <Timer_init+0x730>
    2ff4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ff6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ff8:	21 30       	cpi	r18, 0x01	; 1
    2ffa:	31 05       	cpc	r19, r1
    2ffc:	b9 f0       	breq	.+46     	; 0x302c <Timer_init+0x75c>
    2ffe:	2b c0       	rjmp	.+86     	; 0x3056 <Timer_init+0x786>
				{
				case FALLING:
					CLEAR_BIT(TCCR1B , CS10);
    3000:	ae e4       	ldi	r26, 0x4E	; 78
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	ee e4       	ldi	r30, 0x4E	; 78
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	8e 7f       	andi	r24, 0xFE	; 254
    300c:	8c 93       	st	X, r24
					SET_BIT(TCCR1B , CS11);
    300e:	ae e4       	ldi	r26, 0x4E	; 78
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	ee e4       	ldi	r30, 0x4E	; 78
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	82 60       	ori	r24, 0x02	; 2
    301a:	8c 93       	st	X, r24
					SET_BIT(TCCR1B , CS12);
    301c:	ae e4       	ldi	r26, 0x4E	; 78
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	ee e4       	ldi	r30, 0x4E	; 78
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	84 60       	ori	r24, 0x04	; 4
    3028:	8c 93       	st	X, r24
    302a:	15 c0       	rjmp	.+42     	; 0x3056 <Timer_init+0x786>
					break;
				case RISING:
					SET_BIT(TCCR1B , CS10);
    302c:	ae e4       	ldi	r26, 0x4E	; 78
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	ee e4       	ldi	r30, 0x4E	; 78
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	81 60       	ori	r24, 0x01	; 1
    3038:	8c 93       	st	X, r24
					SET_BIT(TCCR1B , CS11);
    303a:	ae e4       	ldi	r26, 0x4E	; 78
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	ee e4       	ldi	r30, 0x4E	; 78
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	82 60       	ori	r24, 0x02	; 2
    3046:	8c 93       	st	X, r24
					SET_BIT(TCCR1B , CS12);
    3048:	ae e4       	ldi	r26, 0x4E	; 78
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	ee e4       	ldi	r30, 0x4E	; 78
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	84 60       	ori	r24, 0x04	; 4
    3054:	8c 93       	st	X, r24

			}
			break;
	}

}
    3056:	60 96       	adiw	r28, 0x10	; 16
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3070:	eb e2       	ldi	r30, 0x2B	; 43
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	82 e0       	ldi	r24, 0x02	; 2
    3076:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3078:	ea e2       	ldi	r30, 0x2A	; 42
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	88 e1       	ldi	r24, 0x18	; 24
    307e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3080:	e0 e4       	ldi	r30, 0x40	; 64
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	86 e8       	ldi	r24, 0x86	; 134
    3086:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    3088:	e0 e4       	ldi	r30, 0x40	; 64
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    308e:	e9 e2       	ldi	r30, 0x29	; 41
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	8c e0       	ldi	r24, 0x0C	; 12
    3094:	80 83       	st	Z, r24
}
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <UART_init_With_Interrupt>:
void UART_init_With_Interrupt(void)
{
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    30a4:	eb e2       	ldi	r30, 0x2B	; 43
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	82 e0       	ldi	r24, 0x02	; 2
    30aa:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN)|(1<<RXCIE);
    30ac:	ea e2       	ldi	r30, 0x2A	; 42
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	88 e9       	ldi	r24, 0x98	; 152
    30b2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    30b4:	e0 e4       	ldi	r30, 0x40	; 64
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	86 e8       	ldi	r24, 0x86	; 134
    30ba:	80 83       	st	Z, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    30bc:	e0 e4       	ldi	r30, 0x40	; 64
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    30c2:	e9 e2       	ldi	r30, 0x29	; 41
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	8c e0       	ldi	r24, 0x0C	; 12
    30c8:	80 83       	st	Z, r24
}
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <UART_Deinit>:
void UART_Deinit(void)
{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
	/*return all UART Registers to its defualt values*/
	UCSRA = (1<<UDRE);
    30d8:	eb e2       	ldi	r30, 0x2B	; 43
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 e2       	ldi	r24, 0x20	; 32
    30de:	80 83       	st	Z, r24
	UCSRB = 0;
    30e0:	ea e2       	ldi	r30, 0x2A	; 42
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	10 82       	st	Z, r1
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    30e6:	e0 e4       	ldi	r30, 0x40	; 64
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	86 e8       	ldi	r24, 0x86	; 134
    30ec:	80 83       	st	Z, r24
	}
    30ee:	cf 91       	pop	r28
    30f0:	df 91       	pop	r29
    30f2:	08 95       	ret

000030f4 <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	0f 92       	push	r0
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3100:	eb e2       	ldi	r30, 0x2B	; 43
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	88 2f       	mov	r24, r24
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	80 72       	andi	r24, 0x20	; 32
    310c:	90 70       	andi	r25, 0x00	; 0
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	b9 f3       	breq	.-18     	; 0x3100 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    3112:	ec e2       	ldi	r30, 0x2C	; 44
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    311a:	0f 90       	pop	r0
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    312a:	eb e2       	ldi	r30, 0x2B	; 43
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	88 23       	and	r24, r24
    3132:	dc f7       	brge	.-10     	; 0x312a <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    3134:	ec e2       	ldi	r30, 0x2C	; 44
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
}
    313a:	cf 91       	pop	r28
    313c:	df 91       	pop	r29
    313e:	08 95       	ret

00003140 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    3140:	df 93       	push	r29
    3142:	cf 93       	push	r28
    3144:	00 d0       	rcall	.+0      	; 0x3146 <UART_sendString+0x6>
    3146:	0f 92       	push	r0
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	9b 83       	std	Y+3, r25	; 0x03
    314e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3150:	19 82       	std	Y+1, r1	; 0x01
    3152:	0e c0       	rjmp	.+28     	; 0x3170 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	28 2f       	mov	r18, r24
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	8a 81       	ldd	r24, Y+2	; 0x02
    315c:	9b 81       	ldd	r25, Y+3	; 0x03
    315e:	fc 01       	movw	r30, r24
    3160:	e2 0f       	add	r30, r18
    3162:	f3 1f       	adc	r31, r19
    3164:	80 81       	ld	r24, Z
    3166:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <UART_sendByte>
		i++;
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	8f 5f       	subi	r24, 0xFF	; 255
    316e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	28 2f       	mov	r18, r24
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	8a 81       	ldd	r24, Y+2	; 0x02
    3178:	9b 81       	ldd	r25, Y+3	; 0x03
    317a:	fc 01       	movw	r30, r24
    317c:	e2 0f       	add	r30, r18
    317e:	f3 1f       	adc	r31, r19
    3180:	80 81       	ld	r24, Z
    3182:	88 23       	and	r24, r24
    3184:	39 f7       	brne	.-50     	; 0x3154 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	08 95       	ret

00003192 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    3192:	0f 93       	push	r16
    3194:	1f 93       	push	r17
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	00 d0       	rcall	.+0      	; 0x319c <UART_receiveString+0xa>
    319c:	0f 92       	push	r0
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	9b 83       	std	Y+3, r25	; 0x03
    31a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31a6:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	28 2f       	mov	r18, r24
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	8a 81       	ldd	r24, Y+2	; 0x02
    31b0:	9b 81       	ldd	r25, Y+3	; 0x03
    31b2:	8c 01       	movw	r16, r24
    31b4:	02 0f       	add	r16, r18
    31b6:	13 1f       	adc	r17, r19
    31b8:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_recieveByte>
    31bc:	f8 01       	movw	r30, r16
    31be:	80 83       	st	Z, r24
    31c0:	0f c0       	rjmp	.+30     	; 0x31e0 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	8f 5f       	subi	r24, 0xFF	; 255
    31c6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	28 2f       	mov	r18, r24
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	9b 81       	ldd	r25, Y+3	; 0x03
    31d2:	8c 01       	movw	r16, r24
    31d4:	02 0f       	add	r16, r18
    31d6:	13 1f       	adc	r17, r19
    31d8:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_recieveByte>
    31dc:	f8 01       	movw	r30, r16
    31de:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	28 2f       	mov	r18, r24
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ea:	fc 01       	movw	r30, r24
    31ec:	e2 0f       	add	r30, r18
    31ee:	f3 1f       	adc	r31, r19
    31f0:	80 81       	ld	r24, Z
    31f2:	83 32       	cpi	r24, 0x23	; 35
    31f4:	31 f7       	brne	.-52     	; 0x31c2 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
    31fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3200:	fc 01       	movw	r30, r24
    3202:	e2 0f       	add	r30, r18
    3204:	f3 1f       	adc	r31, r19
    3206:	10 82       	st	Z, r1
}
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	cf 91       	pop	r28
    3210:	df 91       	pop	r29
    3212:	1f 91       	pop	r17
    3214:	0f 91       	pop	r16
    3216:	08 95       	ret

00003218 <__prologue_saves__>:
    3218:	2f 92       	push	r2
    321a:	3f 92       	push	r3
    321c:	4f 92       	push	r4
    321e:	5f 92       	push	r5
    3220:	6f 92       	push	r6
    3222:	7f 92       	push	r7
    3224:	8f 92       	push	r8
    3226:	9f 92       	push	r9
    3228:	af 92       	push	r10
    322a:	bf 92       	push	r11
    322c:	cf 92       	push	r12
    322e:	df 92       	push	r13
    3230:	ef 92       	push	r14
    3232:	ff 92       	push	r15
    3234:	0f 93       	push	r16
    3236:	1f 93       	push	r17
    3238:	cf 93       	push	r28
    323a:	df 93       	push	r29
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	ca 1b       	sub	r28, r26
    3242:	db 0b       	sbc	r29, r27
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	f8 94       	cli
    3248:	de bf       	out	0x3e, r29	; 62
    324a:	0f be       	out	0x3f, r0	; 63
    324c:	cd bf       	out	0x3d, r28	; 61
    324e:	09 94       	ijmp

00003250 <__epilogue_restores__>:
    3250:	2a 88       	ldd	r2, Y+18	; 0x12
    3252:	39 88       	ldd	r3, Y+17	; 0x11
    3254:	48 88       	ldd	r4, Y+16	; 0x10
    3256:	5f 84       	ldd	r5, Y+15	; 0x0f
    3258:	6e 84       	ldd	r6, Y+14	; 0x0e
    325a:	7d 84       	ldd	r7, Y+13	; 0x0d
    325c:	8c 84       	ldd	r8, Y+12	; 0x0c
    325e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3260:	aa 84       	ldd	r10, Y+10	; 0x0a
    3262:	b9 84       	ldd	r11, Y+9	; 0x09
    3264:	c8 84       	ldd	r12, Y+8	; 0x08
    3266:	df 80       	ldd	r13, Y+7	; 0x07
    3268:	ee 80       	ldd	r14, Y+6	; 0x06
    326a:	fd 80       	ldd	r15, Y+5	; 0x05
    326c:	0c 81       	ldd	r16, Y+4	; 0x04
    326e:	1b 81       	ldd	r17, Y+3	; 0x03
    3270:	aa 81       	ldd	r26, Y+2	; 0x02
    3272:	b9 81       	ldd	r27, Y+1	; 0x01
    3274:	ce 0f       	add	r28, r30
    3276:	d1 1d       	adc	r29, r1
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	ed 01       	movw	r28, r26
    3284:	08 95       	ret

00003286 <memcpy>:
    3286:	fb 01       	movw	r30, r22
    3288:	dc 01       	movw	r26, r24
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <memcpy+0xa>
    328c:	01 90       	ld	r0, Z+
    328e:	0d 92       	st	X+, r0
    3290:	41 50       	subi	r20, 0x01	; 1
    3292:	50 40       	sbci	r21, 0x00	; 0
    3294:	d8 f7       	brcc	.-10     	; 0x328c <memcpy+0x6>
    3296:	08 95       	ret

00003298 <itoa>:
    3298:	fb 01       	movw	r30, r22
    329a:	9f 01       	movw	r18, r30
    329c:	e8 94       	clt
    329e:	42 30       	cpi	r20, 0x02	; 2
    32a0:	c4 f0       	brlt	.+48     	; 0x32d2 <itoa+0x3a>
    32a2:	45 32       	cpi	r20, 0x25	; 37
    32a4:	b4 f4       	brge	.+44     	; 0x32d2 <itoa+0x3a>
    32a6:	4a 30       	cpi	r20, 0x0A	; 10
    32a8:	29 f4       	brne	.+10     	; 0x32b4 <itoa+0x1c>
    32aa:	97 fb       	bst	r25, 7
    32ac:	1e f4       	brtc	.+6      	; 0x32b4 <itoa+0x1c>
    32ae:	90 95       	com	r25
    32b0:	81 95       	neg	r24
    32b2:	9f 4f       	sbci	r25, 0xFF	; 255
    32b4:	64 2f       	mov	r22, r20
    32b6:	77 27       	eor	r23, r23
    32b8:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__udivmodhi4>
    32bc:	80 5d       	subi	r24, 0xD0	; 208
    32be:	8a 33       	cpi	r24, 0x3A	; 58
    32c0:	0c f0       	brlt	.+2      	; 0x32c4 <itoa+0x2c>
    32c2:	89 5d       	subi	r24, 0xD9	; 217
    32c4:	81 93       	st	Z+, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	a1 f7       	brne	.-24     	; 0x32b4 <itoa+0x1c>
    32cc:	16 f4       	brtc	.+4      	; 0x32d2 <itoa+0x3a>
    32ce:	5d e2       	ldi	r21, 0x2D	; 45
    32d0:	51 93       	st	Z+, r21
    32d2:	10 82       	st	Z, r1
    32d4:	c9 01       	movw	r24, r18
    32d6:	0c 94 6d 19 	jmp	0x32da	; 0x32da <strrev>

000032da <strrev>:
    32da:	dc 01       	movw	r26, r24
    32dc:	fc 01       	movw	r30, r24
    32de:	67 2f       	mov	r22, r23
    32e0:	71 91       	ld	r23, Z+
    32e2:	77 23       	and	r23, r23
    32e4:	e1 f7       	brne	.-8      	; 0x32de <strrev+0x4>
    32e6:	32 97       	sbiw	r30, 0x02	; 2
    32e8:	04 c0       	rjmp	.+8      	; 0x32f2 <strrev+0x18>
    32ea:	7c 91       	ld	r23, X
    32ec:	6d 93       	st	X+, r22
    32ee:	70 83       	st	Z, r23
    32f0:	62 91       	ld	r22, -Z
    32f2:	ae 17       	cp	r26, r30
    32f4:	bf 07       	cpc	r27, r31
    32f6:	c8 f3       	brcs	.-14     	; 0x32ea <strrev+0x10>
    32f8:	08 95       	ret

000032fa <__udivmodhi4>:
    32fa:	aa 1b       	sub	r26, r26
    32fc:	bb 1b       	sub	r27, r27
    32fe:	51 e1       	ldi	r21, 0x11	; 17
    3300:	07 c0       	rjmp	.+14     	; 0x3310 <__udivmodhi4_ep>

00003302 <__udivmodhi4_loop>:
    3302:	aa 1f       	adc	r26, r26
    3304:	bb 1f       	adc	r27, r27
    3306:	a6 17       	cp	r26, r22
    3308:	b7 07       	cpc	r27, r23
    330a:	10 f0       	brcs	.+4      	; 0x3310 <__udivmodhi4_ep>
    330c:	a6 1b       	sub	r26, r22
    330e:	b7 0b       	sbc	r27, r23

00003310 <__udivmodhi4_ep>:
    3310:	88 1f       	adc	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	5a 95       	dec	r21
    3316:	a9 f7       	brne	.-22     	; 0x3302 <__udivmodhi4_loop>
    3318:	80 95       	com	r24
    331a:	90 95       	com	r25
    331c:	bc 01       	movw	r22, r24
    331e:	cd 01       	movw	r24, r26
    3320:	08 95       	ret

00003322 <_exit>:
    3322:	f8 94       	cli

00003324 <__stop_program>:
    3324:	ff cf       	rjmp	.-2      	; 0x3324 <__stop_program>
