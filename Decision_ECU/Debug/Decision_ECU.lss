
Decision_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002322  000023b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007c  0080007c  000023d2  2**0
                  ALLOC
  3 .stab         000027fc  00000000  00000000  000023d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d4  00000000  00000000  00004bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009838  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009998  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8a 06 	call	0xd14	; 0xd14 <main>
      8a:	0c 94 8f 11 	jmp	0x231e	; 0x231e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_Timer_init>:
/*Description:function to initialize timer and buzzer
 * 1. init timer with number of seconds
 * 2.init buzzer I/O pins
 * 3.make buzzer on*/
void Buzzer_Timer_init(uint16 secs)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9e 87       	std	Y+14, r25	; 0x0e
     b5c:	8d 87       	std	Y+13, r24	; 0x0d
	/*Timer initialize*/
	/*global interrupt enable */
	SET_BIT(SREG,7);
     b5e:	af e5       	ldi	r26, 0x5F	; 95
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	ef e5       	ldi	r30, 0x5F	; 95
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	80 68       	ori	r24, 0x80	; 128
     b6a:	8c 93       	st	X, r24
	/*assign seconds to determined ISR logic*/
	g_numberOfSeconds = secs;
     b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b6e:	80 93 7d 00 	sts	0x007D, r24
	/*OCR value to make timer 1 generate compare interrupt on it*/
	uint16 OCR_Value = 977;
     b72:	81 ed       	ldi	r24, 0xD1	; 209
     b74:	93 e0       	ldi	r25, 0x03	; 3
     b76:	9a 83       	std	Y+2, r25	; 0x02
     b78:	89 83       	std	Y+1, r24	; 0x01
	 * timer mode CTC : to interrupt on compare match
	 * initial value =0
	 * ICR value =0
	 * OCR value :calculated above.
	 * */
	SET_BIT(TIMSK,OCIE1A);//set compare match interrupt Enable
     b7a:	a9 e5       	ldi	r26, 0x59	; 89
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e9 e5       	ldi	r30, 0x59	; 89
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	80 61       	ori	r24, 0x10	; 16
     b86:	8c 93       	st	X, r24
	Timer_ConfigType config = {F_CPU_1024,TIMER_1,NONE,CTC,0,0,OCR_Value};
     b88:	85 e0       	ldi	r24, 0x05	; 5
     b8a:	8b 83       	std	Y+3, r24	; 0x03
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	8c 83       	std	Y+4, r24	; 0x04
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	8d 83       	std	Y+5, r24	; 0x05
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	8e 83       	std	Y+6, r24	; 0x06
     b98:	18 86       	std	Y+8, r1	; 0x08
     b9a:	1f 82       	std	Y+7, r1	; 0x07
     b9c:	1a 86       	std	Y+10, r1	; 0x0a
     b9e:	19 86       	std	Y+9, r1	; 0x09
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	9c 87       	std	Y+12, r25	; 0x0c
     ba6:	8b 87       	std	Y+11, r24	; 0x0b
	Timer_init(&config);
     ba8:	ce 01       	movw	r24, r28
     baa:	03 96       	adiw	r24, 0x03	; 3
     bac:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <Timer_init>
	/*Buzzer initialize*/
	SET_BIT(Buzzer_PORT_DIR,Buzzer_Pin);
     bb0:	a1 e3       	ldi	r26, 0x31	; 49
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e1 e3       	ldi	r30, 0x31	; 49
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
	SET_BIT(Buzzer_PORT,Buzzer_Pin);
     bbe:	a2 e3       	ldi	r26, 0x32	; 50
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e2 e3       	ldi	r30, 0x32	; 50
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	8c 93       	st	X, r24
}
     bcc:	2e 96       	adiw	r28, 0x0e	; 14
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <Buzzer_Timer_Dinit>:
void Buzzer_Timer_Dinit(void)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	2f 97       	sbiw	r28, 0x0f	; 15
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
	 * timer mode CTC : to interrupt on compare match
	 * initial value =0
	 * ICR value =0
	 * OCR value :0.
	 * */
	CLEAR_BIT(TIMSK,OCIE1A);//clear compare match interrupt Enable
     bf2:	a9 e5       	ldi	r26, 0x59	; 89
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e9 e5       	ldi	r30, 0x59	; 89
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	8f 7e       	andi	r24, 0xEF	; 239
     bfe:	8c 93       	st	X, r24
	Timer_ConfigType config = {NO_CLOCK,TIMER_1,NONE,CTC,0,0,0};
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	9c 87       	std	Y+12, r25	; 0x0c
     c06:	8b 87       	std	Y+11, r24	; 0x0b
     c08:	e8 e6       	ldi	r30, 0x68	; 104
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	fe 87       	std	Y+14, r31	; 0x0e
     c0e:	ed 87       	std	Y+13, r30	; 0x0d
     c10:	fa e0       	ldi	r31, 0x0A	; 10
     c12:	ff 87       	std	Y+15, r31	; 0x0f
     c14:	ed 85       	ldd	r30, Y+13	; 0x0d
     c16:	fe 85       	ldd	r31, Y+14	; 0x0e
     c18:	00 80       	ld	r0, Z
     c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	9e 87       	std	Y+14, r25	; 0x0e
     c22:	8d 87       	std	Y+13, r24	; 0x0d
     c24:	eb 85       	ldd	r30, Y+11	; 0x0b
     c26:	fc 85       	ldd	r31, Y+12	; 0x0c
     c28:	00 82       	st	Z, r0
     c2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	9c 87       	std	Y+12, r25	; 0x0c
     c32:	8b 87       	std	Y+11, r24	; 0x0b
     c34:	9f 85       	ldd	r25, Y+15	; 0x0f
     c36:	91 50       	subi	r25, 0x01	; 1
     c38:	9f 87       	std	Y+15, r25	; 0x0f
     c3a:	ef 85       	ldd	r30, Y+15	; 0x0f
     c3c:	ee 23       	and	r30, r30
     c3e:	51 f7       	brne	.-44     	; 0xc14 <Buzzer_Timer_Dinit+0x36>
	Timer_init(&config);
     c40:	ce 01       	movw	r24, r28
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <Timer_init>
	/*Buzzer De_initialize*/
	CLEAR_BIT(Buzzer_PORT,Buzzer_Pin);
     c48:	a2 e3       	ldi	r26, 0x32	; 50
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e2 e3       	ldi	r30, 0x32	; 50
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8f 77       	andi	r24, 0x7F	; 127
     c54:	8c 93       	st	X, r24
}
     c56:	2f 96       	adiw	r28, 0x0f	; 15
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <__vector_6>:

/******************************************************************************
 * 						Interrupt Service Routines
 ******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
     c68:	1f 92       	push	r1
     c6a:	0f 92       	push	r0
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	0f 92       	push	r0
     c70:	11 24       	eor	r1, r1
     c72:	2f 93       	push	r18
     c74:	3f 93       	push	r19
     c76:	4f 93       	push	r20
     c78:	5f 93       	push	r21
     c7a:	6f 93       	push	r22
     c7c:	7f 93       	push	r23
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	af 93       	push	r26
     c84:	bf 93       	push	r27
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	static uint8 Timer_Counter =0;
	Timer_Counter++;/*increment number of seconds*/
     c92:	80 91 7c 00 	lds	r24, 0x007C
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	80 93 7c 00 	sts	0x007C, r24
	if(g_numberOfSeconds == 15 && Timer_Counter ==15)
     c9c:	80 91 7d 00 	lds	r24, 0x007D
     ca0:	8f 30       	cpi	r24, 0x0F	; 15
     ca2:	61 f4       	brne	.+24     	; 0xcbc <__vector_6+0x54>
     ca4:	80 91 7c 00 	lds	r24, 0x007C
     ca8:	8f 30       	cpi	r24, 0x0F	; 15
     caa:	41 f4       	brne	.+16     	; 0xcbc <__vector_6+0x54>
	{
		/*De_initialize Motor Timer to stop clock of timer*/
		Motor_Timer_Dinit();
     cac:	0e 94 72 07 	call	0xee4	; 0xee4 <Motor_Timer_Dinit>
		/*initialize timer to Rotate Motor for 15 seconds*/
		Motor_Timer_init(15,ON_counter_CW);/*close door*/
     cb0:	8f e0       	ldi	r24, 0x0F	; 15
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	0e 94 f3 06 	call	0xde6	; 0xde6 <Motor_Timer_init>
     cba:	19 c0       	rjmp	.+50     	; 0xcee <__vector_6+0x86>
	}
	else if(g_numberOfSeconds == 15 && Timer_Counter ==30)
     cbc:	80 91 7d 00 	lds	r24, 0x007D
     cc0:	8f 30       	cpi	r24, 0x0F	; 15
     cc2:	49 f4       	brne	.+18     	; 0xcd6 <__vector_6+0x6e>
     cc4:	80 91 7c 00 	lds	r24, 0x007C
     cc8:	8e 31       	cpi	r24, 0x1E	; 30
     cca:	29 f4       	brne	.+10     	; 0xcd6 <__vector_6+0x6e>
	{
		/*De_initialize Motor Timer to stop clock of timer*/
		Motor_Timer_Dinit();
     ccc:	0e 94 72 07 	call	0xee4	; 0xee4 <Motor_Timer_Dinit>
		/*reset seconds counter*/
		Timer_Counter=0;
     cd0:	10 92 7c 00 	sts	0x007C, r1
     cd4:	0c c0       	rjmp	.+24     	; 0xcee <__vector_6+0x86>
	}
	else if(g_numberOfSeconds == 60 && Timer_Counter ==60)
     cd6:	80 91 7d 00 	lds	r24, 0x007D
     cda:	8c 33       	cpi	r24, 0x3C	; 60
     cdc:	41 f4       	brne	.+16     	; 0xcee <__vector_6+0x86>
     cde:	80 91 7c 00 	lds	r24, 0x007C
     ce2:	8c 33       	cpi	r24, 0x3C	; 60
     ce4:	21 f4       	brne	.+8      	; 0xcee <__vector_6+0x86>
	{
		/*initialize timer to ON Buzzer for 60 seconds*/
		Buzzer_Timer_Dinit();
     ce6:	0e 94 ef 05 	call	0xbde	; 0xbde <Buzzer_Timer_Dinit>
		/*reset seconds counter*/
		Timer_Counter =0;
     cea:	10 92 7c 00 	sts	0x007C, r1
	}

}
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	ff 91       	pop	r31
     cf4:	ef 91       	pop	r30
     cf6:	bf 91       	pop	r27
     cf8:	af 91       	pop	r26
     cfa:	9f 91       	pop	r25
     cfc:	8f 91       	pop	r24
     cfe:	7f 91       	pop	r23
     d00:	6f 91       	pop	r22
     d02:	5f 91       	pop	r21
     d04:	4f 91       	pop	r20
     d06:	3f 91       	pop	r19
     d08:	2f 91       	pop	r18
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
     d10:	1f 90       	pop	r1
     d12:	18 95       	reti

00000d14 <main>:
int main(void)
{
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	2c 97       	sbiw	r28, 0x0c	; 12
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
	uint8 checkFlag;
	uint8 received_status;
	uint8 received_Password[5];
	bool check_First_Time = TRUE; /*flag to indicate that program is in first iterate of infinite loop not to check for saved flag more than 1 time*/
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 chances_Counter=0;/*3 chances for entering old password*/
     d2c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 counter = 0;/*counter for password digit loop*/
     d2e:	19 82       	std	Y+1, r1	; 0x01
	APP_EEPROM_init();
     d30:	0e 94 be 07 	call	0xf7c	; 0xf7c <APP_EEPROM_init>
	APP_UART_init();
     d34:	0e 94 4c 09 	call	0x1298	; 0x1298 <APP_UART_init>
	/*first get flag that indicate that there is password in EEPROM or not*/
	checkFlag = APP_EEPROM_Get_CheckFlag();
     d38:	0e 94 3a 09 	call	0x1274	; 0x1274 <APP_EEPROM_Get_CheckFlag>
     d3c:	8d 83       	std	Y+5, r24	; 0x05
	/*if saved state returned .. then it means that there is password and HMI ECU should display main screen*/
	while(1)
	{
		if(check_First_Time){
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	88 23       	and	r24, r24
     d42:	61 f0       	breq	.+24     	; 0xd5c <main+0x48>
			if(checkFlag == SAVED)
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	83 35       	cpi	r24, 0x53	; 83
     d48:	29 f4       	brne	.+10     	; 0xd54 <main+0x40>
			{
				/*send status to HMI ECU*/
					APP_UART_sendToHMI(SAVED);
     d4a:	83 e5       	ldi	r24, 0x53	; 83
     d4c:	0e 94 55 09 	call	0x12aa	; 0x12aa <APP_UART_sendToHMI>
				check_First_Time = FALSE;
     d50:	1b 82       	std	Y+3, r1	; 0x03
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <main+0x48>
			}
			else
			{
				/*send status to HMI ECU*/
				APP_UART_sendToHMI(NOT_SAVED);
     d54:	8e e4       	ldi	r24, 0x4E	; 78
     d56:	0e 94 55 09 	call	0x12aa	; 0x12aa <APP_UART_sendToHMI>
				check_First_Time = FALSE;
     d5a:	1b 82       	std	Y+3, r1	; 0x03
			}
		}
		received_status = APP_UART_ReceiveFromHMI();
     d5c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <APP_UART_ReceiveFromHMI>
     d60:	8c 83       	std	Y+4, r24	; 0x04
		switch(received_status)
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3c 87       	std	Y+12, r19	; 0x0c
     d6a:	2b 87       	std	Y+11, r18	; 0x0b
     d6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d70:	8c 34       	cpi	r24, 0x4C	; 76
     d72:	91 05       	cpc	r25, r1
     d74:	69 f1       	breq	.+90     	; 0xdd0 <main+0xbc>
     d76:	2b 85       	ldd	r18, Y+11	; 0x0b
     d78:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7a:	2d 34       	cpi	r18, 0x4D	; 77
     d7c:	31 05       	cpc	r19, r1
     d7e:	34 f4       	brge	.+12     	; 0xd8c <main+0x78>
     d80:	8b 85       	ldd	r24, Y+11	; 0x0b
     d82:	9c 85       	ldd	r25, Y+12	; 0x0c
     d84:	83 34       	cpi	r24, 0x43	; 67
     d86:	91 05       	cpc	r25, r1
     d88:	b9 f0       	breq	.+46     	; 0xdb8 <main+0xa4>
     d8a:	d9 cf       	rjmp	.-78     	; 0xd3e <main+0x2a>
     d8c:	2b 85       	ldd	r18, Y+11	; 0x0b
     d8e:	3c 85       	ldd	r19, Y+12	; 0x0c
     d90:	2f 34       	cpi	r18, 0x4F	; 79
     d92:	31 05       	cpc	r19, r1
     d94:	11 f1       	breq	.+68     	; 0xdda <main+0xc6>
     d96:	8b 85       	ldd	r24, Y+11	; 0x0b
     d98:	9c 85       	ldd	r25, Y+12	; 0x0c
     d9a:	83 35       	cpi	r24, 0x53	; 83
     d9c:	91 05       	cpc	r25, r1
     d9e:	79 f6       	brne	.-98     	; 0xd3e <main+0x2a>
		{
		/*save new password to EEPROM and change check flag to saved state*/
		case SAVED:
			/*receive password from HMI ECU*/
			APP_UART_ReceivePasswordFromHMI(received_Password);
     da0:	ce 01       	movw	r24, r28
     da2:	06 96       	adiw	r24, 0x06	; 6
     da4:	0e 94 16 0b 	call	0x162c	; 0x162c <APP_UART_ReceivePasswordFromHMI>
			/*Save password in EEPROM*/
			APP_EEPROM_savePassword(received_Password);
     da8:	ce 01       	movw	r24, r28
     daa:	06 96       	adiw	r24, 0x06	; 6
     dac:	0e 94 c7 07 	call	0xf8e	; 0xf8e <APP_EEPROM_savePassword>
			/*save states of saved password in EEPROM*/
			APP_EEPROM_Set_CheckFlag(SAVED);
     db0:	83 e5       	ldi	r24, 0x53	; 83
     db2:	0e 94 af 08 	call	0x115e	; 0x115e <APP_EEPROM_Set_CheckFlag>
     db6:	c3 cf       	rjmp	.-122    	; 0xd3e <main+0x2a>
			break;
		case CHECK:
			/*receive password and check if it matches*/
			if(APP_UART_ReceiveAndCheck())/*matches*/
     db8:	0e 94 6f 0a 	call	0x14de	; 0x14de <APP_UART_ReceiveAndCheck>
     dbc:	88 23       	and	r24, r24
     dbe:	21 f0       	breq	.+8      	; 0xdc8 <main+0xb4>
			{
				APP_UART_sendToHMI(MATCH);
     dc0:	8d e4       	ldi	r24, 0x4D	; 77
     dc2:	0e 94 55 09 	call	0x12aa	; 0x12aa <APP_UART_sendToHMI>
     dc6:	bb cf       	rjmp	.-138    	; 0xd3e <main+0x2a>
			}
			else
			{
				APP_UART_sendToHMI(UNMATCH);
     dc8:	85 e4       	ldi	r24, 0x45	; 69
     dca:	0e 94 55 09 	call	0x12aa	; 0x12aa <APP_UART_sendToHMI>
     dce:	b7 cf       	rjmp	.-146    	; 0xd3e <main+0x2a>
			}
			break;

		case ALERT:
			/*on buzzer for 15 seconds */
			Buzzer_Timer_init(60);
     dd0:	8c e3       	ldi	r24, 0x3C	; 60
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_Timer_init>
     dd8:	b2 cf       	rjmp	.-156    	; 0xd3e <main+0x2a>
			break;

		case DOOR_OPENED:
			/*initialize timer to Rotate Motor for 15 seconds*/
			Motor_Timer_init(15,ON_CW);
     dda:	8f e0       	ldi	r24, 0x0F	; 15
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	0e 94 f3 06 	call	0xde6	; 0xde6 <Motor_Timer_init>
     de4:	ac cf       	rjmp	.-168    	; 0xd3e <main+0x2a>

00000de6 <Motor_Timer_init>:
/*Description:function to initialize timer and buzzer
 * 1. init timer with number of seconds
 * 2.init motor I/O pins
 * 3.make motor on*/
void Motor_Timer_init(uint16 secs,uint8 status )
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	2f 97       	sbiw	r28, 0x0f	; 15
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	9e 87       	std	Y+14, r25	; 0x0e
     dfc:	8d 87       	std	Y+13, r24	; 0x0d
     dfe:	6f 87       	std	Y+15, r22	; 0x0f
	/*Timer initialize*/
	/*global interrupt enable */
	SET_BIT(SREG,7);
     e00:	af e5       	ldi	r26, 0x5F	; 95
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	ef e5       	ldi	r30, 0x5F	; 95
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	8c 93       	st	X, r24
	/*assign seconds to determined ISR logic*/
	g_numberOfSeconds = secs;
     e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e10:	80 93 7d 00 	sts	0x007D, r24
	/*OCR value to make timer 1 generate compare interrupt on it*/
	uint16 OCR_Value = 977;
     e14:	81 ed       	ldi	r24, 0xD1	; 209
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
	 * timer mode CTC : to interrupt on compare match
	 * initial value =0
	 * ICR value =0
	 * OCR value :calculated above.
	 * */
	SET_BIT(TIMSK,OCIE1A);//set compare match interrupt Enable
     e1c:	a9 e5       	ldi	r26, 0x59	; 89
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e9 e5       	ldi	r30, 0x59	; 89
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 61       	ori	r24, 0x10	; 16
     e28:	8c 93       	st	X, r24
	Timer_ConfigType config = {F_CPU_1024,TIMER_1,NONE,CTC,0,0,OCR_Value};
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	8b 83       	std	Y+3, r24	; 0x03
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	8c 83       	std	Y+4, r24	; 0x04
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	8d 83       	std	Y+5, r24	; 0x05
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	8e 83       	std	Y+6, r24	; 0x06
     e3a:	18 86       	std	Y+8, r1	; 0x08
     e3c:	1f 82       	std	Y+7, r1	; 0x07
     e3e:	1a 86       	std	Y+10, r1	; 0x0a
     e40:	19 86       	std	Y+9, r1	; 0x09
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	9c 87       	std	Y+12, r25	; 0x0c
     e48:	8b 87       	std	Y+11, r24	; 0x0b
	Timer_init(&config);
     e4a:	ce 01       	movw	r24, r28
     e4c:	03 96       	adiw	r24, 0x03	; 3
     e4e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <Timer_init>
	/*Motor initialize*/
	SET_BIT(Motor_PORT_DIR,Motor_Pin1);
     e52:	a1 e3       	ldi	r26, 0x31	; 49
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e1 e3       	ldi	r30, 0x31	; 49
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 60       	ori	r24, 0x08	; 8
     e5e:	8c 93       	st	X, r24
	SET_BIT(Motor_PORT_DIR,Motor_Pin2);
     e60:	a1 e3       	ldi	r26, 0x31	; 49
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e1 e3       	ldi	r30, 0x31	; 49
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 61       	ori	r24, 0x10	; 16
     e6c:	8c 93       	st	X, r24
	if(status == ON_CW)
     e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	19 f4       	brne	.+6      	; 0xe7a <Motor_Timer_init+0x94>
	{
		Motor_CW();/*open door clock wise*/
     e74:	0e 94 48 07 	call	0xe90	; 0xe90 <Motor_CW>
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <Motor_Timer_init+0x98>
	}
	else
	{
		Motor_Counter_CW();/*close door counter clock wise*/
     e7a:	0e 94 5d 07 	call	0xeba	; 0xeba <Motor_Counter_CW>
	}
}
     e7e:	2f 96       	adiw	r28, 0x0f	; 15
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <Motor_CW>:
static void Motor_CW(void)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	/*on clockWise*/
	SET_BIT(Motor_PORT,Motor_Pin1);
     e98:	a2 e3       	ldi	r26, 0x32	; 50
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e2 e3       	ldi	r30, 0x32	; 50
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	88 60       	ori	r24, 0x08	; 8
     ea4:	8c 93       	st	X, r24
	CLEAR_BIT(Motor_PORT,Motor_Pin2);
     ea6:	a2 e3       	ldi	r26, 0x32	; 50
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e2 e3       	ldi	r30, 0x32	; 50
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7e       	andi	r24, 0xEF	; 239
     eb2:	8c 93       	st	X, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <Motor_Counter_CW>:
static void Motor_Counter_CW(void)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	/*on counter clockWise*/
	CLEAR_BIT(Motor_PORT,Motor_Pin1);
     ec2:	a2 e3       	ldi	r26, 0x32	; 50
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e2 e3       	ldi	r30, 0x32	; 50
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	8c 93       	st	X, r24
	SET_BIT(Motor_PORT,Motor_Pin2);
     ed0:	a2 e3       	ldi	r26, 0x32	; 50
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e2 e3       	ldi	r30, 0x32	; 50
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 61       	ori	r24, 0x10	; 16
     edc:	8c 93       	st	X, r24
}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <Motor_Timer_Dinit>:
void Motor_Timer_Dinit(void)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	2f 97       	sbiw	r28, 0x0f	; 15
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
	 * timer mode CTC : to interrupt on compare match
	 * initial value =0
	 * ICR value =0
	 * OCR value :0.
	 * */
	CLEAR_BIT(TIMSK,OCIE1A);//clear compare match interrupt Enable
     ef8:	a9 e5       	ldi	r26, 0x59	; 89
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e9 e5       	ldi	r30, 0x59	; 89
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	8f 7e       	andi	r24, 0xEF	; 239
     f04:	8c 93       	st	X, r24
	Timer_ConfigType config = {NO_CLOCK,TIMER_1,NONE,CTC,0,0,0};
     f06:	ce 01       	movw	r24, r28
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	9c 87       	std	Y+12, r25	; 0x0c
     f0c:	8b 87       	std	Y+11, r24	; 0x0b
     f0e:	e2 e7       	ldi	r30, 0x72	; 114
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	fe 87       	std	Y+14, r31	; 0x0e
     f14:	ed 87       	std	Y+13, r30	; 0x0d
     f16:	fa e0       	ldi	r31, 0x0A	; 10
     f18:	ff 87       	std	Y+15, r31	; 0x0f
     f1a:	ed 85       	ldd	r30, Y+13	; 0x0d
     f1c:	fe 85       	ldd	r31, Y+14	; 0x0e
     f1e:	00 80       	ld	r0, Z
     f20:	8d 85       	ldd	r24, Y+13	; 0x0d
     f22:	9e 85       	ldd	r25, Y+14	; 0x0e
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	9e 87       	std	Y+14, r25	; 0x0e
     f28:	8d 87       	std	Y+13, r24	; 0x0d
     f2a:	eb 85       	ldd	r30, Y+11	; 0x0b
     f2c:	fc 85       	ldd	r31, Y+12	; 0x0c
     f2e:	00 82       	st	Z, r0
     f30:	8b 85       	ldd	r24, Y+11	; 0x0b
     f32:	9c 85       	ldd	r25, Y+12	; 0x0c
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	9c 87       	std	Y+12, r25	; 0x0c
     f38:	8b 87       	std	Y+11, r24	; 0x0b
     f3a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f3c:	91 50       	subi	r25, 0x01	; 1
     f3e:	9f 87       	std	Y+15, r25	; 0x0f
     f40:	ef 85       	ldd	r30, Y+15	; 0x0f
     f42:	ee 23       	and	r30, r30
     f44:	51 f7       	brne	.-44     	; 0xf1a <Motor_Timer_Dinit+0x36>
	Timer_init(&config);
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <Timer_init>

	/*Buzzer De_initialize*/
	CLEAR_BIT(Motor_PORT,Motor_Pin1);
     f4e:	a2 e3       	ldi	r26, 0x32	; 50
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e2 e3       	ldi	r30, 0x32	; 50
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	8c 93       	st	X, r24
	CLEAR_BIT(Motor_PORT,Motor_Pin2);
     f5c:	a2 e3       	ldi	r26, 0x32	; 50
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e2 e3       	ldi	r30, 0x32	; 50
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8f 7e       	andi	r24, 0xEF	; 239
     f68:	8c 93       	st	X, r24
}
     f6a:	2f 96       	adiw	r28, 0x0f	; 15
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <APP_EEPROM_init>:
/*******************************************************************************
 *                      Functions Definition                                   *
 *******************************************************************************/
/*Description:function to initialize EEPROM module*/
void APP_EEPROM_init(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	EEPROM_init();
     f84:	0e 94 b9 0b 	call	0x1772	; 0x1772 <EEPROM_init>
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <APP_EEPROM_savePassword>:

/*Description :function to save new password in EEPROM*/
void APP_EEPROM_savePassword( uint8* a_PW)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	63 97       	sbiw	r28, 0x13	; 19
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	9b 8b       	std	Y+19, r25	; 0x13
     fa4:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 counter = 0;
     fa6:	19 8a       	std	Y+17, r1	; 0x11
	uint16 address = Password_Start_Address;
     fa8:	80 ea       	ldi	r24, 0xA0	; 160
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	98 8b       	std	Y+16, r25	; 0x10
     fae:	8f 87       	std	Y+15, r24	; 0x0f
     fb0:	8a c0       	rjmp	.+276    	; 0x10c6 <APP_EEPROM_savePassword+0x138>

	/*Loop on password digits to store in EEPROM*/
	for(;counter<5;counter++)
	{
		/*store digit in EEPROM starting from first assigned address*/
		EEPROM_writeByte(address+counter,a_PW[counter]);
     fb2:	89 89       	ldd	r24, Y+17	; 0x11
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fba:	98 89       	ldd	r25, Y+16	; 0x10
     fbc:	a9 01       	movw	r20, r18
     fbe:	48 0f       	add	r20, r24
     fc0:	59 1f       	adc	r21, r25
     fc2:	89 89       	ldd	r24, Y+17	; 0x11
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8a 89       	ldd	r24, Y+18	; 0x12
     fca:	9b 89       	ldd	r25, Y+19	; 0x13
     fcc:	fc 01       	movw	r30, r24
     fce:	e2 0f       	add	r30, r18
     fd0:	f3 1f       	adc	r31, r19
     fd2:	20 81       	ld	r18, Z
     fd4:	ca 01       	movw	r24, r20
     fd6:	62 2f       	mov	r22, r18
     fd8:	0e 94 c2 0b 	call	0x1784	; 0x1784 <EEPROM_writeByte>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a0 e2       	ldi	r26, 0x20	; 32
     fe2:	b1 e4       	ldi	r27, 0x41	; 65
     fe4:	8b 87       	std	Y+11, r24	; 0x0b
     fe6:	9c 87       	std	Y+12, r25	; 0x0c
     fe8:	ad 87       	std	Y+13, r26	; 0x0d
     fea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fec:	6b 85       	ldd	r22, Y+11	; 0x0b
     fee:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	4a e7       	ldi	r20, 0x7A	; 122
     ffa:	53 e4       	ldi	r21, 0x43	; 67
     ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	8f 83       	std	Y+7, r24	; 0x07
    1006:	98 87       	std	Y+8, r25	; 0x08
    1008:	a9 87       	std	Y+9, r26	; 0x09
    100a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    100c:	6f 81       	ldd	r22, Y+7	; 0x07
    100e:	78 85       	ldd	r23, Y+8	; 0x08
    1010:	89 85       	ldd	r24, Y+9	; 0x09
    1012:	9a 85       	ldd	r25, Y+10	; 0x0a
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e8       	ldi	r20, 0x80	; 128
    101a:	5f e3       	ldi	r21, 0x3F	; 63
    101c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1020:	88 23       	and	r24, r24
    1022:	2c f4       	brge	.+10     	; 0x102e <APP_EEPROM_savePassword+0xa0>
		__ticks = 1;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
    102c:	3f c0       	rjmp	.+126    	; 0x10ac <APP_EEPROM_savePassword+0x11e>
	else if (__tmp > 65535)
    102e:	6f 81       	ldd	r22, Y+7	; 0x07
    1030:	78 85       	ldd	r23, Y+8	; 0x08
    1032:	89 85       	ldd	r24, Y+9	; 0x09
    1034:	9a 85       	ldd	r25, Y+10	; 0x0a
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	3f ef       	ldi	r19, 0xFF	; 255
    103a:	4f e7       	ldi	r20, 0x7F	; 127
    103c:	57 e4       	ldi	r21, 0x47	; 71
    103e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1042:	18 16       	cp	r1, r24
    1044:	4c f5       	brge	.+82     	; 0x1098 <APP_EEPROM_savePassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1046:	6b 85       	ldd	r22, Y+11	; 0x0b
    1048:	7c 85       	ldd	r23, Y+12	; 0x0c
    104a:	8d 85       	ldd	r24, Y+13	; 0x0d
    104c:	9e 85       	ldd	r25, Y+14	; 0x0e
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e2       	ldi	r20, 0x20	; 32
    1054:	51 e4       	ldi	r21, 0x41	; 65
    1056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	9e 83       	std	Y+6, r25	; 0x06
    106c:	8d 83       	std	Y+5, r24	; 0x05
    106e:	0f c0       	rjmp	.+30     	; 0x108e <APP_EEPROM_savePassword+0x100>
    1070:	89 e1       	ldi	r24, 0x19	; 25
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9c 83       	std	Y+4, r25	; 0x04
    1076:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <APP_EEPROM_savePassword+0xee>
    1080:	9c 83       	std	Y+4, r25	; 0x04
    1082:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	69 f7       	brne	.-38     	; 0x1070 <APP_EEPROM_savePassword+0xe2>
    1096:	14 c0       	rjmp	.+40     	; 0x10c0 <APP_EEPROM_savePassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1098:	6f 81       	ldd	r22, Y+7	; 0x07
    109a:	78 85       	ldd	r23, Y+8	; 0x08
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	9e 81       	ldd	r25, Y+6	; 0x06
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <APP_EEPROM_savePassword+0x12a>
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 counter = 0;
	uint16 address = Password_Start_Address;

	/*Loop on password digits to store in EEPROM*/
	for(;counter<5;counter++)
    10c0:	89 89       	ldd	r24, Y+17	; 0x11
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	89 8b       	std	Y+17, r24	; 0x11
    10c6:	89 89       	ldd	r24, Y+17	; 0x11
    10c8:	85 30       	cpi	r24, 0x05	; 5
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <APP_EEPROM_savePassword+0x140>
    10cc:	72 cf       	rjmp	.-284    	; 0xfb2 <APP_EEPROM_savePassword+0x24>
	{
		/*store digit in EEPROM starting from first assigned address*/
		EEPROM_writeByte(address+counter,a_PW[counter]);
		_delay_ms(10);
	}
}
    10ce:	63 96       	adiw	r28, 0x13	; 19
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <APP_EEPROM_checkPassword>:

/*Description:function to check if password match or not*/
bool APP_EEPROM_checkPassword( uint8* a_PW)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	27 97       	sbiw	r28, 0x07	; 7
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	9f 83       	std	Y+7, r25	; 0x07
    10f6:	8e 83       	std	Y+6, r24	; 0x06
	uint8 counter = 0;
    10f8:	1c 82       	std	Y+4, r1	; 0x04
	uint8 key;
	bool check = TRUE;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 address = Password_Start_Address;
    10fe:	80 ea       	ldi	r24, 0xA0	; 160
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	1e c0       	rjmp	.+60     	; 0x1144 <APP_EEPROM_checkPassword+0x64>
	/*Loop on password digits to check if they match digits stored in EEPROM*/
	for(;counter<5;counter++)
	{
		/*get digit from EEPROM*/
		EEPROM_readByte(address+counter,&key);
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	82 0f       	add	r24, r18
    1114:	93 1f       	adc	r25, r19
    1116:	9e 01       	movw	r18, r28
    1118:	2b 5f       	subi	r18, 0xFB	; 251
    111a:	3f 4f       	sbci	r19, 0xFF	; 255
    111c:	b9 01       	movw	r22, r18
    111e:	0e 94 03 0c 	call	0x1806	; 0x1806 <EEPROM_readByte>
		/*check if it matches or not and return false if any of them un-match*/
		if(key != a_PW[counter])
    1122:	8c 81       	ldd	r24, Y+4	; 0x04
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	8e 81       	ldd	r24, Y+6	; 0x06
    112a:	9f 81       	ldd	r25, Y+7	; 0x07
    112c:	fc 01       	movw	r30, r24
    112e:	e2 0f       	add	r30, r18
    1130:	f3 1f       	adc	r31, r19
    1132:	90 81       	ld	r25, Z
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	98 17       	cp	r25, r24
    1138:	11 f0       	breq	.+4      	; 0x113e <APP_EEPROM_checkPassword+0x5e>
		{
			check = FALSE;
    113a:	1b 82       	std	Y+3, r1	; 0x03
    113c:	06 c0       	rjmp	.+12     	; 0x114a <APP_EEPROM_checkPassword+0x6a>
	uint8 counter = 0;
	uint8 key;
	bool check = TRUE;
	uint16 address = Password_Start_Address;
	/*Loop on password digits to check if they match digits stored in EEPROM*/
	for(;counter<5;counter++)
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	8c 83       	std	Y+4, r24	; 0x04
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	85 30       	cpi	r24, 0x05	; 5
    1148:	f8 f2       	brcs	.-66     	; 0x1108 <APP_EEPROM_checkPassword+0x28>
		{
			check = FALSE;
			break;
		}
	}
	return check;
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    114c:	27 96       	adiw	r28, 0x07	; 7
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <APP_EEPROM_Set_CheckFlag>:

/*Description: function to store check flag in EEPROM if there is password saved in eeprom or not*/
void APP_EEPROM_Set_CheckFlag( uint8 a_status)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	2f 97       	sbiw	r28, 0x0f	; 15
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	8f 87       	std	Y+15, r24	; 0x0f
	/*save status flag inside EEPPROM*/
	EEPROM_writeByte(CheckFlag_Address,a_status);
    1174:	85 e5       	ldi	r24, 0x55	; 85
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	6f 85       	ldd	r22, Y+15	; 0x0f
    117a:	0e 94 c2 0b 	call	0x1784	; 0x1784 <EEPROM_writeByte>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a0 e2       	ldi	r26, 0x20	; 32
    1184:	b1 e4       	ldi	r27, 0x41	; 65
    1186:	8b 87       	std	Y+11, r24	; 0x0b
    1188:	9c 87       	std	Y+12, r25	; 0x0c
    118a:	ad 87       	std	Y+13, r26	; 0x0d
    118c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1190:	7c 85       	ldd	r23, Y+12	; 0x0c
    1192:	8d 85       	ldd	r24, Y+13	; 0x0d
    1194:	9e 85       	ldd	r25, Y+14	; 0x0e
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	4a e7       	ldi	r20, 0x7A	; 122
    119c:	53 e4       	ldi	r21, 0x43	; 67
    119e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	8f 83       	std	Y+7, r24	; 0x07
    11a8:	98 87       	std	Y+8, r25	; 0x08
    11aa:	a9 87       	std	Y+9, r26	; 0x09
    11ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ae:	6f 81       	ldd	r22, Y+7	; 0x07
    11b0:	78 85       	ldd	r23, Y+8	; 0x08
    11b2:	89 85       	ldd	r24, Y+9	; 0x09
    11b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e8       	ldi	r20, 0x80	; 128
    11bc:	5f e3       	ldi	r21, 0x3F	; 63
    11be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c2:	88 23       	and	r24, r24
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <APP_EEPROM_Set_CheckFlag+0x72>
		__ticks = 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
    11ce:	3f c0       	rjmp	.+126    	; 0x124e <APP_EEPROM_Set_CheckFlag+0xf0>
	else if (__tmp > 65535)
    11d0:	6f 81       	ldd	r22, Y+7	; 0x07
    11d2:	78 85       	ldd	r23, Y+8	; 0x08
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	3f ef       	ldi	r19, 0xFF	; 255
    11dc:	4f e7       	ldi	r20, 0x7F	; 127
    11de:	57 e4       	ldi	r21, 0x47	; 71
    11e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e4:	18 16       	cp	r1, r24
    11e6:	4c f5       	brge	.+82     	; 0x123a <APP_EEPROM_Set_CheckFlag+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e2       	ldi	r20, 0x20	; 32
    11f6:	51 e4       	ldi	r21, 0x41	; 65
    11f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	8d 83       	std	Y+5, r24	; 0x05
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <APP_EEPROM_Set_CheckFlag+0xd2>
    1212:	89 e1       	ldi	r24, 0x19	; 25
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9c 83       	std	Y+4, r25	; 0x04
    1218:	8b 83       	std	Y+3, r24	; 0x03
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <APP_EEPROM_Set_CheckFlag+0xc0>
    1222:	9c 83       	std	Y+4, r25	; 0x04
    1224:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	69 f7       	brne	.-38     	; 0x1212 <APP_EEPROM_Set_CheckFlag+0xb4>
    1238:	14 c0       	rjmp	.+40     	; 0x1262 <APP_EEPROM_Set_CheckFlag+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123a:	6f 81       	ldd	r22, Y+7	; 0x07
    123c:	78 85       	ldd	r23, Y+8	; 0x08
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	9e 83       	std	Y+6, r25	; 0x06
    124c:	8d 83       	std	Y+5, r24	; 0x05
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <APP_EEPROM_Set_CheckFlag+0xfc>
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	}
    1262:	2f 96       	adiw	r28, 0x0f	; 15
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <APP_EEPROM_Get_CheckFlag>:

/*Description: function to get check flag from EEPROM */
uint8 APP_EEPROM_Get_CheckFlag(void)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	0f 92       	push	r0
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
	uint8 key;
	 EEPROM_readByte(CheckFlag_Address,&key);
    127e:	85 e5       	ldi	r24, 0x55	; 85
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9e 01       	movw	r18, r28
    1284:	2f 5f       	subi	r18, 0xFF	; 255
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	b9 01       	movw	r22, r18
    128a:	0e 94 03 0c 	call	0x1806	; 0x1806 <EEPROM_readByte>
	 return key;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <APP_UART_init>:
/*******************************************************************************
 *                      Functions Definition                                  *
 *******************************************************************************/
/*Description:Function to init uart module*/
void APP_UART_init(void)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	UART_init();
    12a0:	0e 94 ac 10 	call	0x2158	; 0x2158 <UART_init>
}
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <APP_UART_sendToHMI>:

/*Description:Function to send status to HMI ECU
 * 1.call UART function to send byte*/
void APP_UART_sendToHMI(const APP_UART_status a_status)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	2f 97       	sbiw	r28, 0x0f	; 15
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	8f 87       	std	Y+15, r24	; 0x0f
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a8 ec       	ldi	r26, 0xC8	; 200
    12c6:	b2 e4       	ldi	r27, 0x42	; 66
    12c8:	8b 87       	std	Y+11, r24	; 0x0b
    12ca:	9c 87       	std	Y+12, r25	; 0x0c
    12cc:	ad 87       	std	Y+13, r26	; 0x0d
    12ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4a e7       	ldi	r20, 0x7A	; 122
    12de:	53 e4       	ldi	r21, 0x43	; 67
    12e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	8f 83       	std	Y+7, r24	; 0x07
    12ea:	98 87       	std	Y+8, r25	; 0x08
    12ec:	a9 87       	std	Y+9, r26	; 0x09
    12ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1304:	88 23       	and	r24, r24
    1306:	2c f4       	brge	.+10     	; 0x1312 <APP_UART_sendToHMI+0x68>
		__ticks = 1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
    1310:	3f c0       	rjmp	.+126    	; 0x1390 <APP_UART_sendToHMI+0xe6>
	else if (__tmp > 65535)
    1312:	6f 81       	ldd	r22, Y+7	; 0x07
    1314:	78 85       	ldd	r23, Y+8	; 0x08
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	9a 85       	ldd	r25, Y+10	; 0x0a
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	3f ef       	ldi	r19, 0xFF	; 255
    131e:	4f e7       	ldi	r20, 0x7F	; 127
    1320:	57 e4       	ldi	r21, 0x47	; 71
    1322:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1326:	18 16       	cp	r1, r24
    1328:	4c f5       	brge	.+82     	; 0x137c <APP_UART_sendToHMI+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132a:	6b 85       	ldd	r22, Y+11	; 0x0b
    132c:	7c 85       	ldd	r23, Y+12	; 0x0c
    132e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1330:	9e 85       	ldd	r25, Y+14	; 0x0e
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e2       	ldi	r20, 0x20	; 32
    1338:	51 e4       	ldi	r21, 0x41	; 65
    133a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	0f c0       	rjmp	.+30     	; 0x1372 <APP_UART_sendToHMI+0xc8>
    1354:	89 e1       	ldi	r24, 0x19	; 25
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <APP_UART_sendToHMI+0xb6>
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	69 f7       	brne	.-38     	; 0x1354 <APP_UART_sendToHMI+0xaa>
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <APP_UART_sendToHMI+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137c:	6f 81       	ldd	r22, Y+7	; 0x07
    137e:	78 85       	ldd	r23, Y+8	; 0x08
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9e 83       	std	Y+6, r25	; 0x06
    138e:	8d 83       	std	Y+5, r24	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <APP_UART_sendToHMI+0xf2>
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
	do{
		/*send a_status to HMI*/
		_delay_ms(100);
		UART_sendByte(a_status);
    13a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a6:	0e 94 c6 10 	call	0x218c	; 0x218c <UART_sendByte>
	}while(UART_recieveByte() !='A' );
    13aa:	0e 94 dd 10 	call	0x21ba	; 0x21ba <UART_recieveByte>
    13ae:	81 34       	cpi	r24, 0x41	; 65
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <APP_UART_sendToHMI+0x10a>
    13b2:	86 cf       	rjmp	.-244    	; 0x12c0 <APP_UART_sendToHMI+0x16>
}
    13b4:	2f 96       	adiw	r28, 0x0f	; 15
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <APP_UART_ReceiveFromHMI>:
/*Description:Function to receive status or password  from HMI ECU
 * 1.call UART function to receive byte*/
uint8 APP_UART_ReceiveFromHMI(void)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	2f 97       	sbiw	r28, 0x0f	; 15
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61

	uint8 key =  UART_recieveByte();
    13da:	0e 94 dd 10 	call	0x21ba	; 0x21ba <UART_recieveByte>
    13de:	8f 87       	std	Y+15, r24	; 0x0f
	UART_sendByte('A');
    13e0:	81 e4       	ldi	r24, 0x41	; 65
    13e2:	0e 94 c6 10 	call	0x218c	; 0x218c <UART_sendByte>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a8 ec       	ldi	r26, 0xC8	; 200
    13ec:	b2 e4       	ldi	r27, 0x42	; 66
    13ee:	8b 87       	std	Y+11, r24	; 0x0b
    13f0:	9c 87       	std	Y+12, r25	; 0x0c
    13f2:	ad 87       	std	Y+13, r26	; 0x0d
    13f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4a e7       	ldi	r20, 0x7A	; 122
    1404:	53 e4       	ldi	r21, 0x43	; 67
    1406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	8f 83       	std	Y+7, r24	; 0x07
    1410:	98 87       	std	Y+8, r25	; 0x08
    1412:	a9 87       	std	Y+9, r26	; 0x09
    1414:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1416:	6f 81       	ldd	r22, Y+7	; 0x07
    1418:	78 85       	ldd	r23, Y+8	; 0x08
    141a:	89 85       	ldd	r24, Y+9	; 0x09
    141c:	9a 85       	ldd	r25, Y+10	; 0x0a
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e8       	ldi	r20, 0x80	; 128
    1424:	5f e3       	ldi	r21, 0x3F	; 63
    1426:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    142a:	88 23       	and	r24, r24
    142c:	2c f4       	brge	.+10     	; 0x1438 <APP_UART_ReceiveFromHMI+0x72>
		__ticks = 1;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	8d 83       	std	Y+5, r24	; 0x05
    1436:	3f c0       	rjmp	.+126    	; 0x14b6 <APP_UART_ReceiveFromHMI+0xf0>
	else if (__tmp > 65535)
    1438:	6f 81       	ldd	r22, Y+7	; 0x07
    143a:	78 85       	ldd	r23, Y+8	; 0x08
    143c:	89 85       	ldd	r24, Y+9	; 0x09
    143e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	3f ef       	ldi	r19, 0xFF	; 255
    1444:	4f e7       	ldi	r20, 0x7F	; 127
    1446:	57 e4       	ldi	r21, 0x47	; 71
    1448:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    144c:	18 16       	cp	r1, r24
    144e:	4c f5       	brge	.+82     	; 0x14a2 <APP_UART_ReceiveFromHMI+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1450:	6b 85       	ldd	r22, Y+11	; 0x0b
    1452:	7c 85       	ldd	r23, Y+12	; 0x0c
    1454:	8d 85       	ldd	r24, Y+13	; 0x0d
    1456:	9e 85       	ldd	r25, Y+14	; 0x0e
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e2       	ldi	r20, 0x20	; 32
    145e:	51 e4       	ldi	r21, 0x41	; 65
    1460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 83       	std	Y+5, r24	; 0x05
    1478:	0f c0       	rjmp	.+30     	; 0x1498 <APP_UART_ReceiveFromHMI+0xd2>
    147a:	89 e1       	ldi	r24, 0x19	; 25
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	9c 83       	std	Y+4, r25	; 0x04
    1480:	8b 83       	std	Y+3, r24	; 0x03
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <APP_UART_ReceiveFromHMI+0xc0>
    148a:	9c 83       	std	Y+4, r25	; 0x04
    148c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	69 f7       	brne	.-38     	; 0x147a <APP_UART_ReceiveFromHMI+0xb4>
    14a0:	14 c0       	rjmp	.+40     	; 0x14ca <APP_UART_ReceiveFromHMI+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <APP_UART_ReceiveFromHMI+0xfc>
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	return key;
    14ca:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    14cc:	2f 96       	adiw	r28, 0x0f	; 15
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <APP_UART_ReceiveAndCheck>:


/*Description:function to receive password digits from HMI ECU and check whether they match or not*/
bool APP_UART_ReceiveAndCheck(void)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	62 97       	sbiw	r28, 0x12	; 18
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
	uint8 counter=0;
    14f2:	19 8a       	std	Y+17, r1	; 0x11
	uint8 key;
	uint8 check_Key;
	bool check = TRUE;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	8f 87       	std	Y+15, r24	; 0x0f
    14f8:	8b c0       	rjmp	.+278    	; 0x1610 <APP_UART_ReceiveAndCheck+0x132>
	for(;counter<5;counter++)
	{
		/*receive key from HMI ECU to check*/
		key = UART_recieveByte();
    14fa:	0e 94 dd 10 	call	0x21ba	; 0x21ba <UART_recieveByte>
    14fe:	88 8b       	std	Y+16, r24	; 0x10
		/*send ack*/
		UART_sendByte('A');
    1500:	81 e4       	ldi	r24, 0x41	; 65
    1502:	0e 94 c6 10 	call	0x218c	; 0x218c <UART_sendByte>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a8 ec       	ldi	r26, 0xC8	; 200
    150c:	b2 e4       	ldi	r27, 0x42	; 66
    150e:	8b 87       	std	Y+11, r24	; 0x0b
    1510:	9c 87       	std	Y+12, r25	; 0x0c
    1512:	ad 87       	std	Y+13, r26	; 0x0d
    1514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	6b 85       	ldd	r22, Y+11	; 0x0b
    1518:	7c 85       	ldd	r23, Y+12	; 0x0c
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a e7       	ldi	r20, 0x7A	; 122
    1524:	53 e4       	ldi	r21, 0x43	; 67
    1526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	8f 83       	std	Y+7, r24	; 0x07
    1530:	98 87       	std	Y+8, r25	; 0x08
    1532:	a9 87       	std	Y+9, r26	; 0x09
    1534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1536:	6f 81       	ldd	r22, Y+7	; 0x07
    1538:	78 85       	ldd	r23, Y+8	; 0x08
    153a:	89 85       	ldd	r24, Y+9	; 0x09
    153c:	9a 85       	ldd	r25, Y+10	; 0x0a
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <APP_UART_ReceiveAndCheck+0x7a>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <APP_UART_ReceiveAndCheck+0xf8>
	else if (__tmp > 65535)
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <APP_UART_ReceiveAndCheck+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	6b 85       	ldd	r22, Y+11	; 0x0b
    1572:	7c 85       	ldd	r23, Y+12	; 0x0c
    1574:	8d 85       	ldd	r24, Y+13	; 0x0d
    1576:	9e 85       	ldd	r25, Y+14	; 0x0e
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <APP_UART_ReceiveAndCheck+0xda>
    159a:	89 e1       	ldi	r24, 0x19	; 25
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9c 83       	std	Y+4, r25	; 0x04
    15a0:	8b 83       	std	Y+3, r24	; 0x03
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <APP_UART_ReceiveAndCheck+0xc8>
    15aa:	9c 83       	std	Y+4, r25	; 0x04
    15ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <APP_UART_ReceiveAndCheck+0xbc>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <APP_UART_ReceiveAndCheck+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	6f 81       	ldd	r22, Y+7	; 0x07
    15c4:	78 85       	ldd	r23, Y+8	; 0x08
    15c6:	89 85       	ldd	r24, Y+9	; 0x09
    15c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <APP_UART_ReceiveAndCheck+0x104>
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		/*check digit with digit in EEPROM*/
		EEPROM_readByte(Password_Start_Address+counter,&check_Key);
    15ea:	89 89       	ldd	r24, Y+17	; 0x11
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	80 56       	subi	r24, 0x60	; 96
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	9e 01       	movw	r18, r28
    15f6:	2e 5e       	subi	r18, 0xEE	; 238
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	b9 01       	movw	r22, r18
    15fc:	0e 94 03 0c 	call	0x1806	; 0x1806 <EEPROM_readByte>
		if(key != check_Key){
    1600:	9a 89       	ldd	r25, Y+18	; 0x12
    1602:	88 89       	ldd	r24, Y+16	; 0x10
    1604:	89 17       	cp	r24, r25
    1606:	09 f0       	breq	.+2      	; 0x160a <APP_UART_ReceiveAndCheck+0x12c>
			check =  FALSE;
    1608:	1f 86       	std	Y+15, r1	; 0x0f
{
	uint8 counter=0;
	uint8 key;
	uint8 check_Key;
	bool check = TRUE;
	for(;counter<5;counter++)
    160a:	89 89       	ldd	r24, Y+17	; 0x11
    160c:	8f 5f       	subi	r24, 0xFF	; 255
    160e:	89 8b       	std	Y+17, r24	; 0x11
    1610:	89 89       	ldd	r24, Y+17	; 0x11
    1612:	85 30       	cpi	r24, 0x05	; 5
    1614:	08 f4       	brcc	.+2      	; 0x1618 <APP_UART_ReceiveAndCheck+0x13a>
    1616:	71 cf       	rjmp	.-286    	; 0x14fa <APP_UART_ReceiveAndCheck+0x1c>
		EEPROM_readByte(Password_Start_Address+counter,&check_Key);
		if(key != check_Key){
			check =  FALSE;
		}
	}
	return check;
    1618:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    161a:	62 96       	adiw	r28, 0x12	; 18
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <APP_UART_ReceivePasswordFromHMI>:

/*Description:Function to receive password from HMI ECU
 * 1.call UART function to receive string*/
void APP_UART_ReceivePasswordFromHMI(uint8 *password)
{
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	61 97       	sbiw	r28, 0x11	; 17
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	99 8b       	std	Y+17, r25	; 0x11
    1646:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter=0;
    1648:	1f 86       	std	Y+15, r1	; 0x0f
    164a:	84 c0       	rjmp	.+264    	; 0x1754 <APP_UART_ReceivePasswordFromHMI+0x128>
	for(;counter<5;counter++)
	{
		password[counter] = UART_recieveByte();
    164c:	8f 85       	ldd	r24, Y+15	; 0x0f
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	88 89       	ldd	r24, Y+16	; 0x10
    1654:	99 89       	ldd	r25, Y+17	; 0x11
    1656:	8c 01       	movw	r16, r24
    1658:	02 0f       	add	r16, r18
    165a:	13 1f       	adc	r17, r19
    165c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <UART_recieveByte>
    1660:	f8 01       	movw	r30, r16
    1662:	80 83       	st	Z, r24
		UART_sendByte('A');/*send ack*/
    1664:	81 e4       	ldi	r24, 0x41	; 65
    1666:	0e 94 c6 10 	call	0x218c	; 0x218c <UART_sendByte>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a8 ec       	ldi	r26, 0xC8	; 200
    1670:	b2 e4       	ldi	r27, 0x42	; 66
    1672:	8b 87       	std	Y+11, r24	; 0x0b
    1674:	9c 87       	std	Y+12, r25	; 0x0c
    1676:	ad 87       	std	Y+13, r26	; 0x0d
    1678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167a:	6b 85       	ldd	r22, Y+11	; 0x0b
    167c:	7c 85       	ldd	r23, Y+12	; 0x0c
    167e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1680:	9e 85       	ldd	r25, Y+14	; 0x0e
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a e7       	ldi	r20, 0x7A	; 122
    1688:	53 e4       	ldi	r21, 0x43	; 67
    168a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	8f 83       	std	Y+7, r24	; 0x07
    1694:	98 87       	std	Y+8, r25	; 0x08
    1696:	a9 87       	std	Y+9, r26	; 0x09
    1698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169a:	6f 81       	ldd	r22, Y+7	; 0x07
    169c:	78 85       	ldd	r23, Y+8	; 0x08
    169e:	89 85       	ldd	r24, Y+9	; 0x09
    16a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e8       	ldi	r20, 0x80	; 128
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ae:	88 23       	and	r24, r24
    16b0:	2c f4       	brge	.+10     	; 0x16bc <APP_UART_ReceivePasswordFromHMI+0x90>
		__ticks = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	3f c0       	rjmp	.+126    	; 0x173a <APP_UART_ReceivePasswordFromHMI+0x10e>
	else if (__tmp > 65535)
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	4c f5       	brge	.+82     	; 0x1726 <APP_UART_ReceivePasswordFromHMI+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16da:	9e 85       	ldd	r25, Y+14	; 0x0e
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	0f c0       	rjmp	.+30     	; 0x171c <APP_UART_ReceivePasswordFromHMI+0xf0>
    16fe:	89 e1       	ldi	r24, 0x19	; 25
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9c 83       	std	Y+4, r25	; 0x04
    1704:	8b 83       	std	Y+3, r24	; 0x03
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <APP_UART_ReceivePasswordFromHMI+0xde>
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	69 f7       	brne	.-38     	; 0x16fe <APP_UART_ReceivePasswordFromHMI+0xd2>
    1724:	14 c0       	rjmp	.+40     	; 0x174e <APP_UART_ReceivePasswordFromHMI+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1726:	6f 81       	ldd	r22, Y+7	; 0x07
    1728:	78 85       	ldd	r23, Y+8	; 0x08
    172a:	89 85       	ldd	r24, Y+9	; 0x09
    172c:	9a 85       	ldd	r25, Y+10	; 0x0a
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <APP_UART_ReceivePasswordFromHMI+0x11a>
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
/*Description:Function to receive password from HMI ECU
 * 1.call UART function to receive string*/
void APP_UART_ReceivePasswordFromHMI(uint8 *password)
{
	uint8 counter=0;
	for(;counter<5;counter++)
    174e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1750:	8f 5f       	subi	r24, 0xFF	; 255
    1752:	8f 87       	std	Y+15, r24	; 0x0f
    1754:	8f 85       	ldd	r24, Y+15	; 0x0f
    1756:	85 30       	cpi	r24, 0x05	; 5
    1758:	08 f4       	brcc	.+2      	; 0x175c <APP_UART_ReceivePasswordFromHMI+0x130>
    175a:	78 cf       	rjmp	.-272    	; 0x164c <APP_UART_ReceivePasswordFromHMI+0x20>
		password[counter] = UART_recieveByte();
		UART_sendByte('A');/*send ack*/
		_delay_ms(100);

	}
}
    175c:	61 96       	adiw	r28, 0x11	; 17
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	08 95       	ret

00001772 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    177a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <TWI_init>
}
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	00 d0       	rcall	.+0      	; 0x178a <EEPROM_writeByte+0x6>
    178a:	00 d0       	rcall	.+0      	; 0x178c <EEPROM_writeByte+0x8>
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1796:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TWI_start>
    if (TWI_getStatus() != TW_START)
    179a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_getStatus>
    179e:	88 30       	cpi	r24, 0x08	; 8
    17a0:	11 f0       	breq	.+4      	; 0x17a6 <EEPROM_writeByte+0x22>
        return ERROR;
    17a2:	1c 82       	std	Y+4, r1	; 0x04
    17a4:	28 c0       	rjmp	.+80     	; 0x17f6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	9a 81       	ldd	r25, Y+2	; 0x02
    17aa:	80 70       	andi	r24, 0x00	; 0
    17ac:	97 70       	andi	r25, 0x07	; 7
    17ae:	88 0f       	add	r24, r24
    17b0:	89 2f       	mov	r24, r25
    17b2:	88 1f       	adc	r24, r24
    17b4:	99 0b       	sbc	r25, r25
    17b6:	91 95       	neg	r25
    17b8:	80 6a       	ori	r24, 0xA0	; 160
    17ba:	0e 94 94 0c 	call	0x1928	; 0x1928 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    17be:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_getStatus>
    17c2:	88 31       	cpi	r24, 0x18	; 24
    17c4:	11 f0       	breq	.+4      	; 0x17ca <EEPROM_writeByte+0x46>
        return ERROR; 
    17c6:	1c 82       	std	Y+4, r1	; 0x04
    17c8:	16 c0       	rjmp	.+44     	; 0x17f6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	0e 94 94 0c 	call	0x1928	; 0x1928 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    17d0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_getStatus>
    17d4:	88 32       	cpi	r24, 0x28	; 40
    17d6:	11 f0       	breq	.+4      	; 0x17dc <EEPROM_writeByte+0x58>
        return ERROR;
    17d8:	1c 82       	std	Y+4, r1	; 0x04
    17da:	0d c0       	rjmp	.+26     	; 0x17f6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	0e 94 94 0c 	call	0x1928	; 0x1928 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    17e2:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_getStatus>
    17e6:	88 32       	cpi	r24, 0x28	; 40
    17e8:	11 f0       	breq	.+4      	; 0x17ee <EEPROM_writeByte+0x6a>
        return ERROR;
    17ea:	1c 82       	std	Y+4, r1	; 0x04
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    17ee:	0e 94 89 0c 	call	0x1912	; 0x1912 <TWI_stop>
	
    return SUCCESS;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	8c 83       	std	Y+4, r24	; 0x04
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <EEPROM_readByte+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <EEPROM_readByte+0x8>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	7c 83       	std	Y+4, r23	; 0x04
    181a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    181c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1820:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_getStatus>
    1824:	88 30       	cpi	r24, 0x08	; 8
    1826:	11 f0       	breq	.+4      	; 0x182c <EEPROM_readByte+0x26>
        return ERROR;
    1828:	1d 82       	std	Y+5, r1	; 0x05
    182a:	44 c0       	rjmp	.+136    	; 0x18b4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	80 70       	andi	r24, 0x00	; 0
    1832:	97 70       	andi	r25, 0x07	; 7
    1834:	88 0f       	add	r24, r24
    1836:	89 2f       	mov	r24, r25
    1838:	88 1f       	adc	r24, r24
    183a:	99 0b       	sbc	r25, r25
    183c:	91 95       	neg	r25
    183e:	80 6a       	ori	r24, 0xA0	; 160
    1840:	0e 94 94 0c 	call	0x1928	; 0x1928 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1844:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_getStatus>
    1848:	88 31       	cpi	r24, 0x18	; 24
    184a:	11 f0       	breq	.+4      	; 0x1850 <EEPROM_readByte+0x4a>
        return ERROR;
    184c:	1d 82       	std	Y+5, r1	; 0x05
    184e:	32 c0       	rjmp	.+100    	; 0x18b4 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	0e 94 94 0c 	call	0x1928	; 0x1928 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1856:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_getStatus>
    185a:	88 32       	cpi	r24, 0x28	; 40
    185c:	11 f0       	breq	.+4      	; 0x1862 <EEPROM_readByte+0x5c>
        return ERROR;
    185e:	1d 82       	std	Y+5, r1	; 0x05
    1860:	29 c0       	rjmp	.+82     	; 0x18b4 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1862:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    1866:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_getStatus>
    186a:	80 31       	cpi	r24, 0x10	; 16
    186c:	11 f0       	breq	.+4      	; 0x1872 <EEPROM_readByte+0x6c>
        return ERROR;
    186e:	1d 82       	std	Y+5, r1	; 0x05
    1870:	21 c0       	rjmp	.+66     	; 0x18b4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	80 70       	andi	r24, 0x00	; 0
    1878:	97 70       	andi	r25, 0x07	; 7
    187a:	88 0f       	add	r24, r24
    187c:	89 2f       	mov	r24, r25
    187e:	88 1f       	adc	r24, r24
    1880:	99 0b       	sbc	r25, r25
    1882:	91 95       	neg	r25
    1884:	81 6a       	ori	r24, 0xA1	; 161
    1886:	0e 94 94 0c 	call	0x1928	; 0x1928 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    188a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_getStatus>
    188e:	80 34       	cpi	r24, 0x40	; 64
    1890:	11 f0       	breq	.+4      	; 0x1896 <EEPROM_readByte+0x90>
        return ERROR;
    1892:	1d 82       	std	Y+5, r1	; 0x05
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    1896:	0e 94 be 0c 	call	0x197c	; 0x197c <TWI_readWithNACK>
    189a:	eb 81       	ldd	r30, Y+3	; 0x03
    189c:	fc 81       	ldd	r31, Y+4	; 0x04
    189e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    18a0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <TWI_getStatus>
    18a4:	88 35       	cpi	r24, 0x58	; 88
    18a6:	11 f0       	breq	.+4      	; 0x18ac <EEPROM_readByte+0xa6>
        return ERROR;
    18a8:	1d 82       	std	Y+5, r1	; 0x05
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    18ac:	0e 94 89 0c 	call	0x1912	; 0x1912 <TWI_stop>
    return SUCCESS;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	8d 83       	std	Y+5, r24	; 0x05
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    18ce:	e0 e2       	ldi	r30, 0x20	; 32
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	80 83       	st	Z, r24
	TWSR = 0x00;
    18d6:	e1 e2       	ldi	r30, 0x21	; 33
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    18dc:	e2 e2       	ldi	r30, 0x22	; 34
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    18e4:	e6 e5       	ldi	r30, 0x56	; 86
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	84 e0       	ldi	r24, 0x04	; 4
    18ea:	80 83       	st	Z, r24
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <TWI_start>:

void TWI_start(void)
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    18fa:	e6 e5       	ldi	r30, 0x56	; 86
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	84 ea       	ldi	r24, 0xA4	; 164
    1900:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1902:	e6 e5       	ldi	r30, 0x56	; 86
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	88 23       	and	r24, r24
    190a:	dc f7       	brge	.-10     	; 0x1902 <TWI_start+0x10>
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <TWI_stop>:

void TWI_stop(void)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    191a:	e6 e5       	ldi	r30, 0x56	; 86
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	84 e9       	ldi	r24, 0x94	; 148
    1920:	80 83       	st	Z, r24
}
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <TWI_write>:

void TWI_write(uint8 data)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	0f 92       	push	r0
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1934:	e3 e2       	ldi	r30, 0x23	; 35
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    193c:	e6 e5       	ldi	r30, 0x56	; 86
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	84 e8       	ldi	r24, 0x84	; 132
    1942:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1944:	e6 e5       	ldi	r30, 0x56	; 86
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	88 23       	and	r24, r24
    194c:	dc f7       	brge	.-10     	; 0x1944 <TWI_write+0x1c>
}
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    195e:	e6 e5       	ldi	r30, 0x56	; 86
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	84 ec       	ldi	r24, 0xC4	; 196
    1964:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1966:	e6 e5       	ldi	r30, 0x56	; 86
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	88 23       	and	r24, r24
    196e:	dc f7       	brge	.-10     	; 0x1966 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1970:	e3 e2       	ldi	r30, 0x23	; 35
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
}
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1984:	e6 e5       	ldi	r30, 0x56	; 86
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	84 e8       	ldi	r24, 0x84	; 132
    198a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    198c:	e6 e5       	ldi	r30, 0x56	; 86
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	88 23       	and	r24, r24
    1994:	dc f7       	brge	.-10     	; 0x198c <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1996:	e3 e2       	ldi	r30, 0x23	; 35
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
}
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	0f 92       	push	r0
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    19ac:	e1 e2       	ldi	r30, 0x21	; 33
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	88 7f       	andi	r24, 0xF8	; 248
    19b4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <Timer_init>:
 * 3. determine Config_Ptr->edge type in counter mode.
 * 4. determine timer mode.
 *
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	60 97       	sbiw	r28, 0x10	; 16
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
	/* switch on timers on AVR*/
	switch(Config_Ptr->timer)
    19d8:	e9 81       	ldd	r30, Y+1	; 0x01
    19da:	fa 81       	ldd	r31, Y+2	; 0x02
    19dc:	81 81       	ldd	r24, Z+1	; 0x01
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	38 8b       	std	Y+16, r19	; 0x10
    19e4:	2f 87       	std	Y+15, r18	; 0x0f
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	39 f0       	breq	.+14     	; 0x19fc <Timer_init+0x3c>
    19ee:	2f 85       	ldd	r18, Y+15	; 0x0f
    19f0:	38 89       	ldd	r19, Y+16	; 0x10
    19f2:	21 30       	cpi	r18, 0x01	; 1
    19f4:	31 05       	cpc	r19, r1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <Timer_init+0x3a>
    19f8:	a1 c1       	rjmp	.+834    	; 0x1d3c <Timer_init+0x37c>
    19fa:	a5 c3       	rjmp	.+1866   	; 0x2146 <Timer_init+0x786>
	{
	case TIMER_0:
		/*switch on clock devision factor of Timer_0 Clock */
		switch(Config_Ptr->prescaler)
    19fc:	e9 81       	ldd	r30, Y+1	; 0x01
    19fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1a00:	80 81       	ld	r24, Z
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	3e 87       	std	Y+14, r19	; 0x0e
    1a08:	2d 87       	std	Y+13, r18	; 0x0d
    1a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	91 05       	cpc	r25, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <Timer_init+0x56>
    1a14:	63 c0       	rjmp	.+198    	; 0x1adc <Timer_init+0x11c>
    1a16:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a18:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a1a:	23 30       	cpi	r18, 0x03	; 3
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	64 f4       	brge	.+24     	; 0x1a38 <Timer_init+0x78>
    1a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <Timer_init+0x6a>
    1a28:	85 c0       	rjmp	.+266    	; 0x1b34 <Timer_init+0x174>
    1a2a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a2c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a2e:	21 30       	cpi	r18, 0x01	; 1
    1a30:	31 05       	cpc	r19, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <Timer_init+0x76>
    1a34:	69 c0       	rjmp	.+210    	; 0x1b08 <Timer_init+0x148>
    1a36:	93 c0       	rjmp	.+294    	; 0x1b5e <Timer_init+0x19e>
    1a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3c:	84 30       	cpi	r24, 0x04	; 4
    1a3e:	91 05       	cpc	r25, r1
    1a40:	59 f0       	breq	.+22     	; 0x1a58 <Timer_init+0x98>
    1a42:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a44:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a46:	24 30       	cpi	r18, 0x04	; 4
    1a48:	31 05       	cpc	r19, r1
    1a4a:	94 f1       	brlt	.+100    	; 0x1ab0 <Timer_init+0xf0>
    1a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a50:	85 30       	cpi	r24, 0x05	; 5
    1a52:	91 05       	cpc	r25, r1
    1a54:	b9 f0       	breq	.+46     	; 0x1a84 <Timer_init+0xc4>
    1a56:	83 c0       	rjmp	.+262    	; 0x1b5e <Timer_init+0x19e>
		{
		case F_CPU_256:
			CLEAR_BIT(TCCR0 , CS00);
    1a58:	a3 e5       	ldi	r26, 0x53	; 83
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e3 e5       	ldi	r30, 0x53	; 83
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8e 7f       	andi	r24, 0xFE	; 254
    1a64:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS01);
    1a66:	a3 e5       	ldi	r26, 0x53	; 83
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e3 e5       	ldi	r30, 0x53	; 83
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8d 7f       	andi	r24, 0xFD	; 253
    1a72:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , CS02);
    1a74:	a3 e5       	ldi	r26, 0x53	; 83
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e3 e5       	ldi	r30, 0x53	; 83
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	84 60       	ori	r24, 0x04	; 4
    1a80:	8c 93       	st	X, r24
    1a82:	6d c0       	rjmp	.+218    	; 0x1b5e <Timer_init+0x19e>
			break;
		case F_CPU_1024:
			SET_BIT(TCCR0 , CS00);
    1a84:	a3 e5       	ldi	r26, 0x53	; 83
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e3 e5       	ldi	r30, 0x53	; 83
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	81 60       	ori	r24, 0x01	; 1
    1a90:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS01);
    1a92:	a3 e5       	ldi	r26, 0x53	; 83
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e3 e5       	ldi	r30, 0x53	; 83
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8d 7f       	andi	r24, 0xFD	; 253
    1a9e:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , CS02);
    1aa0:	a3 e5       	ldi	r26, 0x53	; 83
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e3 e5       	ldi	r30, 0x53	; 83
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	84 60       	ori	r24, 0x04	; 4
    1aac:	8c 93       	st	X, r24
    1aae:	57 c0       	rjmp	.+174    	; 0x1b5e <Timer_init+0x19e>
			break;

		case F_CPU_64:
			SET_BIT(TCCR0 , CS00);
    1ab0:	a3 e5       	ldi	r26, 0x53	; 83
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e3 e5       	ldi	r30, 0x53	; 83
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	81 60       	ori	r24, 0x01	; 1
    1abc:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , CS01);
    1abe:	a3 e5       	ldi	r26, 0x53	; 83
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e3 e5       	ldi	r30, 0x53	; 83
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	82 60       	ori	r24, 0x02	; 2
    1aca:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 ,CS02);
    1acc:	a3 e5       	ldi	r26, 0x53	; 83
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e3 e5       	ldi	r30, 0x53	; 83
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8b 7f       	andi	r24, 0xFB	; 251
    1ad8:	8c 93       	st	X, r24
    1ada:	41 c0       	rjmp	.+130    	; 0x1b5e <Timer_init+0x19e>
			break;

		case F_CPU_8:
			CLEAR_BIT(TCCR0 , CS00);
    1adc:	a3 e5       	ldi	r26, 0x53	; 83
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e3 e5       	ldi	r30, 0x53	; 83
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8e 7f       	andi	r24, 0xFE	; 254
    1ae8:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , CS01);
    1aea:	a3 e5       	ldi	r26, 0x53	; 83
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e3 e5       	ldi	r30, 0x53	; 83
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	82 60       	ori	r24, 0x02	; 2
    1af6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS02);
    1af8:	a3 e5       	ldi	r26, 0x53	; 83
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e3 e5       	ldi	r30, 0x53	; 83
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8b 7f       	andi	r24, 0xFB	; 251
    1b04:	8c 93       	st	X, r24
    1b06:	2b c0       	rjmp	.+86     	; 0x1b5e <Timer_init+0x19e>
			break;

		case F_CPU_1:
			SET_BIT(TCCR0 , CS00);
    1b08:	a3 e5       	ldi	r26, 0x53	; 83
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e3 e5       	ldi	r30, 0x53	; 83
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	81 60       	ori	r24, 0x01	; 1
    1b14:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS01);
    1b16:	a3 e5       	ldi	r26, 0x53	; 83
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e3 e5       	ldi	r30, 0x53	; 83
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	8d 7f       	andi	r24, 0xFD	; 253
    1b22:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS02);
    1b24:	a3 e5       	ldi	r26, 0x53	; 83
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e3 e5       	ldi	r30, 0x53	; 83
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8b 7f       	andi	r24, 0xFB	; 251
    1b30:	8c 93       	st	X, r24
    1b32:	15 c0       	rjmp	.+42     	; 0x1b5e <Timer_init+0x19e>
			break;
		case NO_CLOCK:
			CLEAR_BIT(TCCR0 , CS00);
    1b34:	a3 e5       	ldi	r26, 0x53	; 83
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e3 e5       	ldi	r30, 0x53	; 83
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8e 7f       	andi	r24, 0xFE	; 254
    1b40:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS01);
    1b42:	a3 e5       	ldi	r26, 0x53	; 83
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e3 e5       	ldi	r30, 0x53	; 83
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8d 7f       	andi	r24, 0xFD	; 253
    1b4e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 , CS02);
    1b50:	a3 e5       	ldi	r26, 0x53	; 83
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e3 e5       	ldi	r30, 0x53	; 83
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	8b 7f       	andi	r24, 0xFB	; 251
    1b5c:	8c 93       	st	X, r24
			break;
		}
		/*switch on modes of timer*/
		switch(Config_Ptr->mode)
    1b5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b60:	fa 81       	ldd	r31, Y+2	; 0x02
    1b62:	83 81       	ldd	r24, Z+3	; 0x03
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	3c 87       	std	Y+12, r19	; 0x0c
    1b6a:	2b 87       	std	Y+11, r18	; 0x0b
    1b6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	91 05       	cpc	r25, r1
    1b74:	a1 f1       	breq	.+104    	; 0x1bde <Timer_init+0x21e>
    1b76:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b78:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <Timer_init+0x1ca>
    1b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b82:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	71 f0       	breq	.+28     	; 0x1ba4 <Timer_init+0x1e4>
    1b88:	de c2       	rjmp	.+1468   	; 0x2146 <Timer_init+0x786>
    1b8a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b8c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b8e:	22 30       	cpi	r18, 0x02	; 2
    1b90:	31 05       	cpc	r19, r1
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <Timer_init+0x1d6>
    1b94:	48 c0       	rjmp	.+144    	; 0x1c26 <Timer_init+0x266>
    1b96:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b98:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b9a:	83 30       	cpi	r24, 0x03	; 3
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <Timer_init+0x1e2>
    1ba0:	6d c0       	rjmp	.+218    	; 0x1c7c <Timer_init+0x2bc>
    1ba2:	d1 c2       	rjmp	.+1442   	; 0x2146 <Timer_init+0x786>
		{
		case Normal:
			SET_BIT(TCCR0,FOC0);
    1ba4:	a3 e5       	ldi	r26, 0x53	; 83
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e3 e5       	ldi	r30, 0x53	; 83
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	80 68       	ori	r24, 0x80	; 128
    1bb0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 ,WGM00);
    1bb2:	a3 e5       	ldi	r26, 0x53	; 83
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e3 e5       	ldi	r30, 0x53	; 83
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	8f 7b       	andi	r24, 0xBF	; 191
    1bbe:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 ,WGM01);
    1bc0:	a3 e5       	ldi	r26, 0x53	; 83
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e3 e5       	ldi	r30, 0x53	; 83
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	87 7f       	andi	r24, 0xF7	; 247
    1bcc:	8c 93       	st	X, r24
			/*set the initial value of counter*/
			TCNT0 = Config_Ptr->preload;
    1bce:	a2 e5       	ldi	r26, 0x52	; 82
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd6:	84 81       	ldd	r24, Z+4	; 0x04
    1bd8:	95 81       	ldd	r25, Z+5	; 0x05
    1bda:	8c 93       	st	X, r24
    1bdc:	b4 c2       	rjmp	.+1384   	; 0x2146 <Timer_init+0x786>
			//PORTB = TIMSK;
			break;


		case CTC:
			SET_BIT(TCCR0,FOC0);
    1bde:	a3 e5       	ldi	r26, 0x53	; 83
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e3 e5       	ldi	r30, 0x53	; 83
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	80 68       	ori	r24, 0x80	; 128
    1bea:	8c 93       	st	X, r24
			SET_BIT(TCCR0 ,WGM01);
    1bec:	a3 e5       	ldi	r26, 0x53	; 83
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e3 e5       	ldi	r30, 0x53	; 83
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	88 60       	ori	r24, 0x08	; 8
    1bf8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 ,WGM00);
    1bfa:	a3 e5       	ldi	r26, 0x53	; 83
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e3 e5       	ldi	r30, 0x53	; 83
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8f 7b       	andi	r24, 0xBF	; 191
    1c06:	8c 93       	st	X, r24
			/*set the initial value of counter*/
			TCNT0 = Config_Ptr->preload;
    1c08:	a2 e5       	ldi	r26, 0x52	; 82
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c10:	84 81       	ldd	r24, Z+4	; 0x04
    1c12:	95 81       	ldd	r25, Z+5	; 0x05
    1c14:	8c 93       	st	X, r24
			/*set the value to generate interrupt signal on it*/
			OCR0 = Config_Ptr->OCR;
    1c16:	ac e5       	ldi	r26, 0x5C	; 92
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1e:	80 85       	ldd	r24, Z+8	; 0x08
    1c20:	91 85       	ldd	r25, Z+9	; 0x09
    1c22:	8c 93       	st	X, r24
    1c24:	90 c2       	rjmp	.+1312   	; 0x2146 <Timer_init+0x786>
			break;


			/*mode to generate PWM signal*/
		case FastPWM:/*non inverted mode*/
			SET_BIT(TCCR0 ,WGM01);
    1c26:	a3 e5       	ldi	r26, 0x53	; 83
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e3 e5       	ldi	r30, 0x53	; 83
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 60       	ori	r24, 0x08	; 8
    1c32:	8c 93       	st	X, r24
			SET_BIT(TCCR0 ,WGM00);
    1c34:	a3 e5       	ldi	r26, 0x53	; 83
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e3 e5       	ldi	r30, 0x53	; 83
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 64       	ori	r24, 0x40	; 64
    1c40:	8c 93       	st	X, r24
			/*set the initial value of counter*/
			TCNT0 = Config_Ptr->preload;
    1c42:	a2 e5       	ldi	r26, 0x52	; 82
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e9 81       	ldd	r30, Y+1	; 0x01
    1c48:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4a:	84 81       	ldd	r24, Z+4	; 0x04
    1c4c:	95 81       	ldd	r25, Z+5	; 0x05
    1c4e:	8c 93       	st	X, r24
			/*set the value to generate interrupt signal on it*/
			OCR0 = Config_Ptr->OCR;
    1c50:	ac e5       	ldi	r26, 0x5C	; 92
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e9 81       	ldd	r30, Y+1	; 0x01
    1c56:	fa 81       	ldd	r31, Y+2	; 0x02
    1c58:	80 85       	ldd	r24, Z+8	; 0x08
    1c5a:	91 85       	ldd	r25, Z+9	; 0x09
    1c5c:	8c 93       	st	X, r24
			//non inverted mode.
			SET_BIT(TCCR0,COM01);
    1c5e:	a3 e5       	ldi	r26, 0x53	; 83
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e3 e5       	ldi	r30, 0x53	; 83
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM00);
    1c6c:	a3 e5       	ldi	r26, 0x53	; 83
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e3 e5       	ldi	r30, 0x53	; 83
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	8f 7e       	andi	r24, 0xEF	; 239
    1c78:	8c 93       	st	X, r24
    1c7a:	65 c2       	rjmp	.+1226   	; 0x2146 <Timer_init+0x786>
			break;


			/*counter mode which count specific event that happen*/
		case counter:
			SET_BIT(TCCR0,FOC0);
    1c7c:	a3 e5       	ldi	r26, 0x53	; 83
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e3 e5       	ldi	r30, 0x53	; 83
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	80 68       	ori	r24, 0x80	; 128
    1c88:	8c 93       	st	X, r24
			SET_BIT(TCCR0 ,WGM01);
    1c8a:	a3 e5       	ldi	r26, 0x53	; 83
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e3 e5       	ldi	r30, 0x53	; 83
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	88 60       	ori	r24, 0x08	; 8
    1c96:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0 ,WGM00);
    1c98:	a3 e5       	ldi	r26, 0x53	; 83
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e3 e5       	ldi	r30, 0x53	; 83
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8f 7b       	andi	r24, 0xBF	; 191
    1ca4:	8c 93       	st	X, r24
			/*set the initial value of counter*/
			TCNT0 = Config_Ptr->preload;
    1ca6:	a2 e5       	ldi	r26, 0x52	; 82
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	84 81       	ldd	r24, Z+4	; 0x04
    1cb0:	95 81       	ldd	r25, Z+5	; 0x05
    1cb2:	8c 93       	st	X, r24
			/*set the value to generate interrupt signal on it*/
			OCR0 = Config_Ptr->OCR;
    1cb4:	ac e5       	ldi	r26, 0x5C	; 92
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	80 85       	ldd	r24, Z+8	; 0x08
    1cbe:	91 85       	ldd	r25, Z+9	; 0x09
    1cc0:	8c 93       	st	X, r24
			/*switch on which edge to increment counter on it*/
			switch(Config_Ptr->edge)
    1cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	3a 87       	std	Y+10, r19	; 0x0a
    1cce:	29 87       	std	Y+9, r18	; 0x09
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	31 f0       	breq	.+12     	; 0x1ce4 <Timer_init+0x324>
    1cd8:	29 85       	ldd	r18, Y+9	; 0x09
    1cda:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cdc:	21 30       	cpi	r18, 0x01	; 1
    1cde:	31 05       	cpc	r19, r1
    1ce0:	b9 f0       	breq	.+46     	; 0x1d10 <Timer_init+0x350>
    1ce2:	31 c2       	rjmp	.+1122   	; 0x2146 <Timer_init+0x786>
			{
			case FALLING:
				CLEAR_BIT(TCCR0 , CS00);
    1ce4:	a3 e5       	ldi	r26, 0x53	; 83
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e3 e5       	ldi	r30, 0x53	; 83
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	8e 7f       	andi	r24, 0xFE	; 254
    1cf0:	8c 93       	st	X, r24
				SET_BIT(TCCR0 , CS01);
    1cf2:	a3 e5       	ldi	r26, 0x53	; 83
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e3 e5       	ldi	r30, 0x53	; 83
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	82 60       	ori	r24, 0x02	; 2
    1cfe:	8c 93       	st	X, r24
				SET_BIT(TCCR0 , CS02);
    1d00:	a3 e5       	ldi	r26, 0x53	; 83
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e3 e5       	ldi	r30, 0x53	; 83
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	84 60       	ori	r24, 0x04	; 4
    1d0c:	8c 93       	st	X, r24
    1d0e:	1b c2       	rjmp	.+1078   	; 0x2146 <Timer_init+0x786>
				break;
			case RISING:
				SET_BIT(TCCR0 , CS00);
    1d10:	a3 e5       	ldi	r26, 0x53	; 83
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e3 e5       	ldi	r30, 0x53	; 83
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	81 60       	ori	r24, 0x01	; 1
    1d1c:	8c 93       	st	X, r24
				SET_BIT(TCCR0 , CS01);
    1d1e:	a3 e5       	ldi	r26, 0x53	; 83
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e3 e5       	ldi	r30, 0x53	; 83
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	82 60       	ori	r24, 0x02	; 2
    1d2a:	8c 93       	st	X, r24
				SET_BIT(TCCR0 , CS02);
    1d2c:	a3 e5       	ldi	r26, 0x53	; 83
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e3 e5       	ldi	r30, 0x53	; 83
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	84 60       	ori	r24, 0x04	; 4
    1d38:	8c 93       	st	X, r24
    1d3a:	05 c2       	rjmp	.+1034   	; 0x2146 <Timer_init+0x786>

		/********************************************************************/
		/*Timer 1*/
		/********************************************************************/
		case TIMER_1:
			SET_BIT(PORTB,0);
    1d3c:	a8 e3       	ldi	r26, 0x38	; 56
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e8 e3       	ldi	r30, 0x38	; 56
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	81 60       	ori	r24, 0x01	; 1
    1d48:	8c 93       	st	X, r24
			/*switch on clock devision factor of Timer_1 Clock */
			switch(Config_Ptr->prescaler)
    1d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4e:	80 81       	ld	r24, Z
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	38 87       	std	Y+8, r19	; 0x08
    1d56:	2f 83       	std	Y+7, r18	; 0x07
    1d58:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5a:	98 85       	ldd	r25, Y+8	; 0x08
    1d5c:	82 30       	cpi	r24, 0x02	; 2
    1d5e:	91 05       	cpc	r25, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <Timer_init+0x3a4>
    1d62:	6a c0       	rjmp	.+212    	; 0x1e38 <Timer_init+0x478>
    1d64:	2f 81       	ldd	r18, Y+7	; 0x07
    1d66:	38 85       	ldd	r19, Y+8	; 0x08
    1d68:	23 30       	cpi	r18, 0x03	; 3
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	64 f4       	brge	.+24     	; 0x1d86 <Timer_init+0x3c6>
    1d6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d70:	98 85       	ldd	r25, Y+8	; 0x08
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <Timer_init+0x3b8>
    1d76:	8c c0       	rjmp	.+280    	; 0x1e90 <Timer_init+0x4d0>
    1d78:	2f 81       	ldd	r18, Y+7	; 0x07
    1d7a:	38 85       	ldd	r19, Y+8	; 0x08
    1d7c:	21 30       	cpi	r18, 0x01	; 1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <Timer_init+0x3c4>
    1d82:	70 c0       	rjmp	.+224    	; 0x1e64 <Timer_init+0x4a4>
    1d84:	9a c0       	rjmp	.+308    	; 0x1eba <Timer_init+0x4fa>
    1d86:	8f 81       	ldd	r24, Y+7	; 0x07
    1d88:	98 85       	ldd	r25, Y+8	; 0x08
    1d8a:	84 30       	cpi	r24, 0x04	; 4
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	59 f0       	breq	.+22     	; 0x1da6 <Timer_init+0x3e6>
    1d90:	2f 81       	ldd	r18, Y+7	; 0x07
    1d92:	38 85       	ldd	r19, Y+8	; 0x08
    1d94:	24 30       	cpi	r18, 0x04	; 4
    1d96:	31 05       	cpc	r19, r1
    1d98:	cc f1       	brlt	.+114    	; 0x1e0c <Timer_init+0x44c>
    1d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9c:	98 85       	ldd	r25, Y+8	; 0x08
    1d9e:	85 30       	cpi	r24, 0x05	; 5
    1da0:	91 05       	cpc	r25, r1
    1da2:	b9 f0       	breq	.+46     	; 0x1dd2 <Timer_init+0x412>
    1da4:	8a c0       	rjmp	.+276    	; 0x1eba <Timer_init+0x4fa>
			{
			case F_CPU_256:
				CLEAR_BIT(TCCR1B , CS10);
    1da6:	ae e4       	ldi	r26, 0x4E	; 78
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ee e4       	ldi	r30, 0x4E	; 78
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	8e 7f       	andi	r24, 0xFE	; 254
    1db2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS11);
    1db4:	ae e4       	ldi	r26, 0x4E	; 78
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	ee e4       	ldi	r30, 0x4E	; 78
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8d 7f       	andi	r24, 0xFD	; 253
    1dc0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B , CS12);
    1dc2:	ae e4       	ldi	r26, 0x4E	; 78
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	ee e4       	ldi	r30, 0x4E	; 78
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	84 60       	ori	r24, 0x04	; 4
    1dce:	8c 93       	st	X, r24
    1dd0:	74 c0       	rjmp	.+232    	; 0x1eba <Timer_init+0x4fa>
				break;
			case F_CPU_1024:
				SET_BIT(PORTB,1);
    1dd2:	a8 e3       	ldi	r26, 0x38	; 56
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e8 e3       	ldi	r30, 0x38	; 56
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	82 60       	ori	r24, 0x02	; 2
    1dde:	8c 93       	st	X, r24
				SET_BIT(TCCR1B , CS10);
    1de0:	ae e4       	ldi	r26, 0x4E	; 78
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	ee e4       	ldi	r30, 0x4E	; 78
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	81 60       	ori	r24, 0x01	; 1
    1dec:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS11);
    1dee:	ae e4       	ldi	r26, 0x4E	; 78
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	ee e4       	ldi	r30, 0x4E	; 78
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	8d 7f       	andi	r24, 0xFD	; 253
    1dfa:	8c 93       	st	X, r24
				SET_BIT(TCCR1B , CS12);
    1dfc:	ae e4       	ldi	r26, 0x4E	; 78
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	ee e4       	ldi	r30, 0x4E	; 78
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	84 60       	ori	r24, 0x04	; 4
    1e08:	8c 93       	st	X, r24
    1e0a:	57 c0       	rjmp	.+174    	; 0x1eba <Timer_init+0x4fa>
				break;

			case F_CPU_64:
				SET_BIT(TCCR1B , CS10);
    1e0c:	ae e4       	ldi	r26, 0x4E	; 78
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	ee e4       	ldi	r30, 0x4E	; 78
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	81 60       	ori	r24, 0x01	; 1
    1e18:	8c 93       	st	X, r24
				SET_BIT(TCCR1B , CS11);
    1e1a:	ae e4       	ldi	r26, 0x4E	; 78
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	ee e4       	ldi	r30, 0x4E	; 78
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	82 60       	ori	r24, 0x02	; 2
    1e26:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS12);
    1e28:	ae e4       	ldi	r26, 0x4E	; 78
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	ee e4       	ldi	r30, 0x4E	; 78
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	8b 7f       	andi	r24, 0xFB	; 251
    1e34:	8c 93       	st	X, r24
    1e36:	41 c0       	rjmp	.+130    	; 0x1eba <Timer_init+0x4fa>
				break;

			case F_CPU_8:
				CLEAR_BIT(TCCR1B , CS10);
    1e38:	ae e4       	ldi	r26, 0x4E	; 78
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	ee e4       	ldi	r30, 0x4E	; 78
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8e 7f       	andi	r24, 0xFE	; 254
    1e44:	8c 93       	st	X, r24
				SET_BIT(TCCR1B , CS11);
    1e46:	ae e4       	ldi	r26, 0x4E	; 78
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	ee e4       	ldi	r30, 0x4E	; 78
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	82 60       	ori	r24, 0x02	; 2
    1e52:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS12);
    1e54:	ae e4       	ldi	r26, 0x4E	; 78
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	ee e4       	ldi	r30, 0x4E	; 78
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8b 7f       	andi	r24, 0xFB	; 251
    1e60:	8c 93       	st	X, r24
    1e62:	2b c0       	rjmp	.+86     	; 0x1eba <Timer_init+0x4fa>
				break;

			case F_CPU_1:
				SET_BIT(TCCR1B , CS10);
    1e64:	ae e4       	ldi	r26, 0x4E	; 78
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	ee e4       	ldi	r30, 0x4E	; 78
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	81 60       	ori	r24, 0x01	; 1
    1e70:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS11);
    1e72:	ae e4       	ldi	r26, 0x4E	; 78
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	ee e4       	ldi	r30, 0x4E	; 78
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	8d 7f       	andi	r24, 0xFD	; 253
    1e7e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS12);
    1e80:	ae e4       	ldi	r26, 0x4E	; 78
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	ee e4       	ldi	r30, 0x4E	; 78
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	8b 7f       	andi	r24, 0xFB	; 251
    1e8c:	8c 93       	st	X, r24
    1e8e:	15 c0       	rjmp	.+42     	; 0x1eba <Timer_init+0x4fa>
				break;
			case NO_CLOCK:
				CLEAR_BIT(TCCR1B , CS10);
    1e90:	ae e4       	ldi	r26, 0x4E	; 78
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	ee e4       	ldi	r30, 0x4E	; 78
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	8e 7f       	andi	r24, 0xFE	; 254
    1e9c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS11);
    1e9e:	ae e4       	ldi	r26, 0x4E	; 78
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	ee e4       	ldi	r30, 0x4E	; 78
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8d 7f       	andi	r24, 0xFD	; 253
    1eaa:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B , CS12);
    1eac:	ae e4       	ldi	r26, 0x4E	; 78
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ee e4       	ldi	r30, 0x4E	; 78
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8b 7f       	andi	r24, 0xFB	; 251
    1eb8:	8c 93       	st	X, r24
				break;
			}
			switch(Config_Ptr->mode)
    1eba:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebe:	83 81       	ldd	r24, Z+3	; 0x03
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	3e 83       	std	Y+6, r19	; 0x06
    1ec6:	2d 83       	std	Y+5, r18	; 0x05
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	91 05       	cpc	r25, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <Timer_init+0x514>
    1ed2:	52 c0       	rjmp	.+164    	; 0x1f78 <Timer_init+0x5b8>
    1ed4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ed6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ed8:	22 30       	cpi	r18, 0x02	; 2
    1eda:	31 05       	cpc	r19, r1
    1edc:	2c f4       	brge	.+10     	; 0x1ee8 <Timer_init+0x528>
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	71 f0       	breq	.+28     	; 0x1f02 <Timer_init+0x542>
    1ee6:	2f c1       	rjmp	.+606    	; 0x2146 <Timer_init+0x786>
    1ee8:	2d 81       	ldd	r18, Y+5	; 0x05
    1eea:	3e 81       	ldd	r19, Y+6	; 0x06
    1eec:	22 30       	cpi	r18, 0x02	; 2
    1eee:	31 05       	cpc	r19, r1
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <Timer_init+0x534>
    1ef2:	71 c0       	rjmp	.+226    	; 0x1fd6 <Timer_init+0x616>
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	91 05       	cpc	r25, r1
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <Timer_init+0x540>
    1efe:	9d c0       	rjmp	.+314    	; 0x203a <Timer_init+0x67a>
    1f00:	22 c1       	rjmp	.+580    	; 0x2146 <Timer_init+0x786>
			{
			case Normal:
				SET_BIT(TCCR1A,FOC1A);
    1f02:	af e4       	ldi	r26, 0x4F	; 79
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	ef e4       	ldi	r30, 0x4F	; 79
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 60       	ori	r24, 0x08	; 8
    1f0e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,FOC1B);
    1f10:	af e4       	ldi	r26, 0x4F	; 79
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	ef e4       	ldi	r30, 0x4F	; 79
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	84 60       	ori	r24, 0x04	; 4
    1f1c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A ,WGM10);
    1f1e:	af e4       	ldi	r26, 0x4F	; 79
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	ef e4       	ldi	r30, 0x4F	; 79
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	8e 7f       	andi	r24, 0xFE	; 254
    1f2a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A ,WGM11);
    1f2c:	af e4       	ldi	r26, 0x4F	; 79
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ef e4       	ldi	r30, 0x4F	; 79
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	8d 7f       	andi	r24, 0xFD	; 253
    1f38:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B ,WGM12);
    1f3a:	ae e4       	ldi	r26, 0x4E	; 78
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	ee e4       	ldi	r30, 0x4E	; 78
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	87 7f       	andi	r24, 0xF7	; 247
    1f46:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B ,WGM13);
    1f48:	ae e4       	ldi	r26, 0x4E	; 78
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	ee e4       	ldi	r30, 0x4E	; 78
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	8f 7e       	andi	r24, 0xEF	; 239
    1f54:	8c 93       	st	X, r24
				/*set the initial value of the 16 bits register of counter*/
				TCNT1H = (Config_Ptr->preload>>8);
    1f56:	ad e4       	ldi	r26, 0x4D	; 77
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5e:	84 81       	ldd	r24, Z+4	; 0x04
    1f60:	95 81       	ldd	r25, Z+5	; 0x05
    1f62:	89 2f       	mov	r24, r25
    1f64:	99 27       	eor	r25, r25
    1f66:	8c 93       	st	X, r24
				TCNT1L = (Config_Ptr->preload);
    1f68:	ac e4       	ldi	r26, 0x4C	; 76
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f70:	84 81       	ldd	r24, Z+4	; 0x04
    1f72:	95 81       	ldd	r25, Z+5	; 0x05
    1f74:	8c 93       	st	X, r24
    1f76:	e7 c0       	rjmp	.+462    	; 0x2146 <Timer_init+0x786>
				break;


			case CTC: //OCR not ICR
				SET_BIT(PORTB,2);
    1f78:	a8 e3       	ldi	r26, 0x38	; 56
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e8 e3       	ldi	r30, 0x38	; 56
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	84 60       	ori	r24, 0x04	; 4
    1f84:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,FOC1A);
    1f86:	af e4       	ldi	r26, 0x4F	; 79
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	ef e4       	ldi	r30, 0x4F	; 79
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	88 60       	ori	r24, 0x08	; 8
    1f92:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,FOC1B);
    1f94:	af e4       	ldi	r26, 0x4F	; 79
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	ef e4       	ldi	r30, 0x4F	; 79
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	84 60       	ori	r24, 0x04	; 4
    1fa0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B ,WGM12);
    1fa2:	ae e4       	ldi	r26, 0x4E	; 78
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ee e4       	ldi	r30, 0x4E	; 78
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	88 60       	ori	r24, 0x08	; 8
    1fae:	8c 93       	st	X, r24
				/*set the initial value of the 16 bits register of counter*/
				TCNT1 = Config_Ptr->preload;
    1fb0:	ac e4       	ldi	r26, 0x4C	; 76
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb8:	84 81       	ldd	r24, Z+4	; 0x04
    1fba:	95 81       	ldd	r25, Z+5	; 0x05
    1fbc:	11 96       	adiw	r26, 0x01	; 1
    1fbe:	9c 93       	st	X, r25
    1fc0:	8e 93       	st	-X, r24
				/*set value to be the maximum value which generate interrupt on it*/
				OCR1A=Config_Ptr->OCR;
    1fc2:	aa e4       	ldi	r26, 0x4A	; 74
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fca:	80 85       	ldd	r24, Z+8	; 0x08
    1fcc:	91 85       	ldd	r25, Z+9	; 0x09
    1fce:	11 96       	adiw	r26, 0x01	; 1
    1fd0:	9c 93       	st	X, r25
    1fd2:	8e 93       	st	-X, r24
    1fd4:	b8 c0       	rjmp	.+368    	; 0x2146 <Timer_init+0x786>

			case FastPWM://non inverted mode.

				// mode 14 ICR value is the top value.
				//OCR1A
				CLEAR_BIT(TCCR1A ,WGM10);
    1fd6:	af e4       	ldi	r26, 0x4F	; 79
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	ef e4       	ldi	r30, 0x4F	; 79
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	8e 7f       	andi	r24, 0xFE	; 254
    1fe2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A ,WGM11);
    1fe4:	af e4       	ldi	r26, 0x4F	; 79
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	ef e4       	ldi	r30, 0x4F	; 79
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	82 60       	ori	r24, 0x02	; 2
    1ff0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B ,WGM12);
    1ff2:	ae e4       	ldi	r26, 0x4E	; 78
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	ee e4       	ldi	r30, 0x4E	; 78
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	88 60       	ori	r24, 0x08	; 8
    1ffe:	8c 93       	st	X, r24
				SET_BIT(TCCR1B ,WGM13);
    2000:	ae e4       	ldi	r26, 0x4E	; 78
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	ee e4       	ldi	r30, 0x4E	; 78
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	80 61       	ori	r24, 0x10	; 16
    200c:	8c 93       	st	X, r24
				ICR1L = Config_Ptr->ICR;
    200e:	a6 e4       	ldi	r26, 0x46	; 70
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e9 81       	ldd	r30, Y+1	; 0x01
    2014:	fa 81       	ldd	r31, Y+2	; 0x02
    2016:	86 81       	ldd	r24, Z+6	; 0x06
    2018:	97 81       	ldd	r25, Z+7	; 0x07
    201a:	8c 93       	st	X, r24
				//non inverted mode.
				SET_BIT(TCCR1A,COM1A1);
    201c:	af e4       	ldi	r26, 0x4F	; 79
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	ef e4       	ldi	r30, 0x4F	; 79
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	80 68       	ori	r24, 0x80	; 128
    2028:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A0);
    202a:	af e4       	ldi	r26, 0x4F	; 79
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	ef e4       	ldi	r30, 0x4F	; 79
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8f 7b       	andi	r24, 0xBF	; 191
    2036:	8c 93       	st	X, r24
    2038:	86 c0       	rjmp	.+268    	; 0x2146 <Timer_init+0x786>
				break;

			case counter:
				SET_BIT(TCCR1A,FOC1A);
    203a:	af e4       	ldi	r26, 0x4F	; 79
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	ef e4       	ldi	r30, 0x4F	; 79
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	88 60       	ori	r24, 0x08	; 8
    2046:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,FOC1B);
    2048:	af e4       	ldi	r26, 0x4F	; 79
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	ef e4       	ldi	r30, 0x4F	; 79
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	84 60       	ori	r24, 0x04	; 4
    2054:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A ,WGM10);
    2056:	af e4       	ldi	r26, 0x4F	; 79
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	ef e4       	ldi	r30, 0x4F	; 79
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8e 7f       	andi	r24, 0xFE	; 254
    2062:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A ,WGM11);
    2064:	af e4       	ldi	r26, 0x4F	; 79
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	ef e4       	ldi	r30, 0x4F	; 79
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8d 7f       	andi	r24, 0xFD	; 253
    2070:	8c 93       	st	X, r24
				SET_BIT(TCCR1B ,WGM12);
    2072:	ae e4       	ldi	r26, 0x4E	; 78
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ee e4       	ldi	r30, 0x4E	; 78
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	88 60       	ori	r24, 0x08	; 8
    207e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B ,WGM13);
    2080:	ae e4       	ldi	r26, 0x4E	; 78
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	ee e4       	ldi	r30, 0x4E	; 78
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	8f 7e       	andi	r24, 0xEF	; 239
    208c:	8c 93       	st	X, r24
				/*set the initial value of the 16 bits register of counter*/
				TCNT1H = (Config_Ptr->preload>>8);
    208e:	ad e4       	ldi	r26, 0x4D	; 77
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e9 81       	ldd	r30, Y+1	; 0x01
    2094:	fa 81       	ldd	r31, Y+2	; 0x02
    2096:	84 81       	ldd	r24, Z+4	; 0x04
    2098:	95 81       	ldd	r25, Z+5	; 0x05
    209a:	89 2f       	mov	r24, r25
    209c:	99 27       	eor	r25, r25
    209e:	8c 93       	st	X, r24
				TCNT1L = (Config_Ptr->preload);
    20a0:	ac e4       	ldi	r26, 0x4C	; 76
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e9 81       	ldd	r30, Y+1	; 0x01
    20a6:	fa 81       	ldd	r31, Y+2	; 0x02
    20a8:	84 81       	ldd	r24, Z+4	; 0x04
    20aa:	95 81       	ldd	r25, Z+5	; 0x05
    20ac:	8c 93       	st	X, r24
				/*set value to be the maximum value which generate interrupt on it*/
				OCR1AH = (Config_Ptr->OCR>>8);
    20ae:	ab e4       	ldi	r26, 0x4B	; 75
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e9 81       	ldd	r30, Y+1	; 0x01
    20b4:	fa 81       	ldd	r31, Y+2	; 0x02
    20b6:	80 85       	ldd	r24, Z+8	; 0x08
    20b8:	91 85       	ldd	r25, Z+9	; 0x09
    20ba:	89 2f       	mov	r24, r25
    20bc:	99 27       	eor	r25, r25
    20be:	8c 93       	st	X, r24
				OCR1AL = Config_Ptr->OCR; /* OCFA is the interrupt flag*/
    20c0:	aa e4       	ldi	r26, 0x4A	; 74
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e9 81       	ldd	r30, Y+1	; 0x01
    20c6:	fa 81       	ldd	r31, Y+2	; 0x02
    20c8:	80 85       	ldd	r24, Z+8	; 0x08
    20ca:	91 85       	ldd	r25, Z+9	; 0x09
    20cc:	8c 93       	st	X, r24
				switch(Config_Ptr->edge)
    20ce:	e9 81       	ldd	r30, Y+1	; 0x01
    20d0:	fa 81       	ldd	r31, Y+2	; 0x02
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	3c 83       	std	Y+4, r19	; 0x04
    20da:	2b 83       	std	Y+3, r18	; 0x03
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	31 f0       	breq	.+12     	; 0x20f0 <Timer_init+0x730>
    20e4:	2b 81       	ldd	r18, Y+3	; 0x03
    20e6:	3c 81       	ldd	r19, Y+4	; 0x04
    20e8:	21 30       	cpi	r18, 0x01	; 1
    20ea:	31 05       	cpc	r19, r1
    20ec:	b9 f0       	breq	.+46     	; 0x211c <Timer_init+0x75c>
    20ee:	2b c0       	rjmp	.+86     	; 0x2146 <Timer_init+0x786>
				{
				case FALLING:
					CLEAR_BIT(TCCR1B , CS10);
    20f0:	ae e4       	ldi	r26, 0x4E	; 78
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	ee e4       	ldi	r30, 0x4E	; 78
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	8e 7f       	andi	r24, 0xFE	; 254
    20fc:	8c 93       	st	X, r24
					SET_BIT(TCCR1B , CS11);
    20fe:	ae e4       	ldi	r26, 0x4E	; 78
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	ee e4       	ldi	r30, 0x4E	; 78
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	82 60       	ori	r24, 0x02	; 2
    210a:	8c 93       	st	X, r24
					SET_BIT(TCCR1B , CS12);
    210c:	ae e4       	ldi	r26, 0x4E	; 78
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	ee e4       	ldi	r30, 0x4E	; 78
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	84 60       	ori	r24, 0x04	; 4
    2118:	8c 93       	st	X, r24
    211a:	15 c0       	rjmp	.+42     	; 0x2146 <Timer_init+0x786>
					break;
				case RISING:
					SET_BIT(TCCR1B , CS10);
    211c:	ae e4       	ldi	r26, 0x4E	; 78
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	ee e4       	ldi	r30, 0x4E	; 78
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	81 60       	ori	r24, 0x01	; 1
    2128:	8c 93       	st	X, r24
					SET_BIT(TCCR1B , CS11);
    212a:	ae e4       	ldi	r26, 0x4E	; 78
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	ee e4       	ldi	r30, 0x4E	; 78
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	82 60       	ori	r24, 0x02	; 2
    2136:	8c 93       	st	X, r24
					SET_BIT(TCCR1B , CS12);
    2138:	ae e4       	ldi	r26, 0x4E	; 78
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	ee e4       	ldi	r30, 0x4E	; 78
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	84 60       	ori	r24, 0x04	; 4
    2144:	8c 93       	st	X, r24

			}
			break;
	}

}
    2146:	60 96       	adiw	r28, 0x10	; 16
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2160:	eb e2       	ldi	r30, 0x2B	; 43
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2168:	ea e2       	ldi	r30, 0x2A	; 42
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	88 e1       	ldi	r24, 0x18	; 24
    216e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2170:	e0 e4       	ldi	r30, 0x40	; 64
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	86 e8       	ldi	r24, 0x86	; 134
    2176:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2178:	e0 e4       	ldi	r30, 0x40	; 64
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    217e:	e9 e2       	ldi	r30, 0x29	; 41
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	8c e0       	ldi	r24, 0x0C	; 12
    2184:	80 83       	st	Z, r24
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	0f 92       	push	r0
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2198:	eb e2       	ldi	r30, 0x2B	; 43
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	88 2f       	mov	r24, r24
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	80 72       	andi	r24, 0x20	; 32
    21a4:	90 70       	andi	r25, 0x00	; 0
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	b9 f3       	breq	.-18     	; 0x2198 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    21aa:	ec e2       	ldi	r30, 0x2C	; 44
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    21c2:	eb e2       	ldi	r30, 0x2B	; 43
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	88 23       	and	r24, r24
    21ca:	dc f7       	brge	.-10     	; 0x21c2 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    21cc:	ec e2       	ldi	r30, 0x2C	; 44
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
}
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	00 d0       	rcall	.+0      	; 0x21de <UART_sendString+0x6>
    21de:	0f 92       	push	r0
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	9b 83       	std	Y+3, r25	; 0x03
    21e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21e8:	19 82       	std	Y+1, r1	; 0x01
    21ea:	0e c0       	rjmp	.+28     	; 0x2208 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	9b 81       	ldd	r25, Y+3	; 0x03
    21f6:	fc 01       	movw	r30, r24
    21f8:	e2 0f       	add	r30, r18
    21fa:	f3 1f       	adc	r31, r19
    21fc:	80 81       	ld	r24, Z
    21fe:	0e 94 c6 10 	call	0x218c	; 0x218c <UART_sendByte>
		i++;
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	9b 81       	ldd	r25, Y+3	; 0x03
    2212:	fc 01       	movw	r30, r24
    2214:	e2 0f       	add	r30, r18
    2216:	f3 1f       	adc	r31, r19
    2218:	80 81       	ld	r24, Z
    221a:	88 23       	and	r24, r24
    221c:	39 f7       	brne	.-50     	; 0x21ec <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <UART_receiveString+0xa>
    2234:	0f 92       	push	r0
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	9b 83       	std	Y+3, r25	; 0x03
    223c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    223e:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	9b 81       	ldd	r25, Y+3	; 0x03
    224a:	8c 01       	movw	r16, r24
    224c:	02 0f       	add	r16, r18
    224e:	13 1f       	adc	r17, r19
    2250:	0e 94 dd 10 	call	0x21ba	; 0x21ba <UART_recieveByte>
    2254:	f8 01       	movw	r30, r16
    2256:	80 83       	st	Z, r24
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	8f 5f       	subi	r24, 0xFF	; 255
    225e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	9b 81       	ldd	r25, Y+3	; 0x03
    226a:	8c 01       	movw	r16, r24
    226c:	02 0f       	add	r16, r18
    226e:	13 1f       	adc	r17, r19
    2270:	0e 94 dd 10 	call	0x21ba	; 0x21ba <UART_recieveByte>
    2274:	f8 01       	movw	r30, r16
    2276:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	9b 81       	ldd	r25, Y+3	; 0x03
    2282:	fc 01       	movw	r30, r24
    2284:	e2 0f       	add	r30, r18
    2286:	f3 1f       	adc	r31, r19
    2288:	80 81       	ld	r24, Z
    228a:	83 32       	cpi	r24, 0x23	; 35
    228c:	31 f7       	brne	.-52     	; 0x225a <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	9b 81       	ldd	r25, Y+3	; 0x03
    2298:	fc 01       	movw	r30, r24
    229a:	e2 0f       	add	r30, r18
    229c:	f3 1f       	adc	r31, r19
    229e:	10 82       	st	Z, r1
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	08 95       	ret

000022b0 <__prologue_saves__>:
    22b0:	2f 92       	push	r2
    22b2:	3f 92       	push	r3
    22b4:	4f 92       	push	r4
    22b6:	5f 92       	push	r5
    22b8:	6f 92       	push	r6
    22ba:	7f 92       	push	r7
    22bc:	8f 92       	push	r8
    22be:	9f 92       	push	r9
    22c0:	af 92       	push	r10
    22c2:	bf 92       	push	r11
    22c4:	cf 92       	push	r12
    22c6:	df 92       	push	r13
    22c8:	ef 92       	push	r14
    22ca:	ff 92       	push	r15
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	ca 1b       	sub	r28, r26
    22da:	db 0b       	sbc	r29, r27
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	09 94       	ijmp

000022e8 <__epilogue_restores__>:
    22e8:	2a 88       	ldd	r2, Y+18	; 0x12
    22ea:	39 88       	ldd	r3, Y+17	; 0x11
    22ec:	48 88       	ldd	r4, Y+16	; 0x10
    22ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    22f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    22f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    22f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    22f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    22f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    22fa:	b9 84       	ldd	r11, Y+9	; 0x09
    22fc:	c8 84       	ldd	r12, Y+8	; 0x08
    22fe:	df 80       	ldd	r13, Y+7	; 0x07
    2300:	ee 80       	ldd	r14, Y+6	; 0x06
    2302:	fd 80       	ldd	r15, Y+5	; 0x05
    2304:	0c 81       	ldd	r16, Y+4	; 0x04
    2306:	1b 81       	ldd	r17, Y+3	; 0x03
    2308:	aa 81       	ldd	r26, Y+2	; 0x02
    230a:	b9 81       	ldd	r27, Y+1	; 0x01
    230c:	ce 0f       	add	r28, r30
    230e:	d1 1d       	adc	r29, r1
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	ed 01       	movw	r28, r26
    231c:	08 95       	ret

0000231e <_exit>:
    231e:	f8 94       	cli

00002320 <__stop_program>:
    2320:	ff cf       	rjmp	.-2      	; 0x2320 <__stop_program>
